<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2018-09-17T03:35:00.138Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学会使用Graphviz绘制流程图</title>
    <link href="http://blog.poetries.top/2018/09/17/graphviz/"/>
    <id>http://blog.poetries.top/2018/09/17/graphviz/</id>
    <published>2018-09-17T03:20:08.000Z</published>
    <updated>2018-09-17T03:35:00.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、初识Graphviz"><a href="#一、初识Graphviz" class="headerlink" title="一、初识Graphviz"></a>一、初识Graphviz</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><blockquote><p><code>GraphViz</code>是一个开源的图像可视化的软件，是贝尔实验室开发的一个开源的工具包，它使用一个特定的<code>DSL</code>(领域特定语言): <code>dot</code>作为脚本语言，然后使用布局引擎来解析此脚本，并完成自动布局。<code>graphviz</code>提供丰富的导出格式，如常用的图片格式，<code>SVG</code>，<code>PDF</code>格式等</p></blockquote><h3 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h3><p><strong>结合sublime Text插件实时编译预览</strong></p><blockquote><p>使用<code>shift+command+p</code>，输入搜索选中<code>Package Control: Install Package</code>,然后输入<code>GraphViz</code>,然后安装<code>GraphVizPreview</code>即可，安装完成后，只要全选中代码，然后按<code>shift+command+g</code>就可以预览了。</p></blockquote><ul><li>其实也可以直接用<code>brew</code>安装<code>GraphViz</code>,但是每次要敲命令行，太麻烦了</li></ul><p><strong><code>mac</code>下执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install graphviz</span><br></pre></td></tr></table></figure><blockquote><p>终端编译代码 <code>dot test.dot -T png -o test.png</code></p></blockquote><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><blockquote><p><code>Graphviz</code> 支持两类图：无向图（<code>graph</code>,用“ <code>- -</code> ”表示节点之间）和 有向图（<code>digraph</code>,用“ <code>-&gt;</code>” 表示节点之间）。graphviz包含3中元素，图，顶点和边。<strong>每个元素都可以具有各自的属性，用来定义字体，样式，颜色，形状等</strong></p></blockquote><p><strong><code>GraphViz</code>中包含多种布局</strong></p><ul><li><code>dot</code> 默认布局，用于有向图</li><li><code>neato</code> 基于<code>spring-model</code>算法(<code>force-based</code>)</li><li><code>twopo</code> 径向布局</li><li><code>circo</code> 圆形布局</li><li><code>fdp</code> 用于无向图</li></ul><h3 id="2-1-第一个graphviz图"><a href="#2-1-第一个graphviz图" class="headerlink" title="2.1 第一个graphviz图"></a>2.1 第一个graphviz图</h3><blockquote><p>语法介绍 <a href="http://graphs.grevian.org/reference" target="_blank" rel="noopener">http://graphs.grevian.org/reference</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">  a;</span><br><span class="line">  b;</span><br><span class="line">  c;</span><br><span class="line">  d;</span><br><span class="line"> </span><br><span class="line">  a -&gt; b;</span><br><span class="line">  b -&gt; d;</span><br><span class="line">  c -&gt; d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1124873-8d236356c51d4c7d.png" alt=""></p><p><strong>定义顶点和边的样式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">  node [shape=&quot;record&quot;];</span><br><span class="line">  edge [style=&quot;dashed&quot;];</span><br><span class="line">  a;</span><br><span class="line">  b;</span><br><span class="line">  c;</span><br><span class="line">  d;</span><br><span class="line"> </span><br><span class="line">  a -&gt; b;</span><br><span class="line">  b -&gt; d;</span><br><span class="line">  c -&gt; d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1124873-67688cd634d43522.png" alt=""></p><blockquote><p>进一步修改顶点和边样式,将顶点<code>a</code>的颜色改为淡绿色，并将<code>c</code>到<code>d</code>的边改为红色</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">  node [shape=&quot;record&quot;];</span><br><span class="line">  edge [style=&quot;dashed&quot;];</span><br><span class="line"> </span><br><span class="line">  a [style=&quot;filled&quot;, color=&quot;black&quot;, fillcolor=&quot;chartreuse&quot;];</span><br><span class="line">  b;</span><br><span class="line">  c;</span><br><span class="line">  d;</span><br><span class="line"> </span><br><span class="line">  a -&gt; b;</span><br><span class="line">  b -&gt; d;</span><br><span class="line">  c -&gt; d [color=&quot;red&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1124873-4653635b22070622.png" alt=""></p><p>其他例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">digraph demo&#123;</span><br><span class="line">  label=&quot;儿茶酚胺合成代谢路径&quot;;</span><br><span class="line"></span><br><span class="line">  酪氨酸 -&gt; L多巴 -&gt; 多巴胺 -&gt; 去甲肾上腺素 -&gt; 肾上腺素;</span><br><span class="line"></span><br><span class="line">  下丘脑 -&gt; 多巴胺;</span><br><span class="line">  交感神经元 -&gt; 去甲肾上腺素;</span><br><span class="line">  肾上腺髓质 -&gt; 去甲肾上腺素,肾上腺素;</span><br><span class="line"></span><br><span class="line">  酪氨酸 [label=&quot;酪氨酸&quot;,color=green];</span><br><span class="line">  多巴胺 [label=&quot;多巴胺&quot;, color=red];</span><br><span class="line">  肾上腺素 [label=&quot;肾上腺素&quot;, color=red];</span><br><span class="line"></span><br><span class="line">  下丘脑 [shape=box];</span><br><span class="line">  交感神经元 [shape=box];</span><br><span class="line">  肾上腺髓质 [shape=box];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1037849-99ca7c041266a87c.png" alt=""></p><h3 id="2-2-带标签"><a href="#2-2-带标签" class="headerlink" title="2.2 带标签"></a>2.2 带标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">digraph &#123;</span><br><span class="line"></span><br><span class="line">    player[label = &quot;player&quot;, color = Blue, fontcolor = Red, fontsize = 24, shape = box];</span><br><span class="line">    game[label = &quot;game&quot;, color = Red, fontcolor = Blue, fontsize = 24, shape = ellipse];</span><br><span class="line"></span><br><span class="line">    player -&gt; game[label = &quot;play&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3265989-c1f45fc0df0ee4d6.jpg" alt=""></p><h3 id="2-3-子视图"><a href="#2-3-子视图" class="headerlink" title="2.3 子视图"></a>2.3 子视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">digraph &#123;</span><br><span class="line"></span><br><span class="line">    label = visitNet</span><br><span class="line"></span><br><span class="line">    rankdir = LR</span><br><span class="line"></span><br><span class="line">    node[color = Red, fontsize = 24, shape = box]</span><br><span class="line">    edge[color = Blue, style = &quot;dashed&quot;]</span><br><span class="line"></span><br><span class="line">    user[style = &quot;filled&quot;, color = &quot;yellow&quot;, fillcolor = &quot;chartreuse&quot;]</span><br><span class="line">    subgraph cluster_cd&#123;</span><br><span class="line">        label = &quot;server and browser&quot;</span><br><span class="line">        bgcolor = green;</span><br><span class="line"></span><br><span class="line">        browser -&gt; server</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    user -&gt; computer;</span><br><span class="line">    computer -&gt; browser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3265989-03328145eb139daa.jpg" alt=""></p><h3 id="2-4-结构视图"><a href="#2-4-结构视图" class="headerlink" title="2.4 结构视图"></a>2.4 结构视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">digraph &#123;</span><br><span class="line"></span><br><span class="line">    node[shape = record];</span><br><span class="line">    struct1[label = &quot;&lt;f0&gt; left|&lt;f1&gt; mid&amp;#92; dle|&lt;f2&gt; right&quot;];</span><br><span class="line">    struct2[label = &quot;&lt;f0&gt; one|&lt;f1&gt; two&quot;];</span><br><span class="line">    struct3[label = &quot;hello&amp;#92;nworld | &#123;b|&#123;c|&lt;here&gt; d|e&#125;|f&#125;|g|h&quot;];</span><br><span class="line">    struct1:f1 -&gt; struct2:f0;</span><br><span class="line">    struct1:f2 -&gt; struct3:here;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3265989-e8844314768e83c6.jpg" alt=""></p><h3 id="2-5-树形结构"><a href="#2-5-树形结构" class="headerlink" title="2.5 树形结构"></a>2.5 树形结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">digraph tree &#123;</span><br><span class="line">  </span><br><span class="line">  fontname = &quot;PingFang-SC-Light&quot;</span><br><span class="line">  fontsize = 24</span><br><span class="line"></span><br><span class="line">  node[shape = &quot;plaintext&quot;]</span><br><span class="line"></span><br><span class="line">  1 -&gt; 2;</span><br><span class="line">  1 -&gt; 3;</span><br><span class="line">  2 -&gt; 4;</span><br><span class="line">  2 -&gt; 5;</span><br><span class="line">  3 -&gt; 6;</span><br><span class="line">  3 -&gt; 7;</span><br><span class="line">  4 -&gt; 8;</span><br><span class="line">  4 -&gt; 9;</span><br><span class="line">  5 -&gt; 10;</span><br><span class="line">  5 -&gt; 11;</span><br><span class="line">  6 -&gt; 12;</span><br><span class="line">  6 -&gt; 13;</span><br><span class="line">  7 -&gt; 14;</span><br><span class="line">  7 -&gt; 15;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3265989-a4f13ed1574d12ba.jpg" alt=""></p><h3 id="2-6-时序图"><a href="#2-6-时序图" class="headerlink" title="2.6 时序图"></a>2.6 时序图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">digraph time &#123;</span><br><span class="line"></span><br><span class="line">    rankdir = &quot;LR&quot;;</span><br><span class="line">    node[shape = &quot;point&quot;, width = 0, height = 0];</span><br><span class="line">    edge[arrowhead = &quot;none&quot;, style = &quot;dashed&quot;];</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        rank = &quot;same&quot;</span><br><span class="line">        edge[style = &quot;solided&quot;];</span><br><span class="line">        APP[shape = &quot;plaintext&quot;];</span><br><span class="line">        APP -&gt; step00 -&gt; step01 -&gt; step02 -&gt; step03 -&gt; step04 -&gt; step05;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        rank=&quot;same&quot;;</span><br><span class="line">        edge[style=&quot;solided&quot;];</span><br><span class="line">        SDK[shape=&quot;plaintext&quot;];</span><br><span class="line">        SDK -&gt; step10 -&gt; step11 -&gt; step12 -&gt; step13 -&gt; step14 -&gt; step15;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        rank=&quot;same&quot;;</span><br><span class="line">        edge[style=&quot;solided&quot;];</span><br><span class="line">        AliPay[shape=&quot;plaintext&quot;];</span><br><span class="line">        AliPay -&gt; step20 -&gt; step21 -&gt; step22 -&gt; step23 -&gt; step24 -&gt; step25;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        rank=&quot;same&quot;;</span><br><span class="line">        edge[style=&quot;solided&quot;];</span><br><span class="line">        Server[shape=&quot;plaintext&quot;];</span><br><span class="line">        Server -&gt; step30 -&gt; step31 -&gt; step32 -&gt; step33 -&gt; step34 -&gt; step35;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    step00 -&gt; step10 [label=&quot;sends order info&quot;, arrowhead=&quot;normal&quot;];</span><br><span class="line">    step11 -&gt; step21 [label=&quot;open AliPay&quot;, arrowhead=&quot;normal&quot;];</span><br><span class="line">    step22 -&gt; step12 [label=&quot;pay success&quot;, arrowhead=&quot;normal&quot;];</span><br><span class="line">    step13 -&gt; step03 [label=&quot;pay success&quot;, arrowhead=&quot;normal&quot;];</span><br><span class="line">    step24 -&gt; step34 [label=&quot;pay success&quot;, arrowhead=&quot;normal&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3265989-349e4311490c6f86.jpg" alt=""></p><h3 id="2-7-一个hash表的数据结构"><a href="#2-7-一个hash表的数据结构" class="headerlink" title="2.7 一个hash表的数据结构"></a>2.7 一个hash表的数据结构</h3><blockquote><p><code>hash</code>表内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">struct st_hash_type &#123;</span><br><span class="line">    int (*compare) ();</span><br><span class="line">    int (*hash) ();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">struct st_table_entry &#123;</span><br><span class="line">    unsigned int hash;</span><br><span class="line">    char *key;</span><br><span class="line">    char *record;</span><br><span class="line">    st_table_entry *next;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">struct st_table &#123;</span><br><span class="line">    struct st_hash_type *type;</span><br><span class="line">    int num_bins;</span><br><span class="line">/* slot count */</span><br><span class="line">    int num_entries;</span><br><span class="line">/* total number of entries */</span><br><span class="line">    struct st_table_entry **bins;</span><br><span class="line">/* slot */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">digraph st2&#123;</span><br><span class="line">  fontname = &quot;Verdana&quot;;</span><br><span class="line">  fontsize = 10;</span><br><span class="line">  rankdir=TB;</span><br><span class="line"> </span><br><span class="line">  node [fontname = &quot;Verdana&quot;, fontsize = 10, color=&quot;skyblue&quot;, shape=&quot;record&quot;];</span><br><span class="line"> </span><br><span class="line">  edge [fontname = &quot;Verdana&quot;, fontsize = 10, color=&quot;crimson&quot;, style=&quot;solid&quot;];</span><br><span class="line"> </span><br><span class="line">  st_hash_type [label=&quot;&#123;&lt;head&gt;st_hash_type|(*compare)|(*hash)&#125;&quot;];</span><br><span class="line">  st_table_entry [label=&quot;&#123;&lt;head&gt;st_table_entry|hash|key|record|&lt;next&gt;next&#125;&quot;];</span><br><span class="line">  st_table [label=&quot;&#123;st_table|&lt;type&gt;type|num_bins|num_entries|&lt;bins&gt;bins&#125;&quot;];</span><br><span class="line"> </span><br><span class="line">  st_table:bins -&gt; st_table_entry:head;</span><br><span class="line">  st_table:type -&gt; st_hash_type:head;</span><br><span class="line">  st_table_entry:next -&gt; st_table_entry:head [style=&quot;dashed&quot;, color=&quot;forestgreen&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1124873-4a2d88dc6716d9e8.png" alt=""></p><h3 id="2-8-模块的生命周期图"><a href="#2-8-模块的生命周期图" class="headerlink" title="2.8 模块的生命周期图"></a>2.8 模块的生命周期图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">digraph module_lc&#123;</span><br><span class="line">  rankdir=TB;</span><br><span class="line">  fontname = &quot;Microsoft YaHei&quot;;</span><br><span class="line">  fontsize = 12;</span><br><span class="line"> </span><br><span class="line">  node [fontname = &quot;Microsoft YaHei&quot;, fontsize = 12, shape = &quot;Mrecord&quot;, color=&quot;skyblue&quot;, style=&quot;filled&quot;];</span><br><span class="line">  edge [fontname = &quot;Microsoft YaHei&quot;, fontsize = 12, color=&quot;darkgreen&quot; ];</span><br><span class="line"> </span><br><span class="line">  installed [label=&quot;已安装状态&quot;];</span><br><span class="line">  resolved [label=&quot;已就绪状态&quot;];</span><br><span class="line">  uninstalled [label=&quot;已卸载状态&quot;];</span><br><span class="line">  starting [label=&quot;正在启动&quot;];</span><br><span class="line">  active [label=&quot;已激活(运行)状态&quot;];</span><br><span class="line">  stopping [label=&quot;正在停止&quot;];</span><br><span class="line">  start [label=&quot;&quot;, shape=&quot;circle&quot;, width=0.5, fixedsize=true, style=&quot;filled&quot;, color=&quot;black&quot;];</span><br><span class="line"> </span><br><span class="line">  start -&gt; installed [label=&quot;安装&quot;];</span><br><span class="line">  installed -&gt; uninstalled [label=&quot;卸载&quot;];</span><br><span class="line">  installed -&gt; resolved [label=&quot;准备&quot;];</span><br><span class="line">  installed -&gt; installed [label=&quot;更新&quot;];</span><br><span class="line">  resolved -&gt; installed [label=&quot;更新&quot;];</span><br><span class="line">  resolved -&gt; uninstalled [label=&quot;卸载&quot;];</span><br><span class="line">  resolved -&gt; starting [label=&quot;启动&quot;];</span><br><span class="line">  starting -&gt; active [label=&quot;&quot;];</span><br><span class="line">  active -&gt; stopping [label=&quot;停止&quot;];</span><br><span class="line">  stopping -&gt; resolved [label=&quot;&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1124873-43070dec615582d5.png" alt=""></p><h3 id="2-9-简单的UML类图"><a href="#2-9-简单的UML类图" class="headerlink" title="2.9 简单的UML类图"></a>2.9 简单的UML类图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">digraph G&#123;</span><br><span class="line"> </span><br><span class="line">  fontname = &quot;Courier New&quot;</span><br><span class="line">  fontsize = 10</span><br><span class="line"> </span><br><span class="line">  node [ fontname = &quot;Courier New&quot;, fontsize = 10, shape = &quot;record&quot; ];</span><br><span class="line">  edge [ fontname = &quot;Courier New&quot;, fontsize = 10 ];</span><br><span class="line"> </span><br><span class="line">  Animal [ label = &quot;&#123;Animal |+ name : String\\l+ age : int\\l|+ die() : void\\l&#125;&quot; ];</span><br><span class="line"> </span><br><span class="line">      subgraph clusterAnimalImpl&#123;</span><br><span class="line">          bgcolor=&quot;yellow&quot;</span><br><span class="line">          Dog [ label = &quot;&#123;Dog||+ bark() : void\\l&#125;&quot; ];</span><br><span class="line">          Cat [ label = &quot;&#123;Cat||+ meow() : void\\l&#125;&quot; ];</span><br><span class="line">      &#125;;</span><br><span class="line"> </span><br><span class="line">  edge [ arrowhead = &quot;empty&quot; ];</span><br><span class="line"> </span><br><span class="line">  Dog-&gt;Animal;</span><br><span class="line">  Cat-&gt;Animal;</span><br><span class="line">  Dog-&gt;Cat [arrowhead=&quot;none&quot;, label=&quot;0..*&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1124873-b0748577409021da.png" alt=""></p><h3 id="2-10-有限状态机"><a href="#2-10-有限状态机" class="headerlink" title="2.10 有限状态机"></a>2.10 有限状态机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">digraph finite_state_machine &#123;</span><br><span class="line">    rankdir=LR;</span><br><span class="line">    size=&quot;8,5&quot;</span><br><span class="line">    node [shape = circle];</span><br><span class="line">    S0 -&gt; S1 [ label = &quot;Lift Nozzle&quot; ]</span><br><span class="line">    S1 -&gt; S0 [ label = &quot;Replace Nozzle&quot; ]</span><br><span class="line">    S1 -&gt; S2 [ label = &quot;Authorize Pump&quot; ]</span><br><span class="line">    S2 -&gt; S0 [ label = &quot;Replace Nozzle&quot; ]</span><br><span class="line">    S2 -&gt; S3 [ label = &quot;Pull Trigger&quot; ]</span><br><span class="line">    S3 -&gt; S2 [ label = &quot;Release Trigger&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img2.tuicool.com/yEze6z.png%21web" alt=""></p><h2 id="三、语法"><a href="#三、语法" class="headerlink" title="三、语法"></a>三、语法</h2><blockquote><p>完整列表 <a href="http://graphviz.org/doc/info/attrs.html" target="_blank" rel="noopener">http://graphviz.org/doc/info/attrs.html</a></p></blockquote><h3 id="3-1-图像属性"><a href="#3-1-图像属性" class="headerlink" title="3.1 图像属性"></a>3.1 图像属性</h3><ul><li><code>label=&quot;My Graph&quot;;</code>       给图像设置标签</li><li><code>rankdir=LR</code>;             将图片由原来的从上到下布局变成从左到右布局</li><li><code>{rank=same; a, b, c }</code>   将一组元素放到同一个<code>level</code></li><li><code>splines=&quot;line&quot;</code>;         让边框变为直线，没有曲线和锐角</li><li><code>K=0.6</code>;      用来在布局中影响<code>spring</code>属性，<code>spring</code>属性可以用于将节点往外推，这个在<code>twopi</code>和<code>sfdp</code>布局中很有用。</li></ul><h3 id="3-2-交点属性"><a href="#3-2-交点属性" class="headerlink" title="3.2 交点属性"></a>3.2 交点属性</h3><ul><li><code>[label=&quot;Some Label&quot;]</code>    给交点打标签</li><li><code>[color=&quot;red&quot;]</code>         给交点上色</li><li><code>[fillcolor=&quot;blue&quot;]</code>      设置交点的填充色</li></ul><h3 id="3-3-边的属性"><a href="#3-3-边的属性" class="headerlink" title="3.3 边的属性"></a>3.3 边的属性</h3><ul><li><code>[label=&quot;Some Label&quot;]</code>    给边设置标签 (设置路径权重的时候很有用)</li><li><code>[color=&quot;red&quot;]</code>          # 给交点上色 (标示路径的时候很有用)</li><li><code>[penwidth=2.0]</code>          # 给边适配厚度，标示路径的时候很有用。</li></ul><h3 id="3-4-尺寸-背景颜色"><a href="#3-4-尺寸-背景颜色" class="headerlink" title="3.4 尺寸, 背景颜色"></a>3.4 尺寸, 背景颜色</h3><ul><li><code>fixedsize=true</code>;</li><li><code>size=&quot;1,1&quot;</code>;</li><li><code>resolution=72</code>;</li><li><code>bgcolor=&quot;#C6CFD532&quot;</code>;</li></ul><h2 id="四、一些技巧"><a href="#四、一些技巧" class="headerlink" title="四、一些技巧"></a>四、一些技巧</h2><h3 id="4-1-插入图片"><a href="#4-1-插入图片" class="headerlink" title="4.1 插入图片"></a>4.1 插入图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">digraph &#123;</span><br><span class="line"></span><br><span class="line">    c[shape = none, image = &quot;./pic.png&quot;]</span><br><span class="line">    a -&gt; b -&gt; c;</span><br><span class="line">    c -&gt; d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3265989-f727aa1e539e8a22.jpg" alt=""></p><blockquote><p>注：需要用命令行<code>dot test.dot -T png -o test.png</code>生成，前提是用<code>brew</code>安装了<code>GraphViz</code></p></blockquote><h3 id="4-2-统一节点和连线"><a href="#4-2-统一节点和连线" class="headerlink" title="4.2 统一节点和连线"></a>4.2 统一节点和连线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">digraph &#123;</span><br><span class="line"></span><br><span class="line">    node[color = Red, fontsize = 24, shape = box]</span><br><span class="line">    edge[color = Blue, style = &quot;dashed&quot;]</span><br><span class="line"></span><br><span class="line">    c[shape = none, image = &quot;./pic.png&quot;]</span><br><span class="line">    a -&gt; b -&gt; c;</span><br><span class="line">    c -&gt; d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3265989-f10859f0196ccc26.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、初识Graphviz&quot;&gt;&lt;a href=&quot;#一、初识Graphviz&quot; class=&quot;headerlink&quot; title=&quot;一、初识Graphviz&quot;&gt;&lt;/a&gt;一、初识Graphviz&lt;/h2&gt;&lt;h3 id=&quot;1-1-简介&quot;&gt;&lt;a href=&quot;#1-1-简介&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Graphviz" scheme="http://blog.poetries.top/tags/Graphviz/"/>
    
  </entry>
  
  <entry>
    <title>Ant Design Pro总结篇</title>
    <link href="http://blog.poetries.top/2018/09/16/ant-design-pro/"/>
    <id>http://blog.poetries.top/2018/09/16/ant-design-pro/</id>
    <published>2018-09-16T16:10:23.000Z</published>
    <updated>2018-09-17T03:35:00.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1-1-ant-pro系统特性"><a href="#1-1-ant-pro系统特性" class="headerlink" title="1.1 ant pro系统特性"></a>1.1 ant pro系统特性</h2><ul><li>基于 <code>Ant Design</code> 体系精心设计</li><li>使用 <code>React/umi/dva/antd</code> 等前端前沿技术开发</li><li>针对不同屏幕大小设计</li><li>可配置的主题满足多样化的品牌诉求</li><li><code>Mock</code> 数据实用的本地数据调试方案</li></ul><h2 id="1-2-模板"><a href="#1-2-模板" class="headerlink" title="1.2 模板"></a>1.2 模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- Dashboard</span><br><span class="line">  - 分析页</span><br><span class="line">  - 监控页</span><br><span class="line">  - 工作台</span><br><span class="line">- 表单页</span><br><span class="line">  - 基础表单页</span><br><span class="line">  - 分步表单页</span><br><span class="line">  - 高级表单页</span><br><span class="line">- 列表页</span><br><span class="line">  - 查询表格</span><br><span class="line">  - 标准列表</span><br><span class="line">  - 卡片列表</span><br><span class="line">  - 搜索列表（项目/应用/文章）</span><br><span class="line">- 详情页</span><br><span class="line">  - 基础详情页</span><br><span class="line">  - 高级详情页</span><br><span class="line">- 结果</span><br><span class="line">  - 成功页</span><br><span class="line">  - 失败页</span><br><span class="line">- 异常</span><br><span class="line">  - 403 无权限</span><br><span class="line">  - 404 找不到</span><br><span class="line">  - 500 服务器出错</span><br><span class="line">- 个人页</span><br><span class="line">  - 个人中心</span><br><span class="line">  - 个人设置</span><br><span class="line">- 帐户</span><br><span class="line">  - 登录</span><br><span class="line">  - 注册</span><br><span class="line">  - 注册成功</span><br></pre></td></tr></table></figure><h2 id="1-3-使用"><a href="#1-3-使用" class="headerlink" title="1.3 使用"></a>1.3 使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --depth=1 https://github.com/ant-design/ant-design-pro.git my-project</span><br><span class="line">$ cd my-project</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install ant-design-pro-cli -g</span><br><span class="line">$ mkdir my-project &amp;&amp; cd my-project</span><br><span class="line">$ pro new  # 安装脚手架</span><br></pre></td></tr></table></figure><h2 id="1-4-目录结构"><a href="#1-4-目录结构" class="headerlink" title="1.4 目录结构"></a>1.4 目录结构</h2><p>整个项目的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">├── mock                     # 本地模拟数据</span><br><span class="line">├── node_modules             # 依赖库</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico          # Favicon</span><br><span class="line">│   └── index.html           # HTML 入口模板</span><br><span class="line">├── src</span><br><span class="line">│   ├── common               # 应用公用配置，如导航信息</span><br><span class="line">│   ├── components           # 业务通用组件</span><br><span class="line">│   ├── e2e                  # 集成测试用例</span><br><span class="line">│   ├── layouts              # 通用布局</span><br><span class="line">│   ├── models               # dva model</span><br><span class="line">│   ├── routes               # 业务页面入口和常用模板</span><br><span class="line">│   ├── services             # 后台接口服务</span><br><span class="line">│   ├── utils                # 工具库</span><br><span class="line">│   ├── g2.js                # 可视化图形配置</span><br><span class="line">│   ├── polyfill.js          # 兼容性垫片</span><br><span class="line">│   ├── theme.js             # 主题配置</span><br><span class="line">│   ├── index.js             # 应用入口</span><br><span class="line">│   ├── index.less           # 全局样式</span><br><span class="line">│   └── router.js            # 路由入口</span><br><span class="line">├── tests                    # 测试工具</span><br><span class="line">├── .editorconfig            # 编辑器配置</span><br><span class="line">├── .eslintrc                # js代码检测工具</span><br><span class="line">├── .ga                      # 未知</span><br><span class="line">├── .gitignore               # git版本配置</span><br><span class="line">├── .roadhogrc               # roadhog配置</span><br><span class="line">├── .roadhogrc.mock.js       # roadhog的模拟配置</span><br><span class="line">├── .stylelintrc             # css代码审查配置</span><br><span class="line">├── .travis.yml              # travis持续构建工具配置</span><br><span class="line">├── package.json             # web前端项目配置文件</span><br><span class="line">├── README.md</span><br><span class="line">└──</span><br></pre></td></tr></table></figure><h2 id="roadhog摘要介绍"><a href="#roadhog摘要介绍" class="headerlink" title="roadhog摘要介绍"></a>roadhog摘要介绍</h2><ul><li><code>roadhog</code> 是一个 <code>cli</code> 工具，提供 <code>server</code>、 <code>build</code> 和 test 三个命令，分别用于本地调试和构建，并且提供了特别易用的 mock 功能。命令行体验和 <code>create-react-app</code> 一致，配置略有不同，比如默认开启 <code>css</code> <code>modules</code>，然后还提供了 <code>JSON</code> 格式的配置方式。</li><li>重点介绍<code>roadhog</code>有关的几个配置项，主要是在<code>ant design pro</code>的代码中用到了这些配置项</li></ul><p><strong>entry</strong></p><ul><li>指定 <code>webpack</code> 入口文件，支持 <code>glob</code>格式。</li><li>如果你的项目是多页类型，会希望把 <code>src/pages</code>的文件作为入口。可以这样配：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;entry&quot;: &quot;src/pages/\*.js&quot;</span><br></pre></td></tr></table></figure><p><strong>env</strong></p><blockquote><p>针对特定的环境进行配置。<code>server</code> 的环境变量是 <code>development</code>，<code>build</code> 的环境变量是<code>production</code>。</p></blockquote><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"extraBabelPlugins"</span>: [<span class="string">"transform-runtime"</span>],</span><br><span class="line"><span class="string">"env"</span>: &#123;</span><br><span class="line">  <span class="string">"development"</span>: &#123;</span><br><span class="line">    <span class="string">"extraBabelPlugins"</span>: [<span class="string">"dva-hmr"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样，开发环境下的 <code>extraBabelPlugins</code> 是 <code>[&quot;transform-runtime&quot;, &quot;dva-hmr&quot;]</code>，而生产环境下是 <code>[&quot;transform-runtime&quot;]</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"env"</span>: &#123;</span><br><span class="line">  <span class="string">"development"</span>: &#123;</span><br><span class="line">    <span class="string">"extraBabelPlugins"</span>: [</span><br><span class="line">      <span class="string">"dva-hmr"</span>,</span><br><span class="line">      <span class="string">"transform-runtime"</span>,</span><br><span class="line">      <span class="string">"transform-decorators-legacy"</span>,</span><br><span class="line">      <span class="string">"transform-class-properties"</span>,</span><br><span class="line">      [<span class="string">"import"</span>, &#123; <span class="string">"libraryName"</span>: <span class="string">"antd"</span>, <span class="string">"style"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"production"</span>: &#123;</span><br><span class="line">    <span class="string">"extraBabelPlugins"</span>: [</span><br><span class="line">      <span class="string">"transform-runtime"</span>,</span><br><span class="line">      <span class="string">"transform-decorators-legacy"</span>,</span><br><span class="line">      <span class="string">"transform-class-properties"</span>,</span><br><span class="line">      [<span class="string">"import"</span>, &#123; <span class="string">"libraryName"</span>: <span class="string">"antd"</span>, <span class="string">"style"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这段代码中，开发环境和生产环境分别配置，其中开发环境使用了<code>dva-hmr</code>插件</p></blockquote><h1 id="二、布局"><a href="#二、布局" class="headerlink" title="二、布局"></a>二、布局</h1><blockquote><p>页面整体布局是一个产品最外层的框架结构，往往会包含导航、页脚、侧边栏、通知栏以及内容等。在页面之中，也有很多区块的布局结构。在真实项目中，页面布局通常统领整个应用的界面，有非常重要的作用</p></blockquote><h2 id="2-1-Ant-Design-Pro-的布局"><a href="#2-1-Ant-Design-Pro-的布局" class="headerlink" title="2.1 Ant Design Pro 的布局"></a>2.1 Ant Design Pro 的布局</h2><blockquote><p>在 Ant Design Pro 中，我们抽离了使用过程中的通用布局，都放在 <code>layouts</code> 目录中，分别为</p></blockquote><p><strong>BasicLayout：基础页面布局，包含了头部导航，侧边栏和通知栏</strong></p><p><img src="https://gw.alipayobjects.com/zos/rmsportal/oXmyfmffJVvdbmDoGvuF.png" alt=""></p><p><strong>UserLayout：抽离出用于登陆注册页面的通用布局</strong></p><p><img src="https://gw.alipayobjects.com/zos/rmsportal/mXsydBXvLqBVEZLMssEy.png" alt=""></p><p><strong>BlankLayout：空白的布局</strong></p><h2 id="2-2-如何使用-Ant-Design-Pro-布局"><a href="#2-2-如何使用-Ant-Design-Pro-布局" class="headerlink" title="2.2 如何使用 Ant Design Pro 布局"></a>2.2 如何使用 Ant Design Pro 布局</h2><blockquote><p>通常布局是和路由系统紧密结合的，Ant Design Pro 的路由使用了 <code>Umi</code> 的路由方案，为了统一方便的管理路由和页面的关系，我们将配置信息统一抽离到 <code>config/router.config.js</code> 下，通过如下配置定义每个页面的布局</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = [&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  component: <span class="string">'../layouts/BasicLayout'</span>,  <span class="comment">// 指定以下页面的布局</span></span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// dashboard</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/dashboard/analysis'</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/dashboard'</span>,</span><br><span class="line">      name: <span class="string">'dashboard'</span>,</span><br><span class="line">      icon: <span class="string">'dashboard'</span>,</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/dashboard/analysis'</span>, <span class="attr">name</span>: <span class="string">'analysis'</span>, <span class="attr">component</span>: <span class="string">'./Dashboard/Analysis'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/dashboard/monitor'</span>, <span class="attr">name</span>: <span class="string">'monitor'</span>, <span class="attr">component</span>: <span class="string">'./Dashboard/Monitor'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/dashboard/workplace'</span>, <span class="attr">name</span>: <span class="string">'workplace'</span>, <span class="attr">component</span>: <span class="string">'./Dashboard/Workplace'</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>更多 Umi 的路由配置方式可以参考：<a href="https://umijs.org/guide/router.html#%E9%85%8D%E7%BD%AE%E5%BC%8F%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener">Umi 配置式路由</a></p></blockquote><h2 id="2-3-Pro-扩展配置"><a href="#2-3-Pro-扩展配置" class="headerlink" title="2.3 Pro 扩展配置"></a>2.3 Pro 扩展配置</h2><blockquote><p>我们在 <code>router.config.js</code> 扩展了一些关于 <code>pro</code> 全局菜单的配置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: <span class="string">'dashboard'</span>,</span><br><span class="line">  icon: <span class="string">'dashboard'</span>,</span><br><span class="line">  hideInMenu: <span class="literal">true</span>,</span><br><span class="line">  hideChildrenInMenu: <span class="literal">true</span>,</span><br><span class="line">  hideInBreadcrumb: <span class="literal">true</span>,</span><br><span class="line">  authority: [<span class="string">'admin'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>name</code>: 当前路由在菜单和面包屑中的名称，注意这里是国际化配置的 <code>key</code>，具体展示菜单名可以在 <code>/src/locales/zh-CN.js</code> 进行配置。</li><li><code>icon</code>: 当前路由在菜单下的图标名。</li><li><code>hideInMenu</code>: 当前路由在菜单中不展现，默认 <code>false</code>。</li><li><code>hideChildrenInMenu</code>: 当前路由的子级在菜单中不展现，默认 <code>false</code>。</li><li><code>hideInBreadcrumb</code>: 当前路由在面包屑中不展现，默认 <code>false</code>。</li><li><code>authority</code>: 允许展示的权限，不设则都可见，详见：权限管理</li></ul><h2 id="2-4-Ant-Design-布局组件"><a href="#2-4-Ant-Design-布局组件" class="headerlink" title="2.4 Ant Design 布局组件"></a>2.4 Ant Design 布局组件</h2><blockquote><p>除了 Pro 里的内建布局以为，在一些页面中需要进行布局，可以使用 Ant Design 目前提供的两套布局组件工具：<code>Layout</code> 和 <code>Grid</code></p></blockquote><p><strong>Grid 组件</strong></p><blockquote><ul><li>栅格布局是网页中最常用的布局，其特点就是按照一定比例划分页面，能够随着屏幕的变化依旧保持比例，从而具有弹性布局的特点。</li><li>而 Ant Design 的栅格组件提供的功能更为强大，能够设置间距、具有支持响应式的比例设置，以及支持 flex 模式，基本上涵盖了大部分的布局场景 <a href="https://ant.design/components/grid/" target="_blank" rel="noopener">https://ant.design/components/grid/</a></li></ul></blockquote><p><strong>Layout 组件</strong></p><blockquote><p>如果你需要辅助页面框架级别的布局设计，那么 Layout 则是你最佳的选择，它抽象了大部分框架布局结构，使得只需要填空就可以开发规范专业的页面整体布局 <a href="https://ant.design/components/layout-cn/" target="_blank" rel="noopener">https://ant.design/components/layout-cn/</a></p></blockquote><ul><li>根据不同场景区分抽离布局组件#<br>在大部分场景下，我们需要基于上面两个组件封装一些适用于当下具体业务的组件，包含了通用的导航、侧边栏、顶部通知、页面标题等元素。例如 Ant Design Pro 的 <code>BasicLayout</code>。</li><li>通常，我们会把抽象出来的布局组件，放到跟 pages、 components 平行的 layouts 文件夹中方便管理。需要注意的是，这些布局组件和我们平时使用的其它组件并没有什么不同，只不过功能性上是为了处理布局问题</li></ul><h1 id="四、路由和菜单"><a href="#四、路由和菜单" class="headerlink" title="四、路由和菜单"></a>四、路由和菜单</h1><blockquote><p>路由和菜单是组织起一个应用的关键骨架，pro 中的路由为了方便管理，使用了中心化的方式，在 <code>router.config.js</code> 统一配置和管理</p></blockquote><h2 id="4-1-基本结构"><a href="#4-1-基本结构" class="headerlink" title="4.1 基本结构"></a>4.1 基本结构</h2><ul><li><strong>路由管理</strong> 通过约定的语法根据在 <code>router.config.js</code> 中配置路由。</li><li><strong>菜单生成</strong> 根据路由配置来生成菜单。菜单项名称，嵌套路径与路由高度耦合。</li><li><strong>面包屑</strong> 组件 <a href="https://pro.ant.design/components/PageHeader-cn" target="_blank" rel="noopener">PageHeader</a> 中内置的面包屑也可由脚手架提供的配置信息自动生成</li></ul><h3 id="4-1-1-路由"><a href="#4-1-1-路由" class="headerlink" title="4.1.1 路由"></a>4.1.1 路由</h3><blockquote><p>目前脚手架中所有的路由都通过 <code>router.config.js</code> 来统一管理，在 <code>umi</code> 的配置中我们增加了一些参数，如<code>name</code>,<code>icon</code>,<code>hideChildren</code>,<code>authority</code>，来辅助生成菜单。其中</p></blockquote><ul><li><code>name</code> 和 <code>icon</code>分别代表生成菜单项的图标和文本。</li><li><code>hideChildren</code> 用于隐藏不需要在菜单中展示的子路由。用法可以查看 分步表单 的配置。</li><li><code>hideInMenu</code> 可以在菜单中不展示这个路由，包括子路由。效果可以查看 <code>exception/trigger</code>页面。</li><li><code>authority</code> 用来配置这个路由的权限，如果配置了将会验证当前用户的权限，并决定是否展示</li></ul><h3 id="4-1-2-菜单"><a href="#4-1-2-菜单" class="headerlink" title="4.1.2 菜单"></a>4.1.2 菜单</h3><blockquote><p>菜单根据 <code>router.config.js</code> 生成，具体逻辑在 <code>src/layouts/BasicLayout</code> 中的 <code>formatter</code> 方法实现</p></blockquote><ul><li>如果你的项目并不需要菜单，你可以直接在<code>BasicLayout</code> 中删除 <code>SiderMenu</code> 组件的挂载。并在 <code>src/layouts/BasicLayout</code> 中 设置 <code>const MenuData = []</code>。</li><li>如果你需要从服务器请求菜单，可以将<code>menuData</code>设置为 <code>state</code>，然后通过网络获取来修改了 <code>state</code></li></ul><h3 id="4-1-3-面包屑"><a href="#4-1-3-面包屑" class="headerlink" title="4.1.3 面包屑"></a>4.1.3 面包屑</h3><blockquote><p>面包屑由 <code>PageHeaderLayout</code> 实现，<code>MenuContext</code> 将 根据 <code>MenuData</code> 生成的 <code>breadcrumbNameMap</code> 通过<code>props</code> 传递给了 <code>PageHeader</code>，如果你要做自定义的面包屑，可以通过修改传入的 <code>breadcrumbNameMap</code> 来解决</p></blockquote><p><code>breadcrumbNameMap</code> 示例数据如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'/'</span>: &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/dashboard/analysis'</span>, <span class="attr">locale</span>: <span class="string">'menu'</span> &#125;,</span><br><span class="line">  <span class="string">'/dashboard/analysis'</span>: &#123;</span><br><span class="line">    name: <span class="string">'analysis'</span>,</span><br><span class="line">    component: <span class="string">'./Dashboard/Analysis'</span>,</span><br><span class="line">    locale: <span class="string">'menu.dashboard.analysis'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-需求实例"><a href="#4-2-需求实例" class="headerlink" title="4.2 需求实例"></a>4.2 需求实例</h2><h3 id="4-2-1-新增页面"><a href="#4-2-1-新增页面" class="headerlink" title="4.2.1 新增页面"></a>4.2.1 新增页面</h3><blockquote><p>脚手架默认提供了两种布局模板：基础布局 - <code>BasicLayout</code> 以及 账户相关布局 - <code>UserLayout</code></p></blockquote><p><img src="https://gw.alipayobjects.com/zos/rmsportal/oXmyfmffJVvdbmDoGvuF.png" alt=""></p><p><img src="https://gw.alipayobjects.com/zos/rmsportal/mXsydBXvLqBVEZLMssEy.png" alt=""></p><p>如果你的页面可以利用这两种布局，那么只需要在路由配置中增加一条即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// app</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: <span class="string">'../layouts/BasicLayout'</span>,</span><br><span class="line">    routes: [</span><br><span class="line">      <span class="comment">// dashboard</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/dashboard/analysis'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span> :<span class="string">'/dashboard/test'</span>,<span class="attr">component</span>:<span class="string">"./Dashboard/Test"</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>加好后，会默认生成相关的路由及导航</p></blockquote><h3 id="4-2-2-新增布局"><a href="#4-2-2-新增布局" class="headerlink" title="4.2.2 新增布局"></a>4.2.2 新增布局</h3><blockquote><p>在脚手架中我们通过嵌套路由来实现布局模板。<code>router.config.js</code> 是一个数组，其中第一级数据就是我们的布局，如果你需要新增布局可以在直接增加一个新的一级数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">   <span class="comment">// user</span></span><br><span class="line">   &#123;</span><br><span class="line">    path: <span class="string">'/user'</span>,</span><br><span class="line">    component: <span class="string">'../layouts/UserLayout'</span>,</span><br><span class="line">    routes:[...]</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// app</span></span><br><span class="line">   &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: <span class="string">'../layouts/BasicLayout'</span>,</span><br><span class="line">    routes:[...]</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// new</span></span><br><span class="line">   &#123;</span><br><span class="line">    path: <span class="string">'/new'</span>,</span><br><span class="line">    component: <span class="string">'../layouts/new_page'</span>,</span><br><span class="line">    routes:[...]</span><br><span class="line">   &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="4-2-3-带参数的路由"><a href="#4-2-3-带参数的路由" class="headerlink" title="4.2.3 带参数的路由"></a>4.2.3 带参数的路由</h3><blockquote><p>脚手架默认支持带参数的路由,但是在菜单中显示带参数的路由并不是个好主意，我们并不会自动的帮你注入一个参数，你可能需要在代码中自行处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    path: <span class="string">'/dashboard/:page'</span>,</span><br><span class="line">    hideInMenu:<span class="literal">true</span>, </span><br><span class="line">    name: <span class="string">'analysis'</span>, </span><br><span class="line">    component: <span class="string">'./Dashboard/Analysis'</span> </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>你可以通过以下代码来跳转到这个路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'umi/router'</span>;</span><br><span class="line"></span><br><span class="line">router.push(<span class="string">'/dashboard/anyParams'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'umi/link'</span>;</span><br><span class="line"></span><br><span class="line">&lt;Link to=<span class="string">"/dashboard/anyParams"</span>&gt;go&lt;<span class="regexp">/Link&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在路由组件中，可以通过<code>this.props.match.params</code> 来获得路由参数</p></blockquote><h1 id="五、新增页面"><a href="#五、新增页面" class="headerlink" title="五、新增页面"></a>五、新增页面</h1><blockquote><p>这里的『页面』指配置了路由，能够通过链接直接访问的模块，要新建一个页面，通常只需要在脚手架的基础上进行简单的配置</p></blockquote><h2 id="5-1-新增-js、less"><a href="#5-1-新增-js、less" class="headerlink" title="5.1 新增 js、less"></a>5.1 新增 js、less</h2><blockquote><p>在 <code>src/pages</code> 下新建页面的 <code>js</code> 及 <code>less</code> 文件，如果相关页面有多个，可以新建一个文件夹来放置相关文件</p></blockquote><p><img src="https://gw.alipayobjects.com/zos/rmsportal/hjDyFTVOgRwDzAIHApMO.png" alt=""></p><blockquote><p>样式文件默认使用 CSS Modules，如果需要，你可以在样式文件的头部引入 antd 样式变量文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;~antd/lib/style/themes/default.less&quot;;</span><br></pre></td></tr></table></figure><h2 id="5-2-将文件加入菜单和路由"><a href="#5-2-将文件加入菜单和路由" class="headerlink" title="5.2 将文件加入菜单和路由"></a>5.2 将文件加入菜单和路由</h2><blockquote><p>加入菜单和路由的方式请参照 路由和菜单 - 添加路由/菜单 中的介绍完成。加好后，访问 <code>http://localhost:8000/#/new</code> 就可以看到新增的页面了 <a href="https://pro.ant.design/docs/router-and-nav-cn#%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1/%E8%8F%9C%E5%8D%95" target="_blank" rel="noopener">https://pro.ant.design/docs/router-and-nav-cn#%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1/%E8%8F%9C%E5%8D%95</a></p></blockquote><p><img src="https://gw.alipayobjects.com/zos/rmsportal/xZIqExWKhdnzDBjajnZg.png" alt=""></p><h2 id="5-3-新增-model、service"><a href="#5-3-新增-model、service" class="headerlink" title="5.3 新增 model、service"></a>5.3 新增 model、service</h2><blockquote><p>布局及路由都配置好之后，回到之前新建的 <code>NewPage.js</code>，可以开始写业务代码了！如果需要用到 <code>dva</code> 中的数据流，还需要在 <code>src/models src/services</code> 中建立相应的<code>model</code> 和 service，具体可以参考脚手架内置页面的写法</p></blockquote><h1 id="六、新增业务组件"><a href="#六、新增业务组件" class="headerlink" title="六、新增业务组件"></a>六、新增业务组件</h1><blockquote><p>对于一些可能被多处引用的功能模块，建议提炼成业务组件统一管理。这些组件一般有以下特征：</p></blockquote><ul><li>只负责一块相对独立，稳定的功能；</li><li>没有单独的路由配置；</li><li>可能是纯静态的，也可能包含自己的 state，但不涉及 dva 的数据流，仅受父组件（通常是一个页面）传递的参数控制。</li></ul><p><strong>新建文件</strong></p><blockquote><p>在 <code>src/components</code> 下新建一个以组件名命名的文件夹，注意首字母大写，命名尽量体现组件的功能，这里就叫 <code>ImageWrapper</code>。在此文件夹下新增 js 文件及样式文件（如果需要），命名为 <code>index.js</code>和 <code>index.less</code></p></blockquote><ul><li>在使用组件时，默认会在 <code>index.js</code> 中寻找 <code>export</code> 的对象，如果你的组件比较复杂，可以分为多个文件，最后在 <code>index.js</code>中统一 <code>export</code>，就像这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainComponent.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; ... &#125;) =&gt; (...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SubComponent1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; ... &#125;) =&gt; (...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SubComponent2.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; ... &#125;) =&gt; (...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> MainComponent <span class="keyword">from</span> <span class="string">'./MainComponent'</span>;</span><br><span class="line"><span class="keyword">import</span> SubComponent1 <span class="keyword">from</span> <span class="string">'./SubComponent1'</span>;</span><br><span class="line"><span class="keyword">import</span> SubComponent2 <span class="keyword">from</span> <span class="string">'./SubComponent2'</span>;</span><br><span class="line"></span><br><span class="line">MainComponent.SubComponent1 = SubComponent1;</span><br><span class="line">MainComponent.SubComponent2 = SubComponent2;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MainComponent;</span><br></pre></td></tr></table></figure><p>你的代码大概是这个样子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.less'</span>;    <span class="comment">// 按照 CSS Modules 的方式引入样式文件。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; src, desc, style &#125;) =&gt; (</span><br><span class="line">  &lt;div style=&#123;style&#125; className=&#123;styles.imageWrapper&#125;&gt;</span><br><span class="line">    &lt;img className=&#123;styles.img&#125; src=&#123;src&#125; alt=&#123;desc&#125; /&gt;</span><br><span class="line">    &#123;desc &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.desc&#125;</span>&gt;</span>&#123;desc&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// index.less</span><br><span class="line"><span class="selector-class">.imageWrapper</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f2f4f5</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="built_in">calc</span>(100% - 32px);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2.4em</span> <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(143, 168, 191, 0.35);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><blockquote><p>在要使用这个组件的地方，按照组件定义的 <code>API</code> 传入参数，直接使用就好，不过别忘了先引入</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ImageWrapper <span class="keyword">from</span> <span class="string">'@/components/ImageWrapper'</span>;  <span class="comment">// @ 表示相对于源文件根目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;ImageWrapper</span><br><span class="line">    src=<span class="string">"https://os.alipayobjects.com/rmsportal/mgesTPFxodmIwpi.png"</span></span><br><span class="line">    desc=<span class="string">"示意图"</span></span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="七、样式"><a href="#七、样式" class="headerlink" title="七、样式"></a>七、样式</h1><p><strong>less</strong></p><blockquote><p>Ant Design Pro 默认使用 less 作为样式语言</p></blockquote><p><strong>CSS Modules</strong></p><p>在样式开发过程中，有两个问题比较突出</p><ul><li>全局污染 —— CSS 文件中的选择器是全局生效的，不同文件中的同名选择器，根据 build 后生成文件中的先后顺序，后面的样式会将前面的覆盖；</li><li>选择器复杂 —— 为了避免上面的问题，我们在编写样式的时候不得不小心翼翼，类名里会带上限制范围的标识，变得越来越长，多人开发时还很容易导致命名风格混乱，一个元素上使用的选择器个数也可能越来越多。</li></ul><blockquote><p>为了解决上述问题，我们的脚手架默认使用 CSS Modules 模块化方案，先来看下在这种模式下怎么写样式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// example.js</span><br><span class="line">import styles from &apos;./example.less&apos;;</span><br><span class="line"></span><br><span class="line">export default (&#123; title &#125;) =&gt; &lt;div className=&#123;styles.title&#125;&gt;&#123;title&#125;&lt;/div&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// example.less</span><br><span class="line">.title &#123;</span><br><span class="line">  color: @heading-color;</span><br><span class="line">  font-weight: 600;</span><br><span class="line">  margin-bottom: 16px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用 less 写样式好像没什么改变，只是类名比较简单（实际项目中也是这样），js 文件的改变就是在设置 <code>className</code> 时，用一个对象属性取代了原来的字符串，属性名跟 less 文件中对应的类名相同，对象从 less 文件中引入。</li><li>在上面的样式文件中，<code>.title</code> 只会在本文件生效，你可以在其他任意文件中使用同名选择器，也不会对这里造成影响。不过有的时候，我们就是想要一个全局生效的样式呢？可以使用 <code>:global</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// example.less</span><br><span class="line">.title &#123;</span><br><span class="line">  color: @heading-color;</span><br><span class="line">  font-weight: 600;</span><br><span class="line">  margin-bottom: 16px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 定义全局样式 */</span><br><span class="line">:global(.text) &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 定义多个全局样式 */</span><br><span class="line">:global &#123;</span><br><span class="line">  .footer &#123;</span><br><span class="line">    color: #ccc;</span><br><span class="line">  &#125;</span><br><span class="line">  .sider &#123;</span><br><span class="line">    background: #ebebeb;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CSS Modules 的基本原理很简单，就是对每个类名（非 <code>:global</code> 声明的）按照一定规则进行转换，保证它的唯一性。如果在浏览器里查看这个示例的 dom 结构，你会发现实际渲染出来是这样的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;title___3TqAx&quot;&gt;title&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>类名被自动添加了一个 <code>hash</code> 值，这保证了它的唯一性</li></ul><p><strong>样式文件类别</strong></p><blockquote><p>在一个项目中，样式文件根据功能不同，可以划分为不同的类别</p></blockquote><ul><li><code>src/index.less#</code></li></ul><blockquote><p>全局样式文件，在这里你可以进行一些通用设置，比如脚手架中自带的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">html, body, :global(#root) &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  text-rendering: optimizeLegibility;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// temporary font size patch</span><br><span class="line">:global(.ant-tag) &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>src/utils/utils.less#</code></li></ul><blockquote><p>这里可以放置一些工具函数供调用，比如清除浮动 <code>.clearfix</code></p></blockquote><ul><li>模块样式</li></ul><blockquote><p>针对某个模块/页面生效的文件</p></blockquote><h1 id="八、和服务端进行交互"><a href="#八、和服务端进行交互" class="headerlink" title="八、和服务端进行交互"></a>八、和服务端进行交互</h1><p><strong>前端请求流程</strong></p><blockquote><p>在 Ant Design Pro 中，一个完整的前端 UI 交互到服务端处理流程是这样的</p></blockquote><ul><li>UI 组件交互操作；</li><li>调用 <code>model</code> 的 <code>effect</code>；</li><li>调用统一管理的 <code>service</code> 请求函数；</li><li>使用封装的 <code>request.js</code>发送请求；</li><li>获取服务端返回；</li><li>然后调用<code>reducer</code>改变 <code>state</code>；</li><li>更新 <code>model</code></li></ul><blockquote><p>为了方便管理维护，统一的请求处理都放在 services 文件夹中，并且一般按照 model 维度进行拆分文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services/</span><br><span class="line">  user.js</span><br><span class="line">  api.js</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><blockquote><p>其中，<code>utils/request.js</code>是基于 <code>fetch</code> 的封装，便于统一处理 POST，GET 等请求参数，请求头，以及错误提示信息等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// services/user.js</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../utils/request'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'/api/users'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">queryCurrent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'/api/currentUser'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// models/user.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; queryCurrent &#125; <span class="keyword">from</span> <span class="string">'../services/user'</span>;</span><br><span class="line">...</span><br><span class="line">effects: &#123;</span><br><span class="line">  *fetch(&#123; payload &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">yield</span> call(queryUsers);</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>处理异步请求</strong></p><blockquote><p>在处理复杂的异步请求的时候，很容易让逻辑混乱，陷入嵌套陷阱，所以 <code>Ant Design Pro</code> 的底层基础框架 <code>dva</code>使用 <code>effect</code> 的方式来管理同步化异步请求</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">effects: &#123;</span><br><span class="line">  *fetch(&#123; payload &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;</span><br><span class="line">      type: <span class="string">'changeLoading'</span>,</span><br><span class="line">      payload: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 异步请求 1</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">yield</span> call(queryFakeList, payload);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;</span><br><span class="line">      type: <span class="string">'save'</span>,</span><br><span class="line">      payload: response,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 异步请求 2</span></span><br><span class="line">    <span class="keyword">const</span> response2 = <span class="keyword">yield</span> call(queryFakeList2, payload);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;</span><br><span class="line">      type: <span class="string">'save2'</span>,</span><br><span class="line">      payload: response2,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;</span><br><span class="line">      type: <span class="string">'changeLoading'</span>,</span><br><span class="line">      payload: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="九、引入外部模块"><a href="#九、引入外部模块" class="headerlink" title="九、引入外部模块"></a>九、引入外部模块</h1><blockquote><p>除了<code>antd</code>组件以及脚手架内置的业务组件，有时我们还需要引入其他外部模块，这里以引入富文本组件 <code>react-quill</code> 为例进行介绍</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install react-quill --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button, notification, Card &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactQuill <span class="keyword">from</span> <span class="string">'react-quill'</span>; </span><br><span class="line"><span class="keyword">import</span> <span class="string">'react-quill/dist/quill.snow.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NewPage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    value: <span class="string">'test'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleChange = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      value,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  prompt = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    notification.open(&#123;</span><br><span class="line">      message: <span class="string">'We got value:'</span>,</span><br><span class="line">      description: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;</span> <span class="attr">__html:</span> <span class="attr">this.state.value</span> &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Card title=<span class="string">"富文本编辑器"</span>&gt;</span><br><span class="line">        &lt;ReactQuill value=&#123;<span class="keyword">this</span>.state.value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">        &lt;Button style=&#123;&#123; <span class="attr">marginTop</span>: <span class="number">16</span> &#125;&#125; onClick=&#123;<span class="keyword">this</span>.prompt&#125;&gt;Prompt&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Card&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十、图表"><a href="#十、图表" class="headerlink" title="十、图表"></a>十、图表</h1><blockquote><p>Ant Design Pro 提供了由设计师精心设计抽象的图表类型，是在 <code>BizCharts</code> 图表库基础上的二次封装，同时提供了业务中常用的图表套件，可以单独使用，也可以组合起来实现复杂的展示效果</p></blockquote><blockquote><p>图表组件 <a href="https://pro.ant.design/components/Charts-cn/" target="_blank" rel="noopener">https://pro.ant.design/components/Charts-cn/</a></p></blockquote><p><strong>使用 Ant Design Pro 的图表</strong></p><p>Charts 图表套件是在 <code>components/Charts</code> 包中，引用到项目就像使用其它组件一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ChartCard, MiniBar &#125; <span class="keyword">from</span> <span class="string">'@/components/Charts'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tooltip, Icon &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitData = [</span><br><span class="line">  &#123;</span><br><span class="line">    x: <span class="string">"2017-09-01"</span>,</span><br><span class="line">    y: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    x: <span class="string">"2017-09-02"</span>,</span><br><span class="line">    y: <span class="number">120</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    x: <span class="string">"2017-09-03"</span>,</span><br><span class="line">    y: <span class="number">88</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    x: <span class="string">"2017-09-04"</span>,</span><br><span class="line">    y: <span class="number">65</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;ChartCard</span><br><span class="line">    title=<span class="string">"支付笔数"</span></span><br><span class="line">    action=&#123;</span><br><span class="line">      &lt;Tooltip title=<span class="string">"支付笔数反应交易质量"</span>&gt;</span><br><span class="line">        &lt;Icon type=<span class="string">"exclamation-circle-o"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Tooltip&gt;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    total="6,500"</span></span><br><span class="line"><span class="regexp">    contentHeight=&#123;46&#125;</span></span><br><span class="line"><span class="regexp">  &gt;</span></span><br><span class="line"><span class="regexp">    &lt;MiniBar height=&#123;46&#125; data=&#123;visitData&#125; /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/ChartCard&gt;,</span></span><br><span class="line"><span class="regexp">  mountNode</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/alibaba/BizCharts" target="_blank" rel="noopener">https://github.com/alibaba/BizCharts</a></p><p><strong>使用 BizCharts 绘制图表</strong></p><blockquote><p>如果 <code>Ant Design Pro</code> 不能满足你的业务需求，可以直接使用 <code>BizCharts</code> 封装自己的图表组件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bizcharts --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Chart, Axis, Tooltip, Geom &#125; <span class="keyword">from</span> <span class="string">'bizcharts'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [...];</span><br><span class="line"></span><br><span class="line">&lt;Chart height=&#123;<span class="number">400</span>&#125; data=&#123;data&#125; forceFit&gt;</span><br><span class="line">  &lt;Axis name=<span class="string">"month"</span> /&gt;</span><br><span class="line">  &lt;Axis name=<span class="string">"temperature"</span> label=&#123;&#123; <span class="attr">formatter</span>: <span class="function"><span class="params">val</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;val&#125;</span>°C`</span> &#125;&#125; /&gt;</span><br><span class="line">  &lt;Tooltip crosshairs=&#123;&#123; <span class="attr">type</span> : <span class="string">"y"</span> &#125;&#125; /&gt;</span><br><span class="line">  &lt;Geom type=<span class="string">"line"</span> position=<span class="string">"month*temperature"</span> size=&#123;<span class="number">2</span>&#125; color=&#123;<span class="string">'city'</span>&#125; /&gt;</span><br><span class="line">  &lt;Geom type=<span class="string">'point'</span> position=<span class="string">"month*temperature"</span> size=&#123;<span class="number">4</span>&#125; color=&#123;<span class="string">'city'</span>&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Chart&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十一、业务图标"><a href="#十一、业务图标" class="headerlink" title="十一、业务图标"></a>十一、业务图标</h1><blockquote><p>通常情况下，你可以通过 <code>Ant Design</code> 提供的 <code>&lt;Icon /&gt;</code> 图标组件来使用 Ant Design 官方图标。基本使用方式如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Icon type=&quot;heart&quot; style=&#123;&#123; fontSize: &apos;16px&apos;, color: &apos;hotpink&apos; &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果你没有在 <code>Ant Design</code> 官方图标中找到需要的图标，可以到 <code>iconfont.cn</code> 上采集并生成自己的业务图标库，再进行使用</p></blockquote><p><strong>生成图标库代码</strong></p><ul><li>首先，搜索并找到你需要的图标，将它采集到你的购物车里，在购物车里，你可以将选中的图标添加到项目中（没有的话，新建一个），后续生成的资源/代码都是以项目为维度的。</li><li>如果你已经有了设计稿，只是需要生成相关代码，可以上传你的图标后，再进行上面的操作</li></ul><p><img src="https://gw.alipayobjects.com/zos/rmsportal/jJQYzRyqVFBBamUOppXH.png" alt=""></p><blockquote><p>来到刚才选中的项目页，点击『生成代码』的链接，会在下方生成不同引入方式的代码，下面会分别介绍</p></blockquote><p><img src="https://gw.alipayobjects.com/zos/rmsportal/DbDSgiRukSANKWyhULir.png" alt=""></p><p><strong>引入</strong></p><ul><li>有三种引入方式供你选择：<code>SVG Symbol</code>、<code>Unicode</code> 及 <code>Font class</code>。我们推荐在现代浏览器下使用 <code>SVG Symbol</code>方式引入。</li></ul><blockquote><p>SVG 符号引入是现代浏览器未来主流的图标引入方式。其方法是预先加载符号，在合适的地方引入并渲染为矢量图形。有如下特点：</p></blockquote><ul><li>支持多色图标，不再受到单色图标的限制</li><li>通过一些技巧，支持像字体那样，通过 <code>font-size</code>、<code>color</code> 来调整样式</li><li>支持IE 9+ 及现代浏览器</li></ul><blockquote><p>切换到 <code>Symbol</code> 页签，复制项目生成的地址代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//at.alicdn.com/t/font_405362_lyhvoky9rc7ynwmi.js</span><br></pre></td></tr></table></figure><p>加入图标样式代码，如果没有特殊的要求，你可以直接复用 Ant Design 图标的样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.icon &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  vertical-align: -.125em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挑选相应图标并获取类名，应用于页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">    &lt;use xlink:href=&quot;#icon-ali-pay&quot;&gt;&lt;/use&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p>你也可以通过使用 Ant Design 图标组件提供的 <code>Icon.createFromIconfontCN({...})</code> 方法来更加方便地使用图标，使用方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Icon &#125; from &apos;antd&apos;;</span><br><span class="line"></span><br><span class="line">const IconFont = Icon.createFromIconfontCN(&#123;</span><br><span class="line">  scriptUrl: &apos;//at.alicdn.com/t/font_405362_lyhvoky9rc7ynwmi.js&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default IconFont;</span><br></pre></td></tr></table></figure><p>之后可以像使用 <code>&lt;Icon /&gt;</code> 组件一样方便地使用，支持配置样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;IconFont type=&quot;icon-ali-pay&quot; style=&#123;&#123; fontSize: &apos;16px&apos;, color: &apos;lightblue&apos; &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>了解更多用法 <a href="https://pro.ant.design/docs/biz-icon-cn#%E4%BA%8C%E3%80%81%E5%BC%95%E5%85%A5" target="_blank" rel="noopener">https://pro.ant.design/docs/biz-icon-cn#%E4%BA%8C%E3%80%81%E5%BC%95%E5%85%A5</a></p></blockquote><h1 id="十二、Mock-和联调"><a href="#十二、Mock-和联调" class="headerlink" title="十二、Mock 和联调"></a>十二、Mock 和联调</h1><blockquote><p>Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞</p></blockquote><ul><li>在 <code>Ant Design Pro</code> 中，因为我们的底层框架是 <code>umi</code>，而它自带了代理请求功能，通过代理请求就能够轻松处理数据模拟的功能</li></ul><p><strong>使用 umi 的 mock 功能</strong></p><blockquote><p>umi 里约定 mock 文件夹下的文件即 mock 文件，文件导出接口定义，支持基于 require 动态分析的实时刷新，支持 ES6 语法，以及友好的出错提示</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 支持值为 Object 和 Array</span></span><br><span class="line">  <span class="string">'GET /api/users'</span>: &#123; <span class="attr">users</span>: [<span class="number">1</span>, <span class="number">2</span>] &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// GET POST 可省略</span></span><br><span class="line">  <span class="string">'/api/users/1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 支持自定义函数，API 参考 express@4</span></span><br><span class="line">  <span class="string">'POST /api/users/create'</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.end(<span class="string">'OK'</span>); &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>当客户端（浏览器）发送请求，如：<code>GET /api/users</code>，那么本地启动的 umi dev 会跟此配置文件匹配请求路径以及方法，如果匹配到了，就会将请求通过配置处理，就可以像样例一样，你可以直接返回数据，也可以通过函数处理以及重定向到另一个服务器</p></blockquote><p>了解更多 <a href="https://pro.ant.design/docs/mock-api-cn#%E4%BD%BF%E7%94%A8-umi-%E7%9A%84-mock-%E5%8A%9F%E8%83%BD" target="_blank" rel="noopener">https://pro.ant.design/docs/mock-api-cn#%E4%BD%BF%E7%94%A8-umi-%E7%9A%84-mock-%E5%8A%9F%E8%83%BD</a></p><h1 id="十三、主题定制"><a href="#十三、主题定制" class="headerlink" title="十三、主题定制"></a>十三、主题定制</h1><blockquote><p>我们基于 Ant Design React 进行开发，完全支持官方提供的 less 变量定制功能. 你可以在脚手架目录中找到 <code>config/config.js</code> 代码类似这样</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">theme: &#123;</span><br><span class="line">  &apos;font-size-base&apos;: &apos;14px&apos;,</span><br><span class="line">  &apos;badge-font-size&apos;: &apos;12px&apos;,</span><br><span class="line">  &apos;btn-font-size-lg&apos;: &apos;@font-size-base&apos;,</span><br><span class="line">  &apos;menu-dark-bg&apos;: &apos;#00182E&apos;,</span><br><span class="line">  &apos;menu-dark-submenu-bg&apos;: &apos;#000B14&apos;,</span><br><span class="line">  &apos;layout-sider-background&apos;: &apos;#00182E&apos;,</span><br><span class="line">  &apos;layout-body-background&apos;: &apos;#f0f2f5&apos;,</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="十四、权限管理"><a href="#十四、权限管理" class="headerlink" title="十四、权限管理"></a>十四、权限管理</h1><blockquote><p>只需要在配置菜单的时候配置上准入身份，在登录成功以后获取到登陆者身份以后更新登录人身份参数即可</p></blockquote><h2 id="权限组件-Authorized"><a href="#权限组件-Authorized" class="headerlink" title="权限组件 Authorized"></a>权限组件 Authorized</h2><blockquote><p>这是脚手架权限管理的基础，基本思路是通过比对当前权限与准入权限，决定展示正常渲染内容还是异常内容</p></blockquote><p><strong>控制菜单和路由显示</strong></p><blockquote><p>如需对某些页面进行权限控制，只须在路由配置文件 <code>router.config.js</code> 中设置 <code>authority</code> 属性即可，代表该路由的准入权限，pro 的路由系统中会默认包裹 <code>Authorized</code> 进行判断处理。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/form'</span>,</span><br><span class="line">  icon: <span class="string">'form'</span>,</span><br><span class="line">  name: <span class="string">'form'</span>,</span><br><span class="line">  routes:[&#123;</span><br><span class="line">    path: <span class="string">'/form/basic-form'</span>,</span><br><span class="line">    name: <span class="string">'basicform'</span>,</span><br><span class="line">    component: <span class="string">'./Forms/BasicForm'</span>,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/form/step-form'</span>,</span><br><span class="line">    name: <span class="string">'stepform'</span>,</span><br><span class="line">    component: <span class="string">'./Forms/StepForm'</span>,</span><br><span class="line">    authority: [<span class="string">'guest'</span>], <span class="comment">// 配置准入权限，可以配置多个角色</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/form/advanced-form'</span>,</span><br><span class="line">    name: <span class="string">'advancedform'</span>,</span><br><span class="line">    component: <span class="string">'./Forms/AdvancedForm'</span>,</span><br><span class="line">    authority: [<span class="string">'admin'</span>], <span class="comment">// 配置准入权限，可以配置多个角色</span></span><br><span class="line">  &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制页面元素显示"><a href="#控制页面元素显示" class="headerlink" title="控制页面元素显示"></a>控制页面元素显示</h2><blockquote><p>使用 <code>Authorized</code> 或<code>Authorized.Secured</code> 可以很方便地控制元素/组件的渲染。<a href="https://pro.ant.design/components/Authorized#Authorized.Secured" target="_blank" rel="noopener">https://pro.ant.design/components/Authorized#Authorized.Secured</a></p></blockquote><h2 id="demo关于权限简介"><a href="#demo关于权限简介" class="headerlink" title="demo关于权限简介"></a>demo关于权限简介</h2><ul><li>用邮箱自己注册账户（注册后可以登录但是没有任何权限）<code>guest</code></li><li>联系管理员分配权限（分配后可以查看有权限的页面）</li><li>每次登录后获取最新的权限身份（如：<code>admin</code>，<code>user</code>，<code>guest</code>）</li></ul><blockquote><p>在<code>src/router.js</code>中会发现如下代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AuthorizedRoute</span></span></span><br><span class="line"><span class="tag">    <span class="attr">path</span>=<span class="string">"/"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">render</span>=<span class="string">&#123;props</span> =&gt;</span> <span class="tag">&lt;<span class="name">BasicLayout</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>&#125;</span><br><span class="line">    authority=&#123;['admin', 'user', 'guest']&#125;</span><br><span class="line">    redirectPath="/user/login"</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>authority</code>对象就是准入身份的数组，表示只有这些身份的人可以登录，我们在配置的时候一定不要忘记在这更新我们新增的身份</p></blockquote><ul><li>然后就是<code>menu.js</code>,如下，展示了我们在配置菜单的时候怎么配身份</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menuData = [&#123;</span><br><span class="line">  name: <span class="string">'题库管理'</span>,</span><br><span class="line">  path: <span class="string">'question'</span>,</span><br><span class="line">  icon: <span class="string">'warning'</span>,</span><br><span class="line">  authority: [<span class="string">'admin'</span>, <span class="string">'user'</span>],</span><br><span class="line">  children: [&#123;</span><br><span class="line">    name: <span class="string">'题库列表'</span>,</span><br><span class="line">    path: <span class="string">'list'</span>,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'编辑题目'</span>,</span><br><span class="line">    path: <span class="string">'create-question'</span>,</span><br><span class="line">    hideInMenu: <span class="literal">true</span>,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'科目管理'</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  name: <span class="string">'账号管理'</span>,</span><br><span class="line">  icon: <span class="string">'warning'</span>,</span><br><span class="line">  path: <span class="string">'account'</span>,</span><br><span class="line">  children: [&#123;</span><br><span class="line">    name: <span class="string">'账号列表'</span>,</span><br><span class="line">    path: <span class="string">'list'</span>,</span><br><span class="line">    authority: <span class="string">'admin'</span>,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'建设中'</span>,</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    authority: [<span class="string">'admin'</span>, <span class="string">'user'</span>],</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>登录成功以后怎么获取权限了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">effects：&#123;</span><br><span class="line">* login(&#123;payload&#125;, &#123;call, put&#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">yield</span> call(login, payload);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123;</span><br><span class="line">        type: <span class="string">'changeLoginStatus'</span>,</span><br><span class="line">        payload: response,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 登录成功以后更新权限，跳转页面</span></span><br><span class="line">      <span class="keyword">if</span> (response &amp;&amp; response.code === <span class="string">'0000'</span>) &#123;</span><br><span class="line">        reloadAuthorized();</span><br><span class="line">        <span class="keyword">yield</span> put(routerRedux.push(<span class="string">'/'</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;，</span><br><span class="line">reducers: &#123;</span><br><span class="line">    changeLoginStatus(state, &#123;payload&#125;) &#123;</span><br><span class="line">      <span class="keyword">let</span> _status = <span class="string">"ok"</span>;</span><br><span class="line">      <span class="keyword">let</span> _user = <span class="string">"admin"</span>;</span><br><span class="line">      setToken(<span class="string">"token"</span>);</span><br><span class="line">      setAuthority(_user);<span class="comment">//设置权限</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        status: _status,</span><br><span class="line">        type: <span class="string">'account'</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>我们看看<code>setAuthority</code>、<code>reloadAuthorized</code>这两个方法都做了什么事儿</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置身份</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setAuthority</span>(<span class="params">authority</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> localStorage.setItem(<span class="string">'antd-pro-authority'</span>, authority);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取身份</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthority</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> localStorage.getItem(<span class="string">'antd-pro-authority'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如此而且，只是把新的身份值存在<code>localStorage</code>里边，注意<code>getAuthority</code>，下边会用到</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RenderAuthorized <span class="keyword">from</span> <span class="string">'../components/Authorized'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getAuthority &#125; <span class="keyword">from</span> <span class="string">'./authority'</span>;</span><br><span class="line"><span class="keyword">let</span> Authorized = RenderAuthorized(getAuthority());</span><br><span class="line"><span class="keyword">const</span> reloadAuthorized = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  Authorized = RenderAuthorized(getAuthority());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; reloadAuthorized &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Authorized;</span><br><span class="line">RenderAuthorized: <span class="function">(<span class="params">currentAuthority: string | (</span>) =&gt;</span> string) =&gt; Authorized</span><br></pre></td></tr></table></figure><blockquote><p>权限组件默认 <code>export RenderAuthorized</code> 函数，它接收当前权限作为参数，返回一个权限对象，该对象提供以下几种使用方式</p></blockquote><p><strong>Authorized</strong></p><blockquote><p>最基础的权限控制</p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>children</code></td><td>正常渲染的元素，权限判断通过时展示</td></tr><tr><td><code>authority</code></td><td>准入权限/权限判断</td></tr><tr><td><code>noMatch</code></td><td>权限异常渲染元素，权限判断不通过时展示</td></tr></tbody></table><p><strong>Authorized.AuthorizedRoute</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>authority</code></td><td>准入权限/权限判断</td></tr><tr><td><code>redirectPath</code></td><td>权限异常时重定向的页面路由</td></tr></tbody></table><p><strong>Authorized.Secured</strong></p><blockquote><p>注解方式，<a href="mailto:`@Authorized.Secured" target="_blank" rel="noopener">`@Authorized.Secured</a>(authority, error)`</p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>authority</code></td><td>准入权限/权限判断</td></tr><tr><td><code>error</code></td><td>权限异常时渲染元素</td></tr></tbody></table><p><strong>Authorized.check</strong></p><blockquote><p>函数形式的 <code>Authorized</code>，用于某些不能被 <code>HOC</code> 包裹的组件。 <code>Authorized.check(authority, target, Exception)</code></p></blockquote><ul><li>注意：传入一个 <code>Promise</code> 时，无论正确还是错误返回的都是一个 <code>ReactClass</code></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>authority</code></td><td>准入权限/权限判断</td></tr><tr><td><code>target</code></td><td>权限判断通过时渲染的元素</td></tr><tr><td><code>Exception</code></td><td>权限异常时渲染元素</td></tr></tbody></table><h1 id="十五、构建和发布"><a href="#十五、构建和发布" class="headerlink" title="十五、构建和发布"></a>十五、构建和发布</h1><p><strong>构建</strong></p><blockquote><p>当项目开发完毕，只需要运行一行命令就可以打包你的应用：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><blockquote><p>由于 Ant Design Pro 使用的工具 Umi 已经将复杂的流程封装完毕，构建打包文件只需要一个命令 umi build，构建打包成功之后，会在根目录生成 dist 文件夹，里面就是构建打包好的文件，通常是 <em>.js、</em>.css、index.html 等静态文件</p></blockquote><p><strong>分析构建文件体积</strong></p><blockquote><p>如果你的构建文件很大，你可以通过 analyze 命令构建并分析依赖模块的体积分布，从而优化你的代码。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run analyze</span><br></pre></td></tr></table></figure><p><strong>发布</strong></p><blockquote><p>对于发布来讲，只需要将最终生成的静态文件，也就是通常情况下 dist 文件夹的静态文件发布到你的 cdn 或者静态服务器即可，需要注意的是其中的 <code>index.html</code> 通常会是你后台服务的入口页面，在确定了 js 和 css 的静态之后可能需要改变页面的引入路径</p></blockquote><p><strong>前端路由与服务端的结合</strong></p><blockquote><p>Ant Design Pro 使用的 Umi 支持两种路由方式：<code>browserHistory</code> 和 <code>hashHistory</code>。</p></blockquote><ul><li>可以在 <code>config/config.js</code> 中进行配置选择用哪个方式：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  history: <span class="string">'hash'</span>, <span class="comment">// 默认是 browser</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十六、一些问题"><a href="#十六、一些问题" class="headerlink" title="十六、一些问题"></a>十六、一些问题</h1><h2 id="在ant-design-pro中解决跨域办法"><a href="#在ant-design-pro中解决跨域办法" class="headerlink" title="在ant-design-pro中解决跨域办法"></a>在ant-design-pro中解决跨域办法</h2><blockquote><p>需要在配置文件中(<code>.webpackrc</code>)加入如下代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>: &#123;</span><br><span class="line">  <span class="string">"/api"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"http://xxx:xx/"</span>,</span><br><span class="line">    <span class="string">"changeOrigin"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"pathRewrite"</span>: &#123; <span class="string">"^/api"</span> : <span class="string">""</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是此处不是将<code>/api/</code>代理到正式请求<code>/api/</code>中，（例如请求<code>/api/users</code>则会代理到<code>http://xxx:xx/users</code>）<br>如果需要多次代理且需要代理到不同的服务器则可以在配置文件中进行如下配置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>: &#123;</span><br><span class="line">      <span class="string">"/test"</span>: &#123;</span><br><span class="line">        <span class="string">"target"</span>: <span class="string">"http://xxx:xx/"</span>,</span><br><span class="line">        <span class="string">"changeOrigin"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"pathRewrite"</span>: &#123; <span class="string">"^/test"</span> : <span class="string">""</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"/cross"</span>: &#123;</span><br><span class="line">        <span class="string">"target"</span>: <span class="string">"http://jsonplaceholder.typicode.com"</span>,</span><br><span class="line">        <span class="string">"changeOrigin"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"pathRewrite"</span>: &#123;<span class="string">"^/cross"</span>: <span class="string">""</span>&#125;</span><br><span class="line">      &#125; <span class="comment">// 此处有一点需要注意，不能在最后一个代理对象后面加逗号，否则会报错！！！</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="在model中怎么同时发起多次请求"><a href="#在model中怎么同时发起多次请求" class="headerlink" title="在model中怎么同时发起多次请求"></a>在model中怎么同时发起多次请求</h2><blockquote><p>因为<code>yield</code>将异步请求转为同步请求了，所以请求会按照同步顺序依次执行，使请求时间延长</p></blockquote><p><strong>错误写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// effects将按顺序执行</span></span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">yield</span> call(fetch, <span class="string">'/users'</span>);</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">yield</span> call(fetch, <span class="string">'/roles'</span>);</span><br></pre></td></tr></table></figure><p><strong>正确写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// effects将会同步执行</span></span><br><span class="line"><span class="keyword">const</span> [response, res] = <span class="keyword">yield</span> [</span><br><span class="line">  call(fetch, <span class="string">'/users'</span>),</span><br><span class="line">  call(fetch, <span class="string">'/roles'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-ant-pro系统特性&quot;&gt;&lt;a href=&quot;#1-1-ant-pro系统特性&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Dva" scheme="http://blog.poetries.top/tags/Dva/"/>
    
      <category term="Umi" scheme="http://blog.poetries.top/tags/Umi/"/>
    
  </entry>
  
  <entry>
    <title>使用umi改进dva项目开发</title>
    <link href="http://blog.poetries.top/2018/09/07/umi-dva/"/>
    <id>http://blog.poetries.top/2018/09/07/umi-dva/</id>
    <published>2018-09-07T12:10:23.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Umi简介"><a href="#一、Umi简介" class="headerlink" title="一、Umi简介"></a>一、Umi简介</h1><blockquote><p>一个可插拔的企业级 <code>react</code> 应用框架。<code>umi</code> 以路由为基础的，以及各种进阶的路由功能，并以此进行功能扩展，比如支持路由级的按需加载。然后配以完善的插件体系，覆盖从源码到构建产物的每个生命周期</p></blockquote><h2 id="1-1-特性"><a href="#1-1-特性" class="headerlink" title="1.1 特性"></a>1.1 特性</h2><ul><li>开箱即用，内置 <code>react</code>、<code>react-router</code> 等</li><li>支持配置的路由方式</li><li>完善的插件体系，覆盖从源码到构建产物的每个生命周期</li><li>高性能，通过插件支持 <code>PWA</code>、以路由为单元的 <code>code splitting</code> 等</li><li>支持静态页面导出，适配各种环境，比如中台业务、无线业务、egg、支付宝钱包、云凤蝶等</li><li>开发启动快，支持一键开启 <code>dll</code> 和 <code>hard-source-webpack-plugin</code> 等</li><li>一键兼容到 <code>IE9</code>，基于 <code>umi-plugin-polyfills</code></li><li>完善的 <code>TypeScript</code> 支持，包括 <code>d.ts</code>定义和 <code>umi test</code></li><li>与 <code>dva</code> 数据流的深入融合，支持 <code>duck directory</code>、<code>model</code> 的自动加载、<code>code splitting</code>等等</li></ul><h2 id="1-2-架构"><a href="#1-2-架构" class="headerlink" title="1.2 架构"></a>1.2 架构</h2><p><img src="https://gw.alipayobjects.com/zos/rmsportal/zvfEXesXdgTzWYZCuHLe.png" alt=""></p><h2 id="1-3-和-dva、roadhog关系"><a href="#1-3-和-dva、roadhog关系" class="headerlink" title="1.3 和 dva、roadhog关系"></a>1.3 和 dva、roadhog关系</h2><ul><li><code>roadhog</code> 是基于 <code>webpack</code> 的封装工具，目的是简化 <code>webpack</code> 的配置<br>umi 可以简单地理解为 <code>roadhog + 路由</code>，思路类似 <code>next.js/nuxt.js</code>，辅以一套插件机制，目的是通过框架的方式简化 <code>React</code>开发</li><li><code>dva</code> 目前是纯粹的数据流，和 <code>umi</code> 以及 <code>roadhog</code> 之间并没有相互的依赖关系，可以分开使用也可以一起使用</li></ul><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir myapp &amp;&amp; cd myapp</span><br><span class="line">$ yarn create umi</span><br></pre></td></tr></table></figure><p><img src="https://gw.alipayobjects.com/zos/rmsportal/mlEDcowMOSeXwLoukayR.png" alt=""></p><blockquote><p>确定后，会根据你的选择自动创建好目录和文件</p></blockquote><p><img src="https://gw.alipayobjects.com/zos/rmsportal/ppRAiFpnZbpwDDuoFdPh.png" alt=""></p><h1 id="三、目录结构"><a href="#三、目录结构" class="headerlink" title="三、目录结构"></a>三、目录结构</h1><blockquote><p><code>dva</code> 项目之前通常都是这种扁平的组织方式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ models</span><br><span class="line">  - global.js</span><br><span class="line">  - a1.js</span><br><span class="line">  - a2.js</span><br><span class="line">  - b.js</span><br><span class="line">+ services</span><br><span class="line">  - a.js</span><br><span class="line">  - b.js</span><br><span class="line">+ routes</span><br><span class="line">  - PageA.js</span><br><span class="line">  - PageB.js</span><br></pre></td></tr></table></figure><blockquote><p>用了 <code>umi</code> 后，可以按页面维度进行组织</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+ models/global.js</span><br><span class="line">+ pages</span><br><span class="line">  + a</span><br><span class="line">    - index.js</span><br><span class="line">    + models</span><br><span class="line">      - a1.js</span><br><span class="line">      - a2.js</span><br><span class="line">    + services</span><br><span class="line">      - a.js</span><br><span class="line">  + b</span><br><span class="line">    - index.js</span><br><span class="line">    - model.js</span><br><span class="line">    - service.js</span><br></pre></td></tr></table></figure><blockquote><p>好处是更加结构更加清晰了，减少耦合，一删全删，方便 copy 和共享</p></blockquote><p><strong>自动注册 models</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+ src</span><br><span class="line">  + models</span><br><span class="line">    - g.js</span><br><span class="line">  + pages</span><br><span class="line">    + a</span><br><span class="line">      + models</span><br><span class="line">        - a.js</span><br><span class="line">        - b.js</span><br><span class="line">        + ss</span><br><span class="line">          - s.js</span><br><span class="line">      - page.js</span><br><span class="line">    + c</span><br><span class="line">      - model.js</span><br><span class="line">      + d</span><br><span class="line">        + models</span><br><span class="line">          - d.js</span><br><span class="line">        - page.js</span><br><span class="line">      - page.js</span><br></pre></td></tr></table></figure><ul><li><code>global model</code> 为 <code>src/models/g.js</code></li><li><code>/a</code> 的 <code>page model</code> 为 <code>src/pages/a/models/{a,b,ss/s}.js</code></li><li><code>/c</code> 的 <code>page model</code> 为 <code>src/pages/c/model.js</code></li><li><code>/c/d</code> 的 <code>page model</code> 为 <code>src/pages/c/model.js</code>, <code>src/pages/c/d/models/d.js</code></li></ul><blockquote><p>一个复杂应用的目录结构如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist/                          <span class="comment">// 默认的 build 输出目录</span></span><br><span class="line">├── mock/                          <span class="comment">// mock 文件所在目录，基于 express</span></span><br><span class="line">├── config/</span><br><span class="line">    ├── config.js                  <span class="comment">// umi 配置，同 .umirc.js，二选一</span></span><br><span class="line">└── src/                           <span class="comment">// 源码目录，可选</span></span><br><span class="line">    ├── layouts/index.js           <span class="comment">// 全局布局</span></span><br><span class="line">    ├── pages/                     <span class="comment">// 页面目录，里面的文件即路由</span></span><br><span class="line">        ├── .umi/                  <span class="comment">// dev 临时目录，需添加到 .gitignore</span></span><br><span class="line">        ├── .umi-production/       <span class="comment">// build 临时目录，会自动删除</span></span><br><span class="line">        ├── <span class="built_in">document</span>.ejs           <span class="comment">// HTML 模板</span></span><br><span class="line">        ├── <span class="number">404.</span>js                 <span class="comment">// 404 页面</span></span><br><span class="line">        ├── page1.js               <span class="comment">// 页面 1，任意命名，导出 react 组件</span></span><br><span class="line">        ├── page1.test.js          <span class="comment">// 用例文件，umi test 会匹配所有 .test.js 和 .e2e.js 结尾的文件</span></span><br><span class="line">        └── page2.js               <span class="comment">// 页面 2，任意命名</span></span><br><span class="line">    ├── global.css                 <span class="comment">// 约定的全局样式文件，自动引入，也可以用 global.less</span></span><br><span class="line">    ├── global.js                  <span class="comment">// 可以在这里加入 polyfill</span></span><br><span class="line">├── .umirc.js                      <span class="comment">// umi 配置，同 config/config.js，二选一</span></span><br><span class="line">├── .env                           <span class="comment">// 环境变量</span></span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><p><strong>1、dist</strong></p><blockquote><p>默认输出路径，可通过配置 <code>outputPath</code> 修改</p></blockquote><p><strong>2、mock</strong></p><blockquote><p>约定 <code>mock</code>目录里所有的 <code>.js</code> 文件会被解析为 <code>mock</code> 文件</p></blockquote><p>比如，新建<code>mock/users.js</code>，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">'/api/users'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后在浏览器里访问 <code>http://localhost:8000/api/users 就可以看到 [&#39;a&#39;, &#39;b&#39;]</code> 了</p></blockquote><p><strong>3、src</strong></p><blockquote><p>约定 src 为源码目录，但是可选，简单项目可以不加 src 这层目录</p></blockquote><p>比如：下面两种目录结构的效果是一致的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ src</span><br><span class="line">  + pages</span><br><span class="line">    - index.js</span><br><span class="line">  + layouts</span><br><span class="line">    - index.js</span><br><span class="line">- .umirc.js</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ pages</span><br><span class="line">  - index.js</span><br><span class="line">+ layouts</span><br><span class="line">  - index.js</span><br><span class="line">- .umirc.js</span><br></pre></td></tr></table></figure><p><strong>4、src/layouts/index.js</strong></p><blockquote><p>全局布局，实际上是在路由外面套了一层</p></blockquote><p>比如，你的路由是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users'</span>, <span class="attr">component</span>: <span class="string">'./pages/users'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果有 <code>layouts/index.js</code>，那么路由则变为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./layouts/index'</span>, <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/users'</span>, <span class="attr">component</span>: <span class="string">'./pages/users'</span> &#125;,</span><br><span class="line">  ] &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>5、src/pages</strong></p><blockquote><p>约定 <code>pages</code> 下所有的 <code>(j|t)sx?</code> 文件即路由</p></blockquote><p><strong>6、src/pages/404.js</strong></p><blockquote><p><code>404</code> 页面。注意开发模式下有内置 umi 提供的 404 提示页面，所以只有显式访问 <code>/404</code> 才能访问到这个页面</p></blockquote><p><strong>7、src/pages/document.ejs</strong></p><blockquote><p>有这个文件时，会覆盖默认的 HTML 模板。需至少包含以下代码，</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>8、src/pages/.umi</strong></p><blockquote><p>这是 <code>umi dev</code> 时生产的临时目录，默认包含 <code>umi.js</code> 和 <code>router.js</code>，有些插件也会在这里生成一些其他临时文件。可以在这里做一些验证，但请不要直接在这里修改代码，<code>umi</code> 重启或者 <code>pages</code> 下的文件修改都会重新生成这个文件夹下的文件</p></blockquote><p><strong>9、src/pages/.umi-production</strong></p><blockquote><p>同 <code>src/pagers/.umi</code>，但是是在 <code>umi build</code>时生成的，会在 <code>umi build</code> 执行完自动删除</p></blockquote><p><strong>10、src/global.(j|t)sx?</strong></p><blockquote><p>在入口文件最前面被自动引入，可以考虑在此加入 <code>polyfill</code></p></blockquote><p><strong>11、src/global.(css|less|sass|scss)</strong></p><blockquote><p>这个文件不走 <code>css modules</code>，自动被引入，可以写一些全局样式，或者做一些样式覆盖</p></blockquote><p><strong>12、.umirc.js 和 config/config.js</strong></p><blockquote><p><code>umi</code> 的配置文件，二选一</p></blockquote><p><strong>13、.env</strong></p><p>环境变量，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CLEAR_CONSOLE=none</span><br><span class="line">BROWSER=none</span><br></pre></td></tr></table></figure><h1 id="四、路由配置"><a href="#四、路由配置" class="headerlink" title="四、路由配置"></a>四、路由配置</h1><h2 id="4-1-约定式路由"><a href="#4-1-约定式路由" class="headerlink" title="4.1 约定式路由"></a>4.1 约定式路由</h2><h3 id="4-1-1-基础路由"><a href="#4-1-1-基础路由" class="headerlink" title="4.1.1 基础路由"></a>4.1.1 基础路由</h3><p>假设 <code>pages</code> 目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ pages/</span><br><span class="line">  + users/</span><br><span class="line">    - index.js</span><br><span class="line">    - list.js</span><br><span class="line">  - index.js</span><br></pre></td></tr></table></figure><p>那么，umi 会自动生成路由配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/list'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/list.js'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="4-1-2-动态路由"><a href="#4-1-2-动态路由" class="headerlink" title="4.1.2 动态路由"></a>4.1.2 动态路由</h3><blockquote><p><code>umi</code> 里约定，带 <code>$</code> 前缀的目录或文件为动态路由。</p></blockquote><p>比如以下目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ pages/</span><br><span class="line">  + $post/</span><br><span class="line">    - index.js</span><br><span class="line">    - comments.js</span><br><span class="line">  + users/</span><br><span class="line">    $id.js</span><br><span class="line">  - index.js</span><br></pre></td></tr></table></figure><p>会生成路由配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/:id'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/$id.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/:post/'</span>, <span class="attr">component</span>: <span class="string">'./pages/$post/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/:post/comments'</span>, <span class="attr">component</span>: <span class="string">'./pages/$post/comments.js'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="4-1-3-可选的动态路由"><a href="#4-1-3-可选的动态路由" class="headerlink" title="4.1.3 可选的动态路由"></a>4.1.3 可选的动态路由</h3><blockquote><p><code>umi</code> 里约定动态路由如果带 <code>$</code> 后缀，则为可选动态路由。</p></blockquote><p>比如以下结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ pages/</span><br><span class="line">  + users/</span><br><span class="line">    - $id$.js</span><br><span class="line">  - index.js</span><br></pre></td></tr></table></figure><p>会生成路由配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>: component: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/:id?'</span>: component: <span class="string">'./pages/users/$id$.js'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="4-1-4-嵌套路由"><a href="#4-1-4-嵌套路由" class="headerlink" title="4.1.4 嵌套路由"></a>4.1.4 嵌套路由</h3><blockquote><p><code>umi</code> 里约定目录下有<code>_layout.js</code> 时会生成嵌套路由，以<code>_layout.js</code> 为该目录的 <code>layout</code> 。</p></blockquote><p>比如以下目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ pages/</span><br><span class="line">  + users/</span><br><span class="line">    - _layout.js</span><br><span class="line">    - $id.js</span><br><span class="line">    - index.js</span><br></pre></td></tr></table></figure><p>会生成路由配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users'</span>: component: <span class="string">'./pages/users/_layout.js'</span></span><br><span class="line">    routes: [</span><br><span class="line">     &#123; <span class="attr">path</span>: <span class="string">'/users/'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/index.js'</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">path</span>: <span class="string">'/users/:id'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/$id.js'</span> &#125;,</span><br><span class="line">   ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="4-1-5-全局-layout"><a href="#4-1-5-全局-layout" class="headerlink" title="4.1.5 全局 layout"></a>4.1.5 全局 layout</h3><blockquote><p>约定 <code>src/layouts/index.js</code> 为全局路由，返回一个 React 组件，通过 <code>props.children</code> 渲染子组件。</p></blockquote><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &#123; props.children &#125;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-6-不同的全局-layout"><a href="#4-1-6-不同的全局-layout" class="headerlink" title="4.1.6 不同的全局 layout"></a>4.1.6 不同的全局 layout</h3><blockquote><p>你可能需要针对不同路由输出不同的全局 <code>layout</code>，<code>umi</code> 不支持这样的配置，但你仍可以在 <code>layouts/index.js</code> 对 <code>location.path</code> 做区分，渲染不同的 <code>layout</code>。</p></blockquote><ul><li>比如想要针对 <code>/login</code> 输出简单布局，</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (props.location.pathname === <span class="string">'/login'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SimpleLayout</span>&gt;</span>&#123; props.children &#125;<span class="tag">&lt;/<span class="name">SimpleLayout</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &#123; props.children &#125;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-7-404-路由"><a href="#4-1-7-404-路由" class="headerlink" title="4.1.7 404 路由"></a>4.1.7 404 路由</h3><blockquote><p>约定 <code>pages/404.js</code> 为 <code>404</code>页面，需返回 <code>React</code> 组件。</p></blockquote><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;I am a customized <span class="number">404</span> page&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：开发模式下，umi 会添加一个默认的 <code>404</code> 页面来辅助开发，但你仍然可通过精确地访问 <code>/404</code>来验证 404 页面。</p></blockquote><h3 id="4-1-8-通过注释扩展路由"><a href="#4-1-8-通过注释扩展路由" class="headerlink" title="4.1.8 通过注释扩展路由"></a>4.1.8 通过注释扩展路由</h3><blockquote><p>约定路由文件的首个注释如果包含 <code>yaml</code>格式的配置，则会被用于扩展路由。</p></blockquote><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ pages/</span><br><span class="line">  - index.js</span><br></pre></td></tr></table></figure><blockquote><p>如果<code>pages/index.js</code> 里包含：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * title: Index Page</span></span><br><span class="line"><span class="comment"> * Routes:</span></span><br><span class="line"><span class="comment"> *   - ./src/routes/a.js</span></span><br><span class="line"><span class="comment"> *   - ./src/routes/b.js</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>则会生成路由配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./index.js'</span>,</span><br><span class="line">    title: <span class="string">'Index Page'</span>,</span><br><span class="line">    Routes: [ <span class="string">'./src/routes/a.js'</span>, <span class="string">'./src/routes/b.js'</span> ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-2-配置式路由"><a href="#4-2-配置式路由" class="headerlink" title="4.2 配置式路由"></a>4.2 配置式路由</h2><blockquote><p>如果你倾向于使用配置式的路由，可以配置 <code>routes</code> ，此配置项存在时则不会对 <code>src/pages</code> 目录做约定式的解析。</p></blockquote><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./a'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/list'</span>, <span class="attr">component</span>: <span class="string">'./b'</span>, <span class="attr">Routes</span>: [<span class="string">'./routes/PrivateRoute.js'</span>] &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/users'</span>, <span class="attr">component</span>: <span class="string">'./users/_layout'</span>,</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/users/detail'</span>, <span class="attr">component</span>: <span class="string">'./users/detail'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/users/:id'</span>, <span class="attr">component</span>: <span class="string">'./users/id'</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>component</code> 是相对于 <code>src/pages</code> 目录的</p></blockquote><h2 id="4-3-权限路由"><a href="#4-3-权限路由" class="headerlink" title="4.3 权限路由"></a>4.3 权限路由</h2><blockquote><p><code>umi</code> 的权限路由是通过配置路由的 <code>Routes</code> 属性来实现。约定式的通过 <code>yaml</code> 注释添加，配置式的直接配上即可。</p></blockquote><p>比如有以下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/list'</span>, <span class="attr">component</span>: <span class="string">'./pages/list.js'</span>, <span class="attr">Routes</span>: [<span class="string">'./routes/PrivateRoute.js'</span>] &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>然后 umi 会用<code>./routes/PrivateRoute.js</code>来渲染 <code>/list</code>。</p></blockquote><p><code>./routes/PrivateRoute.js</code> 文件示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;PrivateRoute (routes/PrivateRoute.js)&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &#123; props.children &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-路由动效"><a href="#4-4-路由动效" class="headerlink" title="4.4 路由动效"></a>4.4 路由动效</h2><blockquote><p>路由动效应该是有多种实现方式，这里举 react-transition-group 的例子。</p></blockquote><p>先安装依赖，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add react-transition-group</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>layout</code>  组件（<code>layouts/index.js</code>  或者 <code>pages</code> 子目录下的 _layout.js）里在渲染子组件时用 <code>TransitionGroup</code> 和 <code>CSSTransition</code> 包裹一层，并以 <code>location.key</code> 为 <code>key</code>，</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> withRouter <span class="keyword">from</span> <span class="string">'umi/withRouter'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TransitionGroup, CSSTransition &#125; <span class="keyword">from</span> <span class="string">"react-transition-group"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(</span><br><span class="line">  (&#123; location &#125;) =&gt;</span><br><span class="line">    &lt;TransitionGroup&gt;</span><br><span class="line">      &lt;CSSTransition key=&#123;location.key&#125; classNames=<span class="string">"fade"</span> timeout=&#123;<span class="number">300</span>&#125;&gt;</span><br><span class="line">        &#123; children &#125;</span><br><span class="line">      &lt;<span class="regexp">/CSSTransition&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>TransitionGroup&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>上面用到的 <code>fade</code> 样式，可以在 <code>src</code> 下的 <code>global.css</code> 里定义：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter</span><span class="selector-class">.fade-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">250ms</span> ease-in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-面包屑"><a href="#4-5-面包屑" class="headerlink" title="4.5 面包屑"></a>4.5 面包屑</h2><blockquote><p>面包屑也是有多种实现方式，这里举 <code>react-router-breadcrumbs-hoc</code> 的例子。</p></blockquote><p>先安装依赖，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add react-router-breadcrumbs-hoc</span><br></pre></td></tr></table></figure><p>然后实现一个 <code>Breakcrumbs.js</code>，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> NavLink <span class="keyword">from</span> <span class="string">'umi/navlink'</span>;</span><br><span class="line"><span class="keyword">import</span> withBreadcrumbs <span class="keyword">from</span> <span class="string">'react-router-breadcrumbs-hoc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更多配置请移步 https://github.com/icd2k3/react-router-breadcrumbs-hoc</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">breadcrumb</span>: <span class="string">'首页'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/list'</span>, <span class="attr">breadcrumb</span>: <span class="string">'List Page'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withBreadcrumbs(routes)(<span class="function">(<span class="params">&#123; breadcrumbs &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;breadcrumbs.map(<span class="function">(<span class="params">breadcrumb, index</span>) =&gt;</span> (</span><br><span class="line">      &lt;span key=&#123;breadcrumb.key&#125;&gt;</span><br><span class="line">        &lt;NavLink to=&#123;breadcrumb.props.match.url&#125;&gt;</span><br><span class="line">          &#123;breadcrumb&#125;</span><br><span class="line">        &lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp">        &#123;(index &lt; breadcrumbs.length - 1) &amp;&amp; &lt;i&gt; /</span> &lt;<span class="regexp">/i&gt;&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>span&gt;</span><br><span class="line">    ))&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">));</span></span><br></pre></td></tr></table></figure><p>然后在需要的地方引入此 <code>React</code> 组件即可。</p><h2 id="4-6-启用-Hash-路由"><a href="#4-6-启用-Hash-路由" class="headerlink" title="4.6 启用 Hash 路由"></a>4.6 启用 Hash 路由</h2><blockquote><p><code>umi</code> 默认是用的 <code>Browser History</code>，如果要用 <code>Hash History</code>，需配置：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  history: <span class="string">'hash'</span>,</span><br><span class="line">&#125;</span><br><span class="line"># Scroll to top</span><br><span class="line">在 layout 组件（layouts/index.js 或者 pages 子目录下的 _layout.js）的 componentDidUpdate 里决定是否 scroll to top，比如：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> withRouter <span class="keyword">from</span> <span class="string">'umi/withRouter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidUpdate(prevProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.location !== prevProps.location) &#123;</span><br><span class="line">      <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(Layout);</span><br></pre></td></tr></table></figure><h2 id="4-7-页面间跳转"><a href="#4-7-页面间跳转" class="headerlink" title="4.7 页面间跳转"></a>4.7 页面间跳转</h2><blockquote><p>在 umi 里，页面之间跳转有两种方式：声明式和命令式</p></blockquote><p><strong>声明式</strong></p><blockquote><p>基于 <code>umi/link</code>，通常作为 <code>React</code> 组件使用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'umi/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Link to=<span class="string">"/list"</span>&gt;Go to list page&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p><strong>命令式</strong></p><blockquote><p>基于 <code>umi/router</code>，通常在事件处理中被调用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'umi/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goToListPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  router.push(<span class="string">'/list'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、配置"><a href="#五、配置" class="headerlink" title="五、配置"></a>五、配置</h1><blockquote><p>配置文件<br><code>umi</code> 允许在 <code>.umirc.js</code> 或 <code>config/config.js</code>（二选一，<code>.umirc.js</code> 优先）中进行配置，支持 <code>ES6</code>语法。</p></blockquote><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  base: <span class="string">'/admin/'</span>,</span><br><span class="line">  publicPath: <span class="string">'http://cdn.com/foo'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    [<span class="string">'umi-plugin-react'</span>, &#123;</span><br><span class="line">      dva: <span class="literal">true</span>,</span><br><span class="line">    &#125;],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>.umirc.local.js</strong></p><blockquote><p><code>.umirc.local.js</code> 是本地的配置文件，不要提交到 <code>git</code>，所以通常需要配置到 <code>.gitignore</code>。如果存在，会和 <code>.umirc.js</code> 合并后再返回。</p></blockquote><p><strong>UMI_ENV</strong></p><blockquote><p>可以通过环境变量 <code>UMI_ENV</code> 区分不同环境来指定配置。</p></blockquote><p>举个例子，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .umirc.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .umirc.cloud.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">b</span>: <span class="string">'cloud'</span>, <span class="attr">c</span>: <span class="string">'cloud'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .umirc.local.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">c</span>: <span class="string">'local'</span> &#125;;</span><br></pre></td></tr></table></figure><p>不指定 <code>UMI_ENV</code> 时，拿到的配置是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  a: 1,</span><br><span class="line">  b: 2,</span><br><span class="line">  c: 'local',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>指定 <code>UMI_ENV=cloud</code>时，拿到的配置是：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  a: 1,</span><br><span class="line">  b: 'cloud',</span><br><span class="line">  c: 'local',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、Mock-数据"><a href="#六、Mock-数据" class="headerlink" title="六、Mock 数据"></a>六、Mock 数据</h1><p><strong>使用 umi 的 mock 功能</strong></p><blockquote><p><code>umi</code> 里约定 <code>mock</code> 文件夹下的文件即<code>mock</code>文件，文件导出接口定义，支持基于 <code>require</code> 动态分析的实时刷新，支持 ES6 语法，以及友好的出错提示</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 支持值为 Object 和 Array</span></span><br><span class="line">  <span class="string">'GET /api/users'</span>: &#123; <span class="attr">users</span>: [<span class="number">1</span>, <span class="number">2</span>] &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// GET POST 可省略</span></span><br><span class="line">  <span class="string">'/api/users/1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 支持自定义函数，API 参考 express@4</span></span><br><span class="line">  <span class="string">'POST /api/users/create'</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.end(<span class="string">'OK'</span>); &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>当客户端（浏览器）发送请求，如：<code>GET /api/users</code>，那么本地启动的 <code>umi dev</code> 会跟此配置文件匹配请求路径以及方法，如果匹配到了，就会将请求通过配置处理</p></blockquote><p><strong>引入 Mock.js</strong></p><blockquote><p><code>Mock.js</code> 是常用的辅助生成模拟数据的第三方库，当然你可以用你喜欢的任意库来结合 roadhog 构建数据模拟功能</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mockjs <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 使用 mockjs 等三方库</span></span><br><span class="line">  <span class="string">'GET /api/tags'</span>: mockjs.mock(&#123;</span><br><span class="line">    <span class="string">'list|100'</span>: [&#123; <span class="attr">name</span>: <span class="string">'@city'</span>, <span class="string">'value|1-100'</span>: <span class="number">50</span>, <span class="string">'type|0-2'</span>: <span class="number">1</span> &#125;],</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>添加跨域请求头</strong></p><blockquote><p>设置 <code>response</code> 的请求头即可：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'POST /api/users/create'</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>合理的拆分你的 mock 文件</strong></p><blockquote><p>对于整个系统来说，请求接口是复杂并且繁多的，为了处理大量模拟请求的场景，我们通常把每一个数据模型抽象成一个文件，统一放在 mock 的文件夹中，然后他们会自动被引入</p></blockquote><p><img src="https://gw.alipayobjects.com/zos/rmsportal/wbeiDacBkchXrTafasBy.png" alt=""></p><p><strong>模拟延迟</strong></p><blockquote><p>为了更加真实的模拟网络数据请求，往往需要模拟网络延迟时间</p></blockquote><ul><li>手动添加 <code>setTimeout</code> 模拟延迟</li></ul><p>你可以在重写请求的代理方法，在其中添加模拟延迟的处理，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'POST /api/forms'</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">'Ok'</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>使用插件模拟延迟</strong></p><blockquote><p>上面的方法虽然简便，但是当你需要添加所有的请求延迟的时候，可能就麻烦了，不过可以通过第三方插件来简化这个问题，如：<code>roadhog-api-doc#delay</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; delay &#125; <span class="keyword">from</span> <span class="string">'roadhog-api-doc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = &#123;</span><br><span class="line">  <span class="string">'GET /api/project/notice'</span>: getNotice,</span><br><span class="line">  <span class="string">'GET /api/activities'</span>: getActivities,</span><br><span class="line">  <span class="string">'GET /api/rule'</span>: getRule,</span><br><span class="line">  <span class="string">'GET /api/tags'</span>: mockjs.mock(&#123;</span><br><span class="line">    <span class="string">'list|100'</span>: [&#123; <span class="attr">name</span>: <span class="string">'@city'</span>, <span class="string">'value|1-100'</span>: <span class="number">50</span>, <span class="string">'type|0-2'</span>: <span class="number">1</span> &#125;]</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="string">'GET /api/fake_list'</span>: getFakeList,</span><br><span class="line">  <span class="string">'GET /api/fake_chart_data'</span>: getFakeChartData,</span><br><span class="line">  <span class="string">'GET /api/profile/basic'</span>: getProfileBasicData,</span><br><span class="line">  <span class="string">'GET /api/profile/advanced'</span>: getProfileAdvancedData,</span><br><span class="line">  <span class="string">'POST /api/register'</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(&#123; <span class="attr">status</span>: <span class="string">'ok'</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'GET /api/notices'</span>: getNotices,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 delay 函数，统一处理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> delay(proxy, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><strong>联调</strong></p><blockquote><p>当本地开发完毕之后，如果服务器的接口满足之前的约定，那么你只需要不开本地代理或者重定向代理到目标服务器就可以访问真实的服务端数据，非常方便</p></blockquote><h1 id="七、结合dva实践"><a href="#七、结合dva实践" class="headerlink" title="七、结合dva实践"></a>七、结合dva实践</h1><blockquote><p>自<code>&gt;= umi@2</code>起，<code>dva</code>的整合可以直接通过 <code>umi-plugin-react</code> 来配置</p></blockquote><p><strong>特性</strong></p><ul><li>按目录约定注册 <code>model</code>，无需手动 <code>app.model</code></li><li>文件名即<code>namespace</code>，可以省去 model 导出的 <code>namespace key</code></li><li>无需手写 <code>router.js</code>，交给 <code>umi</code> 处理，支持 <code>model</code> 和 <code>component</code> 的按需加载</li><li>内置 <code>query-string</code> 处理，无需再手动解码和编码</li><li>内置 <code>dva-loading</code>和 <code>dva-immer</code>，其中 <code>dva-immer</code> 需通过配置开启</li><li>开箱即用，无需安装额外依赖，比如 <code>dva</code>、<code>dva-loading</code>、<code>dva-immer</code>、<code>path-to-regexp</code>、<code>object-assign</code>、<code>react</code>、<code>react-dom</code> 等`</li></ul><p><strong>使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add umi-plugin-react</span><br></pre></td></tr></table></figure><p>然后在 <code>.umirc.js</code> 里配置插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'umi-plugin-react'</span>,</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>推荐开启 <code>dva-immer</code> 以简化 <code>reducer</code> 编写，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'umi-plugin-react'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        dva: &#123;</span><br><span class="line">          immer: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>model 注册</strong></p><blockquote><p><code>model</code> 分两类，一是全局<code>model</code>，二是页面<code>model</code>。全局 <code>model</code>存于 <code>/src/models/</code> 目录，所有页面都可引用；页面 model 不能被其他页面所引用。</p></blockquote><p>规则如下：</p><ul><li><code>src/models/**/*.js</code> 为 <code>global model</code></li><li><code>src/pages/**/models/**/*.js</code>为 <code>page model</code></li><li><code>global model</code> 全量载入，<code>page model</code> 在 <code>production</code>时按需载入，在 <code>development</code> 时全量载入</li><li><code>page model</code> 为 <code>page js</code> 所在路径下 <code>models/**/*.js</code> 的文件</li><li><code>page model</code> 会向上查找，比如 <code>page js</code> 为 <code>pages/a/b.js</code>，他的 <code>page model</code> 为 <code>pages/a/b/models/**/*.js</code> +<code>pages/a/models/**/*.js</code>，依次类推</li><li>约定 <code>model.js</code> 为单文件 model，解决只有一个<code>model</code> 时不需要建 models 目录的问题，有 <code>model.js</code>则不去找 <code>models/**/*.js</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+ src</span><br><span class="line">  + models</span><br><span class="line">    - g.js</span><br><span class="line">  + pages</span><br><span class="line">    + a</span><br><span class="line">      + models</span><br><span class="line">        - a.js</span><br><span class="line">        - b.js</span><br><span class="line">        + ss</span><br><span class="line">          - s.js</span><br><span class="line">      - page.js</span><br><span class="line">    + c</span><br><span class="line">      - model.js</span><br><span class="line">      + d</span><br><span class="line">        + models</span><br><span class="line">          - d.js</span><br><span class="line">        - page.js</span><br><span class="line">      - page.js</span><br></pre></td></tr></table></figure><p>如上目录：</p><ul><li><code>global model</code> 为 <code>src/models/g.js</code></li><li><code>/a</code> 的 <code>page model</code>为 <code>src/pages/a/models/{a,b,ss/s}.js</code></li><li><code>/c</code>的 <code>page model</code> <code>为</code> src/pages/c/model.js`</li><li><code>/c/d</code> 的 <code>page model</code> 为 <code>src/pages/c/model.js</code>, <code>src/pages/c/d/models/d.js</code></li></ul><h1 id="八、问题汇总"><a href="#八、问题汇总" class="headerlink" title="八、问题汇总"></a>八、问题汇总</h1><p><strong>1、如何配置 onError、initialState 等 hook？</strong></p><blockquote><p>新建 <code>src/dva.js</code>，通过导出的 <code>config</code> 方法来返回额外配置项，比如：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">config</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    onError(err) &#123;</span><br><span class="line">      err.preventDefault();</span><br><span class="line">      message.error(err.message);</span><br><span class="line">    &#125;,</span><br><span class="line">    initialState: &#123;</span><br><span class="line">      global: &#123;</span><br><span class="line">        text: <span class="string">'hi umi + dva'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、url 变化了，但页面组件也刷新，是什么原因？</strong></p><blockquote><p><code>layouts/index.js</code> 里如果用了 <code>connect</code> 传数据，需要用 <code>umi/withRouter</code> 高阶一下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> withRouter <span class="keyword">from</span> <span class="string">'umi/withRouter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(connect(mapStateToProps)(LayoutComponent));</span><br></pre></td></tr></table></figure><p><strong>3、如何访问到 store 或 dispatch 方法？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.g_app._store</span><br><span class="line"><span class="built_in">window</span>.g_app._store.dispatch</span><br></pre></td></tr></table></figure><p><strong>4、如何禁用包括 component 和 models 的按需加载？</strong></p><blockquote><p>在 <code>.umirc.js</code> 里配置：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  disableDynamicImport: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>如果不用page.js的命名，倒是能生成路由，但是model、service、components就全部变路由了</strong></p><blockquote><p>不用 page.js，然后通过 umi-plugin-routes 过滤掉不需要的路由，参考 <a href="https://github.com/zuiidea/antd-admin/blob/develop/.umirc.js#L4-L16" target="_blank" rel="noopener">https://github.com/zuiidea/antd-admin/blob/develop/.umirc.js#L4-L16</a></p></blockquote><p><strong>.umirc.mock.js 这个文件怎么配置呢？</strong></p><blockquote><p>可以不用配置，在 mock/ 下建文件写 mock 代码即可。</p></blockquote><h1 id="九、Demo"><a href="#九、Demo" class="headerlink" title="九、Demo"></a>九、Demo</h1><blockquote><p><a href="https://github.com/poetries/umi-tmp" target="_blank" rel="noopener">https://github.com/poetries/umi-tmp</a></p></blockquote><h1 id="十、参考"><a href="#十、参考" class="headerlink" title="十、参考"></a>十、参考</h1><ul><li><a href="https://umijs.org/zh/config/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">Umi config配置</a></li><li><a href="https://umijs.org/zh/api/" target="_blank" rel="noopener">Umi APi</a></li><li><a href="https://umijs.org/zh/plugin/" target="_blank" rel="noopener">Umi插件</a></li><li><a href="https://github.com/sorrycc/blog/issues/66" target="_blank" rel="noopener">使用 umi 改进 dva 项目开发</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、Umi简介&quot;&gt;&lt;a href=&quot;#一、Umi简介&quot; class=&quot;headerlink&quot; title=&quot;一、Umi简介&quot;&gt;&lt;/a&gt;一、Umi简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一个可插拔的企业级 &lt;code&gt;react&lt;/code&gt; 应用框架。&lt;co
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Dva" scheme="http://blog.poetries.top/tags/Dva/"/>
    
      <category term="Umi" scheme="http://blog.poetries.top/tags/Umi/"/>
    
  </entry>
  
  <entry>
    <title>Dva实践总结</title>
    <link href="http://blog.poetries.top/2018/09/05/dva/"/>
    <id>http://blog.poetries.top/2018/09/05/dva/</id>
    <published>2018-09-05T08:00:43.000Z</published>
    <updated>2018-09-17T03:35:00.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install dva-cli -g</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建应用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dva new dva-quickstart</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure><blockquote><p>react项目的推荐目录结构（如果使用dva脚手架创建，则自动生成如下）</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">|── /mock/             # 数据mock的接口文件  </span><br><span class="line">|── /src/              # 项目源码目录（我们开发的主要工作区域）   </span><br><span class="line">|   |── /components/   # 项目组件（用于路由组件内引用的可复用组件）   </span><br><span class="line">|   |── /routes/       # 路由组件（页面维度） </span><br><span class="line">|   |  |── route1.js  </span><br><span class="line">|   |  |── route2.js   # 根据router.js中的映射，在不同的url下，挂载不同的路由组件</span><br><span class="line">|   |  └── route3.js    </span><br><span class="line">|   |── /models/       # 数据模型（可以理解为store，用于存储数据与方法）  </span><br><span class="line">|   |  |── model1.js  </span><br><span class="line">|   |  |── model2.js   # 选择分离为多个model模型，是根据业务实体进行划分</span><br><span class="line">|   |  └── model3.js  </span><br><span class="line">|   |── /services/     # 数据接口（处理前台页面的ajax请求，转发到后台）   </span><br><span class="line">|   |── /utils/        # 工具函数（工具库，存储通用函数与配置参数）     </span><br><span class="line">|   |── router.js       # 路由配置（定义路由与对应的路由组件）  </span><br><span class="line">|   |── index.js       # 入口文件  </span><br><span class="line">|   |── index.less      </span><br><span class="line">|   └── index.html     </span><br><span class="line">|── package.json       # 项目信息  </span><br><span class="line">└── proxy.config.js    # 数据mock配置</span><br></pre></td></tr></table></figure><p><strong>使用 antd</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-plugin-import --save</span><br></pre></td></tr></table></figure><blockquote><p><code>babel-plugin-import</code> 是用来按需加载 <code>antd</code> 的脚本和样式的</p></blockquote><ul><li>编辑 <code>.webpackrc</code>，使 <code>babel-plugin-import</code> 插件生效</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">+  <span class="string">"extraBabelPlugins"</span>: [</span><br><span class="line">+    [<span class="string">"import"</span>, &#123; <span class="string">"libraryName"</span>: <span class="string">"antd"</span>, <span class="string">"libraryDirectory"</span>: <span class="string">"es"</span>, <span class="string">"style"</span>: <span class="string">"css"</span> &#125;]</span><br><span class="line">+  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、初识Dva"><a href="#二、初识Dva" class="headerlink" title="二、初识Dva"></a>二、初识Dva</h1><h2 id="2-1-Dva的特性"><a href="#2-1-Dva的特性" class="headerlink" title="2.1 Dva的特性"></a>2.1 Dva的特性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dva = React-Router + Redux + Redux-saga</span><br></pre></td></tr></table></figure><ul><li>仅有 5 个<code>API</code>，仅有5个主要的<code>api</code></li><li>支持 <code>HMR</code>，支持模块的热更新</li><li>支持 <code>SSR (ServerSideRender)</code>，支持服务器端渲染</li><li>支持 <code>Mobile/ReactNative</code>，支持移动手机端的代码编写</li><li>支持<code>TypeScript</code></li><li>支持路由和 <code>Model</code> 的动态加载</li></ul><h2 id="2-2-Dva的五个API"><a href="#2-2-Dva的五个API" class="headerlink" title="2.2 Dva的五个API"></a>2.2 Dva的五个API</h2><p><img src="https://upload-images.jianshu.io/upload_images/1505342-9ecf9d7d1f0452f9.png" alt=""></p><h3 id="2-2-1-app-dva-Opts"><a href="#2-2-1-app-dva-Opts" class="headerlink" title="2.2.1 app = dva(Opts)"></a>2.2.1 app = dva(Opts)</h3><blockquote><p><code>app = dva(Opts)</code>：创建应用，返回 <code>dva</code> 实例。(注：dva 支持多实例)**</p></blockquote><p>在<code>opts</code>可以配置所有的<code>hooks</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">     history,</span><br><span class="line">     initialState,</span><br><span class="line">     onError,</span><br><span class="line">     onAction,</span><br><span class="line">     onStateChange,</span><br><span class="line">     onReducer,</span><br><span class="line">     onEffect,</span><br><span class="line">     onHmr,</span><br><span class="line">     extraReducers,</span><br><span class="line">     extraEnhancers,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>hooks包含如下配置项</p></blockquote><p>1、 <code>onError((err, dispatch) =&gt; {})</code></p><ul><li><code>effect</code> 执行错误或 <code>subscription</code> 通过<code>done</code> 主动抛错时触发，可用于管理全局出错状态</li><li>注意：<code>subscription</code> 并没有加 <code>try...catch</code>，所以有错误时需通过第二个参数 <code>done</code> 主动抛错</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.model(&#123;</span><br><span class="line">  subscriptions: &#123;</span><br><span class="line">    setup(&#123; dispatch &#125;, done) &#123;</span><br><span class="line">      done(e)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2、 <code>onAction(fn | fn[])</code></p><blockquote><p>在<code>action</code>被<code>dispatch</code>时触发，用于注册 <code>redux</code> 中间件。支持函数或函数数组格式</p></blockquote><ul><li>例如我们要通过 <code>redux-logger</code> 打印日志</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  onAction: createLogger(opts),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3、 <code>onStateChange(fn)</code></p><blockquote><p><code>state</code> 改变时触发，可用于同步 state 到 <code>localStorage</code>，服务器端等</p></blockquote><p>4、 <code>onReducer(fn)</code></p><blockquote><p>封装 <code>reducer</code> 执行，比如借助 <code>redux-undo</code> 实现 <code>redo/undo</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> undoable <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  onReducer: <span class="function"><span class="params">reducer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> undoOpts = &#123;&#125;;</span><br><span class="line">      <span class="keyword">const</span> newState = undoable(reducer, undoOpts)(state, action);</span><br><span class="line">      <span class="comment">// 由于 dva 同步了 routing 数据，所以需要把这部分还原</span></span><br><span class="line">      <span class="keyword">return</span> &#123; ...newState, <span class="attr">routing</span>: newState.present.routing &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5、 <code>onEffect(fn)</code></p><blockquote><p>封装 <code>effect</code> 执行。比如 <code>dva-loading</code> 基于此实现了自动处理 <code>loading</code> 状态</p></blockquote><p>6、 <code>onHmr(fn)</code></p><blockquote><p>热替换相关，目前用于 <code>babel-plugin-dva-hmr</code></p></blockquote><p>7、 <code>extraReducers</code></p><blockquote><p>指定额外的 <code>reducer</code>，比如 <code>redux-form</code> 需要指定额外的 <code>form reducer</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> formReducer &#125; <span class="keyword">from</span> <span class="string">'redux-form'</span></span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  extraReducers: &#123;</span><br><span class="line">    form: formReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这里比较常用的是，<code>history</code>的配置，一般默认的是<code>hashHistory</code>，如果要配置 <code>history</code>为 <code>browserHistory</code>，可以这样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createHistory <span class="keyword">from</span> <span class="string">'history/createBrowserHistory'</span>;</span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  history: createHistory(),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><code>initialState</code>：指定初始数据，优先级高于 <code>model</code> 中的 <code>state</code>，默认是 <code>{}</code>，但是基本上都在<code>modal</code>里面设置相应的<code>state</code></p></blockquote><h3 id="2-2-2-app-use-Hooks"><a href="#2-2-2-app-use-Hooks" class="headerlink" title="2.2.2 app.use(Hooks)"></a>2.2.2 app.use(Hooks)</h3><blockquote><p>app.use(Hooks)：配置 hooks 或者注册插件</p></blockquote><p>这里最常见的就是<code>dva-loading</code>插件的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createLoading <span class="keyword">from</span> <span class="string">'dva-loading'</span>;</span><br><span class="line">...</span><br><span class="line">app.use(createLoading(opts));</span><br></pre></td></tr></table></figure><blockquote><p>但是一般对于全局的<code>loading</code>我们会根据业务的不同来显示相应不同的<code>loading</code>图标，我们可以根据自己的需要来选择注册相应的插件</p></blockquote><h3 id="2-2-3-app-model-ModelObject"><a href="#2-2-3-app-model-ModelObject" class="headerlink" title="2.2.3 app.model(ModelObject)"></a>2.2.3 app.model(ModelObject)</h3><blockquote><p><code>app.model(ModelObject)</code>：这个是你数据逻辑处理，数据流动的地方</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1505342-7a3cdeb874110d7c.png" alt=""></p><h3 id="2-2-4-app-unmodel-namespace"><a href="#2-2-4-app-unmodel-namespace" class="headerlink" title="2.2.4 app.unmodel(namespace)"></a>2.2.4 app.unmodel(namespace)</h3><blockquote><p>取消 <code>model</code> 注册，清理 <code>reducers</code>,<code>effects</code> 和 <code>subscriptions</code>。<code>subscription</code> 如果没有返回 <code>unlisten</code> 函数，使用 <code>app.unmodel</code> 会给予警告</p></blockquote><h3 id="2-2-5-app-router-Function"><a href="#2-2-5-app-router-Function" class="headerlink" title="2.2.5 app.router(Function)"></a>2.2.5 app.router(Function)</h3><blockquote><p>注册路由表，这一操作步骤在dva中也很重要</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册路由</span></span><br><span class="line">app.router(<span class="built_in">require</span>(<span class="string">'./router'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line"><span class="keyword">import</span> IndexPage <span class="keyword">from</span> <span class="string">'./routes/IndexPage'</span></span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'./routes/TodoList'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RouterConfig</span>(<span class="params">&#123; history &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> component=&#123;IndexPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">'/todoList'</span> components=&#123;TodoList&#125;/&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default RouterConfig</span></span><br></pre></td></tr></table></figure><blockquote><p>如果我们想解决组件动态加载问题，我们的路由文件也可以按照下面的写法来写</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router, Switch, Route &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span></span><br><span class="line"><span class="keyword">import</span> dynamic <span class="keyword">from</span> <span class="string">'dva/dynamic'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RouterConfig</span>(<span class="params">&#123; history, app &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> IndexPage = dynamic(&#123;</span><br><span class="line">    app,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./routes/IndexPage'</span>),</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Users = dynamic(&#123;</span><br><span class="line">    app,</span><br><span class="line">    models: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="keyword">import</span>(<span class="string">'./models/users'</span>)],</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./routes/Users'</span>),</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route exact path=<span class="string">"/"</span> component=&#123;IndexPage&#125; /&gt;</span><br><span class="line">        &lt;Route exact path=<span class="string">"/users"</span> component=&#123;Users&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Router&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RouterConfig</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>dynamic(opts)</code> 中<code>opt</code>包含三个配置项：</p></blockquote><ul><li><code>app</code>: <code>dva</code> 实例，加载 <code>models</code> 时需要</li><li><code>models</code>: 返回 <code>Promise</code> 数组的函数，<code>Promise</code>返回 dva model`</li><li><code>component</code>：返回 <code>Promise</code>的函数，<code>Promise</code>返回 <code>React Component</code></li></ul><h3 id="2-2-6-app-start"><a href="#2-2-6-app-start" class="headerlink" title="2.2.6 app.start"></a>2.2.6 app.start</h3><blockquote><p>启动应用，即将我们的应用跑起来</p></blockquote><h2 id="2-3-Dva九个概念"><a href="#2-3-Dva九个概念" class="headerlink" title="2.3 Dva九个概念"></a>2.3 Dva九个概念</h2><h3 id="2-3-1-State"><a href="#2-3-1-State" class="headerlink" title="2.3.1 State"></a>2.3.1 State</h3><blockquote><p>初始值，我们在 <code>dva()</code> 初始化的时候和在 modal 里面的 <code>state</code> 对其两处进行定义，其中 modal 中的优先级低于传给  <code>dva()</code> 的  <code>opts.initialState</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dva()初始化</span></span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  initialState: &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// modal()定义事件</span></span><br><span class="line">app.model(&#123;</span><br><span class="line">  namespace: <span class="string">'count'</span>,</span><br><span class="line">  state: <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-2-Action"><a href="#2-3-2-Action" class="headerlink" title="2.3.2 Action"></a>2.3.2 Action</h3><blockquote><p>表示操作事件，可以是同步，也可以是异步</p></blockquote><ul><li><code>action</code> 的格式如下，它需要有一个 <code>type</code>，表示这个 <code>action</code> 要触发什么操作；<code>payload</code> 则表示这个 <code>action</code> 将要传递的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="built_in">String</span>,</span><br><span class="line">  payload: data,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们通过 dispatch 方法来发送一个 action</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch(&#123; type: &apos;todos/add&apos;, payload: &apos;Learn Dva&apos; &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>其实我们可以构建一个Action 创建函数，如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: ADD_TODO,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们直接dispatch(addTodo()),就发送了一个action。</span></span><br><span class="line">dispatch(addTodo())</span><br></pre></td></tr></table></figure><h3 id="2-3-3-Model"><a href="#2-3-3-Model" class="headerlink" title="2.3.3 Model"></a>2.3.3 Model</h3><blockquote><p><code>model</code> 是 <code>dva</code> 中最重要的概念，<code>Model</code> 非 <code>MVC</code> 中的 <code>M</code>，而是领域模型，用于把数据相关的逻辑聚合到一起，几乎所有的数据，逻辑都在这边进行处理分发</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queryString <span class="keyword">from</span> <span class="string">'query-string'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> todoService <span class="keyword">from</span> <span class="string">'../services/todo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: <span class="string">'todo'</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    list: []</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    save(state, &#123; <span class="attr">payload</span>: &#123; list &#125; &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, list &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  effects: &#123;</span><br><span class="line">    *addTodo(&#123; <span class="attr">payload</span>: value &#125;, &#123; call, put, select &#125;) &#123;</span><br><span class="line">      <span class="comment">// 模拟网络请求</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">yield</span> call(todoService.query, value)</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">      <span class="keyword">let</span> tempList = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.todo.list)</span><br><span class="line">      <span class="keyword">let</span> list = []</span><br><span class="line">      list = list.concat(tempList)</span><br><span class="line">      <span class="keyword">const</span> tempObj = &#123;&#125;</span><br><span class="line">      tempObj.title = value</span><br><span class="line">      tempObj.id = list.length</span><br><span class="line">      tempObj.finished = <span class="literal">false</span></span><br><span class="line">      list.push(tempObj)</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'save'</span>, <span class="attr">payload</span>: &#123; list &#125;&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    *toggle(&#123; <span class="attr">payload</span>: index &#125;, &#123; call, put, select &#125;) &#123;</span><br><span class="line">      <span class="comment">// 模拟网络请求</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">yield</span> call(todoService.query, index)</span><br><span class="line">      <span class="keyword">let</span> tempList = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.todo.list)</span><br><span class="line">      <span class="keyword">let</span> list = []</span><br><span class="line">      list = list.concat(tempList)</span><br><span class="line">      <span class="keyword">let</span> obj = list[index]</span><br><span class="line">      obj.finished = !obj.finished</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'save'</span>, <span class="attr">payload</span>: &#123; list &#125; &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    *<span class="keyword">delete</span>(&#123; <span class="attr">payload</span>: index &#125;, &#123; call, put, select &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">yield</span> call(todoService.query, index)</span><br><span class="line">      <span class="keyword">let</span> tempList = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.todo.list)</span><br><span class="line">      <span class="keyword">let</span> list = []</span><br><span class="line">      list = list.concat(tempList)</span><br><span class="line">      list.splice(index, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'save'</span>, <span class="attr">payload</span>: &#123; list &#125; &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    *modify(&#123; <span class="attr">payload</span>: &#123; value, index &#125; &#125;, &#123; call, put, select &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">yield</span> call(todoService.query, value)</span><br><span class="line">      <span class="keyword">let</span> tempList = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.todo.list)</span><br><span class="line">      <span class="keyword">let</span> list = []</span><br><span class="line">      list = list.concat(tempList)</span><br><span class="line">      <span class="keyword">let</span> obj = list[index]</span><br><span class="line">      obj.title = value</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'save'</span>, <span class="attr">payload</span>: &#123; list &#125; &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  subscriptions: &#123;</span><br><span class="line">    setup(&#123; dispatch, history &#125;) &#123;</span><br><span class="line">      <span class="comment">// 监听路由的变化，请求页面数据</span></span><br><span class="line">      <span class="keyword">return</span> history.listen(<span class="function">(<span class="params">&#123; pathname, search &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> query = queryString.parse(search)</span><br><span class="line">        <span class="keyword">let</span> list = []</span><br><span class="line">        <span class="keyword">if</span> (pathname === <span class="string">'todoList'</span>) &#123;</span><br><span class="line">          dispatch(&#123; <span class="attr">type</span>: <span class="string">'save'</span>, <span class="attr">payload</span>: &#123;list&#125; &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>model</code>对象中包含5个重要的属性</p></blockquote><p><strong>state</strong></p><blockquote><p>这里的 state 跟我们刚刚讲的 state 的概念是一样的，只不过她的优先级比初始化的低，但是基本上项目中的 state 都是在这里定义的</p></blockquote><p><strong>namespace</strong></p><blockquote><p><code>model</code> 的命名空间，同时也是他在全局 <code>state</code> 上的属性，只能用字符串，我们发送在发送 <code>action</code> 到相应的 <code>reducer</code> 时，就会需要用到 <code>namespace</code></p></blockquote><p><strong>Reducer</strong></p><blockquote><p>以<code>key/value</code> 格式定义 <code>reducer</code>，用于处理同步操作，唯一可以修改  <code>state</code> 的地方。由  <code>action</code> 触发。其实一个纯函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace: <span class="string">'todo'</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    list: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// reducers 写法</span></span><br><span class="line">  reducers: &#123;</span><br><span class="line">    save(state, &#123; <span class="attr">payload</span>: &#123; list &#125; &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, list &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>Effect</strong></p><blockquote><p>用于处理异步操作和业务逻辑，不直接修改 <code>state</code>，简单的来说，就是获取从服务端获取数据，并且发起一个 <code>action</code>交给<code>reducer</code> 的地方</p></blockquote><p>其中它用到了<code>redux-saga</code>，里面有几个常用的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// effects 写法</span></span><br><span class="line">effects: &#123;</span><br><span class="line">    *addTodo(&#123; <span class="attr">payload</span>: value &#125;, &#123; call, put, select &#125;) &#123;</span><br><span class="line">      <span class="comment">// 模拟网络请求</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">yield</span> call(todoService.query, value)</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">      <span class="keyword">let</span> tempList = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.todo.list)</span><br><span class="line">      <span class="keyword">let</span> list = []</span><br><span class="line">      list = list.concat(tempList)</span><br><span class="line">      <span class="keyword">const</span> tempObj = &#123;&#125;</span><br><span class="line">      tempObj.title = value</span><br><span class="line">      tempObj.id = list.length</span><br><span class="line">      tempObj.finished = <span class="literal">false</span></span><br><span class="line">      list.push(tempObj)</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'save'</span>, <span class="attr">payload</span>: &#123; list &#125;&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    *toggle(&#123; <span class="attr">payload</span>: index &#125;, &#123; call, put, select &#125;) &#123;</span><br><span class="line">      <span class="comment">// 模拟网络请求</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">yield</span> call(todoService.query, index)</span><br><span class="line">      <span class="keyword">let</span> tempList = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.todo.list)</span><br><span class="line">      <span class="keyword">let</span> list = []</span><br><span class="line">      list = list.concat(tempList)</span><br><span class="line">      <span class="keyword">let</span> obj = list[index]</span><br><span class="line">      obj.finished = !obj.finished</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'save'</span>, <span class="attr">payload</span>: &#123; list &#125; &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    *<span class="keyword">delete</span>(&#123; <span class="attr">payload</span>: index &#125;, &#123; call, put, select &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">yield</span> call(todoService.query, index)</span><br><span class="line">      <span class="keyword">let</span> tempList = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.todo.list)</span><br><span class="line">      <span class="keyword">let</span> list = []</span><br><span class="line">      list = list.concat(tempList)</span><br><span class="line">      list.splice(index, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'save'</span>, <span class="attr">payload</span>: &#123; list &#125; &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    *modify(&#123; <span class="attr">payload</span>: &#123; value, index &#125; &#125;, &#123; call, put, select &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">yield</span> call(todoService.query, value)</span><br><span class="line">      <span class="keyword">let</span> tempList = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.todo.list)</span><br><span class="line">      <span class="keyword">let</span> list = []</span><br><span class="line">      list = list.concat(tempList)</span><br><span class="line">      <span class="keyword">let</span> obj = list[index]</span><br><span class="line">      obj.title = value</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'save'</span>, <span class="attr">payload</span>: &#123; list &#125; &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1505342-9ecb8ba2d8fd3ec2.png" alt=""></p><blockquote><p>在项目中最主要的会用到的是 <code>put</code> 与 <code>call</code></p></blockquote><p><strong>Subscription</strong></p><blockquote><ul><li>以 <code>key/value</code> 格式定义 <code>subscription</code>，<code>subscription</code> 是订阅，用于订阅一个数据源，然后根据需要 dispatch 相应的 action</li><li><code>subscription</code> 是订阅，用于订阅一个数据源，然后根据需要 <code>dispatch</code> 相应的<code>action</code>。在 <code>app.start()</code> 时被执行，数据源可以是当前的时间、当前页面的<code>url</code>、服务器的 <code>websocket</code> 连接、<code>history</code>路由变化等等。</li></ul></blockquote><ul><li><strong>注意</strong>：如果要使用 <code>app.unmodel()</code>，<code>subscription</code> 必须返回 <code>unlisten</code> 方法，用于取消数据订阅</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// subscriptions 写法</span></span><br><span class="line">subscriptions: &#123;</span><br><span class="line">    setup(&#123; dispatch, history &#125;) &#123;</span><br><span class="line">      <span class="comment">// 监听路由的变化，请求页面数据</span></span><br><span class="line">      <span class="keyword">return</span> history.listen(<span class="function">(<span class="params">&#123; pathname, search &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> query = queryString.parse(search)</span><br><span class="line">        <span class="keyword">let</span> list = []</span><br><span class="line">        <span class="keyword">if</span> (pathname === <span class="string">'todoList'</span>) &#123;</span><br><span class="line">          dispatch(&#123; <span class="attr">type</span>: <span class="string">'save'</span>, <span class="attr">payload</span>: &#123;list&#125; &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-Router"><a href="#2-3-4-Router" class="headerlink" title="2.3.4 Router"></a>2.3.4 Router</h3><blockquote><p><code>Router</code> 表示路由配置信息，项目中的 <code>router.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">&#123; history &#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>RouteComponent</strong></p><blockquote><p><code>RouteComponent</code> 表示<code>Router</code> 里匹配路径的 <code>Component</code>，通常会绑定<code>model</code>的数据。如下:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>App<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">todos</span>: state.todos &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(App);</span><br></pre></td></tr></table></figure><h2 id="2-4-整体架构"><a href="#2-4-整体架构" class="headerlink" title="2.4 整体架构"></a>2.4 整体架构</h2><p><img src="https://upload-images.jianshu.io/upload_images/1505342-be8059756ba0db38.png" alt=""></p><ul><li>首先我们根据 <code>url</code> 访问相关的 <code>Route-Component</code>，在组件中我们通过 <code>dispatch</code>发送 <code>action</code> 到 <code>model</code> 里面的 <code>effect</code> 或者直接 <code>Reducer</code></li><li>当我们将<code>action</code>发送给<code>Effect</code>，基本上是取服务器上面请求数据的，服务器返回数据之后，<code>effect</code> 会发送相应的 <code>action</code>给 <code>reducer</code>，由唯一能改变 <code>state</code>的 <code>reducer</code> 改变 <code>state</code> ，然后通过<code>connect</code>重新渲染组件。</li><li>当我们将<code>action</code>发送给<code>reducer</code>，那直接由 <code>reducer</code> 改变 <code>state</code>，然后通过<code>connect</code>重新渲染组件</li></ul><h2 id="2-5-Dva图解"><a href="#2-5-Dva图解" class="headerlink" title="2.5 Dva图解"></a>2.5 Dva图解</h2><p><strong>图解一：加入Saga</strong></p><blockquote><p><code>React</code> 只负责页面渲染, 而不负责页面逻辑, 页面逻辑可以从中单独抽取出来, 变成 <code>store</code></p></blockquote><p><img src="https://cdn.yuque.com/yuque/0/2018/png/103904/1528436167824-7fa834ea-aa6c-4f9f-bab5-b8c5312bcf7e.png" alt=""></p><blockquote><p>使用 <code>Middleware</code> 拦截 <code>action</code>, 这样一来异步的网络操作也就很方便了, 做成一个 <code>Middleware</code>就行了, 这里使用<code>redux-saga</code> 这个类库</p></blockquote><ul><li>点击创建 <code>Todo</code>的按钮, 发起一个 <code>type == addTodo</code> 的 <code>action</code></li><li><code>saga</code> 拦截这个 <code>action</code>, 发起 <code>http</code> 请求, 如果请求成功, 则继续向 <code>reducer</code> 发一个 <code>type == addTodoSucc</code> 的 <code>action</code>, 提示创建成功, 反之则发送 <code>type == addTodoFail</code> 的<code>action</code> 即可</li></ul><p><strong>图解二：Dva表示法</strong></p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/103904/1528436195004-cd3800f2-f13d-40ba-bb1f-4efba99cfe0d.png" alt=""></p><blockquote><p>dva做了 3 件很重要的事情</p></blockquote><ul><li>把 <code>store</code>及 <code>saga</code> 统一为一个 <code>model</code> 的概念, 写在一个 js 文件里面</li><li>增加了一个 <code>Subscriptions</code>, 用于收集其他来源的 <code>action</code>, eg: 键盘操作</li><li><code>model</code> 写法很简约, 类似于 <code>DSL</code> 或者 <code>RoR</code></li></ul><h1 id="三、计数器例子"><a href="#三、计数器例子" class="headerlink" title="三、计数器例子"></a>三、计数器例子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dva new myapp</span><br></pre></td></tr></table></figure><p><strong>目录结构介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── mock    // mock数据文件夹</span><br><span class="line">├── node_modules // 第三方的依赖</span><br><span class="line">├── public  // 存放公共public文件的文件夹</span><br><span class="line">├── src  // 最重要的文件夹，编写代码都在这个文件夹下</span><br><span class="line">│   ├── assets // 可以放图片等公共资源</span><br><span class="line">│   ├── components // 就是react中的木偶组件</span><br><span class="line">│   ├── models // dva最重要的文件夹，所有的数据交互及逻辑都写在这里</span><br><span class="line">│   ├── routes // 就是react中的智能组件，不要被文件夹名字误导。</span><br><span class="line">│   ├── services // 放请求借口方法的文件夹</span><br><span class="line">│   ├── utils // 自己的工具方法可以放在这边</span><br><span class="line">│   ├── index.css // 入口文件样式</span><br><span class="line">│   ├── index.ejs // ejs模板引擎</span><br><span class="line">│   ├── index.js // 入口文件</span><br><span class="line">│   └── router.js // 项目的路由文件</span><br><span class="line">├── .eslintrc // bower安装目录的配置</span><br><span class="line">├── .editorconfig // 保证代码在不同编辑器可视化的工具</span><br><span class="line">├── .gitignore // git上传时忽略的文件</span><br><span class="line">├── .roadhogrc.js // 项目的配置文件，配置接口转发，css_module等都在这边。</span><br><span class="line">├── .roadhogrc.mock.js // 项目的配置文件</span><br><span class="line">└── package.json // 当前整一个项目的依赖</span><br></pre></td></tr></table></figure><p><strong>首先是前端的页面，我们使用 class 形式来创建组件，原例子中是使用无状态来创建的。react 创建组件的各种方式，大家可以看<a href="http://www.cnblogs.com/wonyun/p/5930333.html" target="_blank" rel="noopener">React创建组件的三种方式及其区别</a></strong></p><blockquote><p>我们先修改<code>route/IndexPage.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./IndexPage.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexPage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">        &lt;div className=&#123;styles.record&#125;&gt;Highest Record: <span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className=&#123;styles.current&#125;&gt;2&lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=&#123;styles.button&#125;&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; &#123;&#125;&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect()(IndexPage);</span><br></pre></td></tr></table></figure><blockquote><p>同时修改样式<code>routes/IndexPage.css</code></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.record</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.current</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  button &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 40<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>model</code> 处理<code>state</code>，在页面里面输出 <code>model</code> 中的 <code>state</code></p></blockquote><ul><li>首先我们在index.js中将<code>models/example.js</code>，即将model下一行的的注释打开</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Initialize</span></span><br><span class="line"><span class="keyword">const</span> app = dva();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Plugins</span></span><br><span class="line"><span class="comment">// app.use(&#123;&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Model</span></span><br><span class="line">app.model(<span class="built_in">require</span>(<span class="string">'./models/example'</span>)); <span class="comment">// 打开注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Router</span></span><br><span class="line">app.router(<span class="built_in">require</span>(<span class="string">'./router'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Start</span></span><br><span class="line">app.start(<span class="string">'#root'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>接下来我们进入 <code>models/example.js</code>，将<code>namespace</code> 名字改为 <code>count</code>，<code>state</code>对象加上 <code>record</code> 与 <code>current</code> 属性。如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: <span class="string">'count'</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    record: <span class="number">0</span>,</span><br><span class="line">    current: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>接着我们来到 <code>routes/indexpage.js</code> 页面，通过的 <code>mapStateToProps</code>引入相关的 <code>state</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./IndexPage.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexPage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch, count &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">        &lt;div className=&#123;styles.record&#125;&gt;</span><br><span class="line">         Highest Record: &#123;count.record&#125; <span class="comment">// 将count的record输出</span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className=&#123;styles.current&#125;&gt;</span></span><br><span class="line"><span class="regexp">         &#123;count.current&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=&#123;styles.button&#125;&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; &#123;&#125; &#125; &gt;</span><br><span class="line">                 +</span><br><span class="line">          &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function mapStateToProps(state) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123; count: state.count &#125;;</span></span><br><span class="line"><span class="regexp">&#125; /</span><span class="regexp">/ 获取state</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps)(IndexPage);</span></span><br></pre></td></tr></table></figure><blockquote><p>通过 <code>+</code> 发送 <code>action</code>，通过 <code>reducer</code> 改变相应的 <code>state</code></p></blockquote><ul><li>首先我们在 <code>models/example.js</code>，写相应的 <code>reducer</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    add1(state) &#123;</span><br><span class="line">      <span class="keyword">const</span> newCurrent = state.current + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state,</span><br><span class="line">        record: newCurrent &gt; state.record ? newCurrent : state.record,</span><br><span class="line">        current: newCurrent,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    minus(state) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">current</span>: state.current - <span class="number">1</span> &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在页面的模板 <code>routes/IndexPage.js</code> 中 <code>+</code> 号点击的时候，<code>dispatch</code>一个 <code>action</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./IndexPage.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexPage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch, count &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">        &lt;div className=&#123;styles.record&#125;&gt;Highest Record: &#123;count.record&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className=&#123;styles.current&#125;&gt;&#123;count.current&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=&#123;styles.button&#125;&gt;</span><br><span class="line">          &lt;button </span><br><span class="line">+            onClick=&#123;() =&gt; &#123; dispatch(&#123; <span class="attr">type</span>: <span class="string">'count/add1'</span> &#125;);&#125;</span><br><span class="line">          &#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(IndexPage);</span><br></pre></td></tr></table></figure><blockquote><p>接下来我们来使用 <code>effect</code> 模拟一个数据接口请求，返回之后，通过 <code>yield put()</code> 改变相应的 <code>state</code></p></blockquote><ul><li>首先我们替换相应的 <code>models/example.js</code> 的 <code>effect</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">effects: &#123;</span><br><span class="line">    *add(action, &#123; call, put &#125;) &#123;</span><br><span class="line">      <span class="keyword">yield</span> call(delay, <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'minus'</span> &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>这里的 <code>delay</code>，是我这边写的一个延时的函数，我们在 <code>utils</code> 里面编写一个 <code>utils.js</code> ，一般请求接口的函数都会写在 <code>servers</code> 文件夹中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">timeout</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, timeout);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>订阅订阅键盘事件，使用 <code>subscriptions</code>，当用户按住 <code>command+up</code> 时候触发添加数字的 <code>action</code></p></blockquote><ul><li>在 <code>models/example.js</code> 中作如下修改</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+<span class="keyword">import</span> key <span class="keyword">from</span> <span class="string">'keymaster'</span>;</span><br><span class="line">...</span><br><span class="line">app.model(&#123;</span><br><span class="line">  namespace: <span class="string">'count'</span>,</span><br><span class="line">+ subscriptions: &#123;</span><br><span class="line">+   keyboardWatcher(&#123; dispatch &#125;) &#123;</span><br><span class="line">+     key(<span class="string">'⌘+up, ctrl+up'</span>, () =&gt; &#123; dispatch(&#123;<span class="attr">type</span>:<span class="string">'add'</span>&#125;) &#125;);</span><br><span class="line">+   &#125;,</span><br><span class="line">+ &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在这里你需要安装 <code>keymaster</code> 这个依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install keymaster --save</span><br></pre></td></tr></table></figure><ul><li>现在你可以按住 <code>command+up</code> 就可以使 <code>current</code> 加1</li></ul><h1 id="四、Dva实践"><a href="#四、Dva实践" class="headerlink" title="四、Dva实践"></a>四、Dva实践</h1><h2 id="4-1-抽离Model"><a href="#4-1-抽离Model" class="headerlink" title="4.1 抽离Model"></a>4.1 抽离Model</h2><blockquote><p>抽离<code>Model</code>，根据设计页面需求，设计相应的<code>Model</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/users.js</span></span><br><span class="line"><span class="comment">// version1: 从数据维度抽取，更适用于无状态的数据</span></span><br><span class="line"><span class="comment">// version2: 从业务状态抽取，将数据与组件的业务状态统一抽离成一个model</span></span><br><span class="line"><span class="comment">// 新增部分为在数据维度基础上，改为从业务状态抽取而添加的代码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: <span class="string">'users'</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    list: [],</span><br><span class="line">    total: <span class="literal">null</span>,</span><br><span class="line">+   loading: <span class="literal">false</span>, <span class="comment">// 控制加载状态</span></span><br><span class="line">+   current: <span class="literal">null</span>, <span class="comment">// 当前分页信息</span></span><br><span class="line">+   currentItem: &#123;&#125;, <span class="comment">// 当前操作的用户对象</span></span><br><span class="line">+   modalVisible: <span class="literal">false</span>, <span class="comment">// 弹出窗的显示状态</span></span><br><span class="line">+   modalType: <span class="string">'create'</span>, <span class="comment">// 弹出窗的类型（添加用户，编辑用户）</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步操作</span></span><br><span class="line">    effects: &#123;</span><br><span class="line">        *query()&#123;&#125;,</span><br><span class="line">        *create()&#123;&#125;,</span><br><span class="line">        *<span class="string">'delete'</span>()&#123;&#125;,   <span class="comment">// 因为delete是关键字，特殊处理</span></span><br><span class="line">        *update()&#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换状态树</span></span><br><span class="line">    reducers: &#123;</span><br><span class="line">+       showLoading()&#123;&#125;, <span class="comment">// 控制加载状态的 reducer</span></span><br><span class="line">+       showModel()&#123;&#125;, <span class="comment">// 控制 Model 显示状态的 reducer</span></span><br><span class="line">+       hideModel()&#123;&#125;,</span><br><span class="line">        querySuccess()&#123;&#125;,</span><br><span class="line">        createSuccess()&#123;&#125;,</span><br><span class="line">        deleteSuccess()&#123;&#125;,</span><br><span class="line">        updateSuccess()&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-设计组件"><a href="#4-2-设计组件" class="headerlink" title="4.2 设计组件"></a>4.2 设计组件</h2><blockquote><p>先设置容器组件的访问路径，再创建组件文件</p></blockquote><h3 id="4-2-1-容器组件"><a href="#4-2-1-容器组件" class="headerlink" title="4.2.1 容器组件"></a>4.2.1 容器组件</h3><blockquote><p>具有监听数据行为的组件，职责是绑定相关联的 model 数据，包含子组件；传入的数据来源于model</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dva 的 connect 方法可以将组件和数据关联在一起</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件本身</span></span><br><span class="line"><span class="keyword">const</span> MyComponent = <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// propTypes属性，用于限制props的传入数据类型</span></span><br><span class="line">MyComponent.propTypes = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明模型传递函数，用于建立组件和数据的映射关系</span></span><br><span class="line"><span class="comment">// 实际表示 将ModelA这一个数据模型，绑定到当前的组件中，则在当前组件中，随时可以取到ModelA的最新值</span></span><br><span class="line"><span class="comment">// 可以绑定多个Model</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">&#123;ModelA&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;ModelA&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关联 model</span></span><br><span class="line"><span class="comment">// 正式调用模型传递函数，完成模型绑定</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(MyComponent);</span><br></pre></td></tr></table></figure><h3 id="4-2-2-展示组件"><a href="#4-2-2-展示组件" class="headerlink" title="4.2.2 展示组件"></a>4.2.2 展示组件</h3><blockquote><p>展示通过 <code>props</code> 传递到组件内部数据；传入的数据来源于容器组件向展示组件的<code>props</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件本身</span></span><br><span class="line"><span class="comment">// 所需要的数据通过 Container Component 通过 props 传递下来</span></span><br><span class="line"><span class="keyword">const</span> MyComponent = <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;&#125;</span><br><span class="line">MyComponent.propTypes = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并不会监听数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyComponent;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-设置路由"><a href="#4-2-3-设置路由" class="headerlink" title="4.2.3 设置路由"></a>4.2.3 设置路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .src/router.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line"><span class="keyword">import</span> Users <span class="keyword">from</span> <span class="string">'./routes/Users'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">&#123; history &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/users"</span> component=&#123;Users&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p><strong>容器组件雏形</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .src/routes/Users.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Users</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;User Router Component&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Users;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-4-设计容器组件"><a href="#4-2-4-设计容器组件" class="headerlink" title="4.2.4 设计容器组件"></a>4.2.4 设计容器组件</h3><blockquote><p>自顶向下的设计方法：先设计容器组件，再逐步细化内部的展示容器</p></blockquote><p>组件的定义方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一： es6 的写法，当组件设计react生命周期时，可采用这种写法</span></span><br><span class="line"><span class="comment">// 具有生命周期的组件，可以在接收到传入数据变化时，自定义执行方法，有自己的行为模式</span></span><br><span class="line"><span class="comment">// 比如在组件生成后调用xx请求(componentDidMount)、可以自己决定要不要更新渲染(shouldComponentUpdate)等</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>(</span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二： stateless 的写法，定义无状态组件</span></span><br><span class="line"><span class="comment">// 无状态组件，仅仅根据传入的数据更新，修改自己的渲染内容</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">(<span class="params">props</span>) =&gt;</span> (&#123;&#125;);</span><br></pre></td></tr></table></figure><p>容器组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/routes/Users.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入展示组件 （暂时都没实现）</span></span><br><span class="line"><span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">'../components/Users/UserList'</span>;</span><br><span class="line"><span class="keyword">import</span> UserSearch <span class="keyword">from</span> <span class="string">'../components/Users/UserSearch'</span>;</span><br><span class="line"><span class="keyword">import</span> UserModal <span class="keyword">from</span> <span class="string">'../components/Users/UserModal'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入css样式表</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./style.less'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Users</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向userListProps中传入静态数据</span></span><br><span class="line">  <span class="keyword">const</span> userSearchProps = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> userListProps = &#123;</span><br><span class="line">    total: <span class="number">3</span>,</span><br><span class="line">    current: <span class="number">1</span>,</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    dataSource: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'张三'</span>,</span><br><span class="line">        age: <span class="number">23</span>,</span><br><span class="line">        address: <span class="string">'成都'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'李四'</span>,</span><br><span class="line">        age: <span class="number">24</span>,</span><br><span class="line">        address: <span class="string">'杭州'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'王五'</span>,</span><br><span class="line">        age: <span class="number">25</span>,</span><br><span class="line">        address: <span class="string">'上海'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> userModalProps = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">      &#123;<span class="comment">/* 用户筛选搜索框 */</span>&#125;</span><br><span class="line">      &lt;UserSearch &#123;...userSearchProps&#125; /&gt;</span><br><span class="line">      &#123;<span class="comment">/* 用户信息展示列表 */</span>&#125;</span><br><span class="line">      &lt;UserList &#123;...userListProps&#125; /&gt;</span><br><span class="line">      &#123;<span class="comment">/* 添加用户 &amp; 修改用户弹出的浮层 */</span>&#125;</span><br><span class="line">      &lt;UserModal &#123;...userModalProps&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 很关键的对外输出export；使外部可通过import引用使用此组件</span></span><br><span class="line"><span class="regexp">export default Users;</span></span><br></pre></td></tr></table></figure><p>展示组件UserList</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/components/Users/UserList.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用antd的UI组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Table, message, Popconfirm &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用 stateless 的写法</span></span><br><span class="line"><span class="keyword">const</span> UserList = (&#123;</span><br><span class="line">    total,</span><br><span class="line">    current,</span><br><span class="line">    loading,</span><br><span class="line">    dataSource,</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> columns = [&#123;</span><br><span class="line">    title: <span class="string">'姓名'</span>,</span><br><span class="line">    dataIndex: <span class="string">'name'</span>,</span><br><span class="line">    key: <span class="string">'name'</span>,</span><br><span class="line">    render: <span class="function">(<span class="params">text</span>) =&gt;</span> &lt;a href=<span class="string">"#"</span>&gt;&#123;text&#125;&lt;<span class="regexp">/a&gt;,</span></span><br><span class="line"><span class="regexp">  &#125;, &#123;</span></span><br><span class="line"><span class="regexp">    title: '年龄',</span></span><br><span class="line"><span class="regexp">    dataIndex: 'age',</span></span><br><span class="line"><span class="regexp">    key: 'age',</span></span><br><span class="line"><span class="regexp">  &#125;, &#123;</span></span><br><span class="line"><span class="regexp">    title: '住址',</span></span><br><span class="line"><span class="regexp">    dataIndex: 'address',</span></span><br><span class="line"><span class="regexp">    key: 'address',</span></span><br><span class="line"><span class="regexp">  &#125;, &#123;</span></span><br><span class="line"><span class="regexp">    title: '操作',</span></span><br><span class="line"><span class="regexp">    key: 'operation',</span></span><br><span class="line"><span class="regexp">    render: (text, record) =&gt; (</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;a onClick=&#123;()=&gt;&#123;&#125;&#125;&gt;编辑&lt;/</span>a&gt;</span><br><span class="line">         </span><br><span class="line">        &lt;Popconfirm title=<span class="string">"确定要删除吗？"</span> onConfirm=&#123;()=&gt;&#123;&#125;&#125;&gt;</span><br><span class="line">          &lt;a&gt;删除&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Popconfirm&gt;</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    ),</span></span><br><span class="line"><span class="regexp">  &#125;];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 定义分页对象</span></span><br><span class="line"><span class="regexp">  const pagination = &#123;</span></span><br><span class="line"><span class="regexp">    total,</span></span><br><span class="line"><span class="regexp">    current,</span></span><br><span class="line"><span class="regexp">    pageSize: 10,</span></span><br><span class="line"><span class="regexp">    onChange: ()=&gt;&#123;&#125;,</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 此处的Table标签使用了antd组件，传入的参数格式是由antd组件库本身决定的</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 此外还需要在index.js中引入antd  import 'antd/</span>dist/antd.css<span class="string">'</span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;Table</span></span><br><span class="line"><span class="string">        columns=&#123;columns&#125;</span></span><br><span class="line"><span class="string">        dataSource=&#123;dataSource&#125;</span></span><br><span class="line"><span class="string">        loading=&#123;loading&#125;</span></span><br><span class="line"><span class="string">        rowKey=&#123;record =&gt; record.id&#125;</span></span><br><span class="line"><span class="string">        pagination=&#123;pagination&#125;</span></span><br><span class="line"><span class="string">      /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default UserList;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-添加Reducer"><a href="#4-3-添加Reducer" class="headerlink" title="4.3 添加Reducer"></a>4.3 添加Reducer</h2><blockquote><p>在整个应用中，只有<code>model</code>中的<code>reducer</code>函数可以直接修改自己所在<code>model</code>的<code>state</code>参数，其余都是非法操作；<br>并且必须使用<code>return {...state}</code>的形式进行修改</p></blockquote><h3 id="4-3-1-第一步：实现reducer函数"><a href="#4-3-1-第一步：实现reducer函数" class="headerlink" title="4.3.1 第一步：实现reducer函数"></a>4.3.1 第一步：实现reducer函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/users.js</span></span><br><span class="line"><span class="comment">// 使用静态数据返回，把userList中的静态数据移到此处</span></span><br><span class="line"><span class="comment">// querySuccess这个action的作用在于，修改了model的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: <span class="string">'users'</span>,</span><br><span class="line">  state： &#123;&#125;，</span><br><span class="line">  subscriptions: &#123;&#125;,</span><br><span class="line">  effects: &#123;&#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    querySuccess(state)&#123;</span><br><span class="line">        <span class="keyword">const</span> mock = &#123;</span><br><span class="line">          total: <span class="number">3</span>,</span><br><span class="line">          current: <span class="number">1</span>,</span><br><span class="line">          loading: <span class="literal">false</span>,</span><br><span class="line">          list: [</span><br><span class="line">            &#123;</span><br><span class="line">              id: <span class="number">1</span>,</span><br><span class="line">              name: <span class="string">'张三'</span>,</span><br><span class="line">              age: <span class="number">23</span>,</span><br><span class="line">              address: <span class="string">'成都'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              id: <span class="number">2</span>,</span><br><span class="line">              name: <span class="string">'李四'</span>,</span><br><span class="line">              age: <span class="number">24</span>,</span><br><span class="line">              address: <span class="string">'杭州'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              id: <span class="number">3</span>,</span><br><span class="line">              name: <span class="string">'王五'</span>,</span><br><span class="line">              age: <span class="number">25</span>,</span><br><span class="line">              address: <span class="string">'上海'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// return 的内容是一个对象，涵盖原state中的所有属性，以实现“更新替换”的效果</span></span><br><span class="line">        <span class="keyword">return</span> &#123;...state, ...mock, <span class="attr">loading</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-第二步：关联Model中的数据源"><a href="#4-3-2-第二步：关联Model中的数据源" class="headerlink" title="4.3.2 第二步：关联Model中的数据源"></a>4.3.2 第二步：关联Model中的数据源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/Users.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后用到了connect函数，需要在头部预先引入connect</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Users</span>(<span class="params">&#123; location, dispatch, users &#125;</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    loading, list, total, current,</span><br><span class="line">    currentItem, modalVisible, modalType</span><br><span class="line">    &#125; = users;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> userSearchProps=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用传入的数据源，进行数据渲染</span></span><br><span class="line">  <span class="keyword">const</span> userListProps=&#123;</span><br><span class="line">    dataSource: list,</span><br><span class="line">    total,</span><br><span class="line">    loading,</span><br><span class="line">    current,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> userModalProps=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">      &#123;<span class="comment">/* 用户筛选搜索框 */</span>&#125;</span><br><span class="line">      &lt;UserSearch &#123;...userSearchProps&#125; /&gt;</span><br><span class="line">      &#123;<span class="comment">/* 用户信息展示列表 */</span>&#125;</span><br><span class="line">      &lt;UserList &#123;...userListProps&#125; /&gt;</span><br><span class="line">      &#123;<span class="comment">/* 添加用户 &amp; 修改用户弹出的浮层 */</span>&#125;</span><br><span class="line">      &lt;UserModal &#123;...userModalProps&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 声明组件的props类型</span></span><br><span class="line"><span class="regexp">Users.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  users: PropTypes.object,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 指定订阅数据，并且关联到users中</span></span><br><span class="line"><span class="regexp">function mapStateToProps(&#123; users &#125;) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;users&#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 建立数据关联关系</span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps)(Users);</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3-第三步：通过发起Action，在组件中获取Model中的数据"><a href="#4-3-3-第三步：通过发起Action，在组件中获取Model中的数据" class="headerlink" title="4.3.3 第三步：通过发起Action，在组件中获取Model中的数据"></a>4.3.3 第三步：通过发起Action，在组件中获取Model中的数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/users.js</span></span><br><span class="line"><span class="comment">// 在组件生成后发出action，示例：</span></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">this</span>.props.dispatch(&#123;</span><br><span class="line">    type: <span class="string">'model/action'</span>,     <span class="comment">// type对应action的名字</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在本次实践中，在访问/users/路由时，就是我们获取用户数据的时机</span></span><br><span class="line"><span class="comment">// 因此把dispatch移至subscription中</span></span><br><span class="line"><span class="comment">// subcription，订阅(或是监听)一个数据源，然后根据条件dispatch对应的action</span></span><br><span class="line"><span class="comment">// 数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等  </span></span><br><span class="line"><span class="comment">// 此处订阅的数据源就是路由信息，当路由为/users，则派发'querySuccess'这个effects方法</span></span><br><span class="line">subscriptions: &#123;</span><br><span class="line">    setup(&#123; dispatch, history &#125;) &#123;</span><br><span class="line">      history.listen(<span class="function"><span class="params">location</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (location.pathname === <span class="string">'/users'</span>) &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">            type: <span class="string">'querySuccess'</span>,</span><br><span class="line">            payload: &#123;&#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="4-3-4-第四步：-在index-js中添加models"><a href="#4-3-4-第四步：-在index-js中添加models" class="headerlink" title="4.3.4 第四步： 在index.js中添加models"></a>4.3.4 第四步： 在index.js中添加models</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model必须在此完成注册，才能全局有效</span></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line">app.model(<span class="built_in">require</span>(<span class="string">'./models/users.js'</span>));</span><br></pre></td></tr></table></figure><h3 id="4-4-添加Effects"><a href="#4-4-添加Effects" class="headerlink" title="4.4 添加Effects"></a>4.4 添加Effects</h3><blockquote><p><code>Effects</code>的作用在于处理异步函数，控制数据流程。<br>因为在真实场景中，数据都来自服务器，需要在发起异步请求获得返回值后再设置数据，更新<code>state</code>。<br>因此我们往往在<code>Effects</code>中调用<code>reducer</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: <span class="string">'users'</span>,</span><br><span class="line">  state： &#123;&#125;，</span><br><span class="line">  subscriptions: &#123;&#125;,</span><br><span class="line">  effects: &#123;</span><br><span class="line">    <span class="comment">// 添加effects函数</span></span><br><span class="line">    <span class="comment">// call与put是dva的函数</span></span><br><span class="line">    <span class="comment">// call调用执行一个函数</span></span><br><span class="line">    <span class="comment">// put则是dispatch执行一个action</span></span><br><span class="line">    <span class="comment">// select用于访问其他model</span></span><br><span class="line">    *query(&#123; payload &#125;, &#123; select, call, put &#125;) &#123;</span><br><span class="line">        <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'showLoading'</span> &#125;);</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">yield</span> call(query);</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">          <span class="keyword">yield</span> put(&#123;</span><br><span class="line">            type: <span class="string">'querySuccess'</span>,</span><br><span class="line">            payload: &#123;</span><br><span class="line">              list: data.data,</span><br><span class="line">              total: data.page.total,</span><br><span class="line">              current: data.page.current</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  reducers: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求处理   包含了一个ajax请求</span></span><br><span class="line"><span class="comment">// models/users.js</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../utils/request'</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">`/api/users?<span class="subst">$&#123;qs.stringify(params)&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-把请求处理分离到service中"><a href="#4-5-把请求处理分离到service中" class="headerlink" title="4.5 把请求处理分离到service中"></a>4.5 把请求处理分离到service中</h3><blockquote><p>用意在于分离(可复用的)ajax请求</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// services/users.js</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../utils/request'</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">`/api/users?<span class="subst">$&#123;qs.stringify(params)&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在models中引用</span></span><br><span class="line"><span class="comment">// models/users.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;query&#125; <span class="keyword">from</span> <span class="string">'../services/users'</span>;</span><br></pre></td></tr></table></figure><h2 id="五、使用dva框架和直接使用redux写法的区别"><a href="#五、使用dva框架和直接使用redux写法的区别" class="headerlink" title="五、使用dva框架和直接使用redux写法的区别"></a>五、使用dva框架和直接使用redux写法的区别</h2><h3 id="5-1-使用-redux"><a href="#5-1-使用-redux" class="headerlink" title="5.1 使用 redux"></a>5.1 使用 redux</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// action.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REQUEST_TODO = <span class="string">'REQUEST_TODO'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RESPONSE_TODO = <span class="string">'RESPONSE_TODO'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="function"><span class="params">count</span> =&gt;</span> (&#123;<span class="attr">type</span>: REQUEST_TODO, <span class="attr">payload</span>: &#123;<span class="attr">loading</span>: <span class="literal">true</span>, count&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> response = <span class="function"><span class="params">count</span> =&gt;</span> (&#123;<span class="attr">type</span>: RESPONSE_TODO, <span class="attr">payload</span>: &#123;<span class="attr">loading</span>: <span class="literal">false</span>, count&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetch = <span class="function"><span class="params">count</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    dispatch(request(count));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(count + <span class="number">1</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(response(data))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reducer.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; REQUEST_TODO, RESPONSE_TODO &#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = &#123;</span><br><span class="line">  loading: <span class="literal">false</span>,</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> REQUEST_TODO:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, ...action.payload&#125;;</span><br><span class="line">    <span class="keyword">case</span> RESPONSE_TODO:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, ...action.payload&#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// app.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; bindActionCreators &#125; from &apos;redux&apos;;</span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class="line"></span><br><span class="line">import * as actions from &apos;./actions&apos;;</span><br><span class="line"></span><br><span class="line">const App = (&#123;fetch, count, loading&#125;) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;loading ? &lt;div&gt;loading...&lt;/div&gt; : &lt;div&gt;&#123;count&#125;&lt;/div&gt;&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; fetch(count)&#125;&gt;add&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return bindActionCreators(actions, dispatch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(App)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> thunkMiddleware <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./app/reducer'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./app/app'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, applyMiddleware(thunkMiddleware));</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">  ,</span></span><br><span class="line"><span class="regexp">  document.getElementById('app')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h3 id="5-2-使用dva"><a href="#5-2-使用dva" class="headerlink" title="5.2 使用dva"></a>5.2 使用dva</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// model.js</span><br><span class="line">export default &#123;</span><br><span class="line">  namespace: &apos;demo&apos;,</span><br><span class="line">  state: &#123;</span><br><span class="line">    loading: false,</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    request(state, payload) &#123;</span><br><span class="line">      return &#123;...state, ...payload&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    response(state, payload) &#123;</span><br><span class="line">      return &#123;...state, ...payload&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  effects: &#123;</span><br><span class="line">    *&apos;fetch&apos;(action, &#123;put, call&#125;) &#123;</span><br><span class="line">      yield put(&#123;type: &apos;request&apos;, loading: true&#125;);</span><br><span class="line"></span><br><span class="line">      let count = yield call((count) =&gt; &#123;</span><br><span class="line">        return new Promise(resolve =&gt; &#123;</span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(count + 1);</span><br><span class="line">          &#125;, 1000);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, action.count);</span><br><span class="line"></span><br><span class="line">      yield put(&#123;</span><br><span class="line">        type: &apos;response&apos;,</span><br><span class="line">        loading: false,</span><br><span class="line">        count</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">(<span class="params">&#123;fetch, count, loading&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;loading ? <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> : <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; fetch(count)&#125;&gt;add&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> state.demo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    fetch(count)&#123;</span><br><span class="line">      dispatch(&#123;<span class="attr">type</span>: <span class="string">'demo/fetch'</span>, count&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(App)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> model <span class="keyword">from</span> <span class="string">'./model'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./app'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = dva();</span><br><span class="line"></span><br><span class="line">app.use(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">app.model(model);</span><br><span class="line"></span><br><span class="line">app.router(<span class="function"><span class="params">()</span> =&gt;</span> &lt;App /&gt;);</span><br><span class="line"></span><br><span class="line">app.start();</span><br></pre></td></tr></table></figure><ul><li>使用 <code>redux</code> 需要拆分出<code>action</code>模块和<code>reducer</code>模块</li><li><code>dva</code>将<code>action</code>和<code>reducer</code>封装到<code>model</code>中，异步流程采用<code>Generator</code>处理</li></ul><h1 id="六、使用axios统一处理"><a href="#六、使用axios统一处理" class="headerlink" title="六、使用axios统一处理"></a>六、使用axios统一处理</h1><h2 id="6-1-示例代码"><a href="#6-1-示例代码" class="headerlink" title="6.1 示例代码"></a>6.1 示例代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; notification, message &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routerRedux &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、功能：</span></span><br><span class="line"><span class="comment"> * 1. 统一拦截http错误请求码；</span></span><br><span class="line"><span class="comment"> * 2. 统一拦截业务错误代码；</span></span><br><span class="line"><span class="comment"> * 3. 统一设置请求前缀</span></span><br><span class="line"><span class="comment"> * |-- 每个 http 加前缀 baseURL = /api/v1，从配置文件中获取 apiPrefix</span></span><br><span class="line"><span class="comment"> * 4. 配置异步请求过渡状态：显示蓝色加载条表示正在请求中，避免给用户页面假死的不好体验。</span></span><br><span class="line"><span class="comment"> * |-- 使用 NProgress 工具库。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 二、引包：</span></span><br><span class="line"><span class="comment"> * |-- axios：http 请求工具库</span></span><br><span class="line"><span class="comment"> * |-- NProgress：异步请求过度条，在浏览器主体部分顶部显示蓝色小条</span></span><br><span class="line"><span class="comment"> * |-- notification：Antd组件 &gt; 处理错误响应码提示信息</span></span><br><span class="line"><span class="comment"> * |-- routerRedux：dva/router对象，用于路由跳转，错误响应码跳转相应页面</span></span><br><span class="line"><span class="comment"> * |-- store：dva中对象，使用里面的 dispatch 对象，用于触发路由跳转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置全局参数，如响应超市时间，请求前缀等。</span></span><br><span class="line">axios.defaults.timeout = <span class="number">5000</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">'/api/v1'</span>;</span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态码错误信息</span></span><br><span class="line"><span class="keyword">const</span> codeMessage = &#123;</span><br><span class="line">  <span class="number">200</span>: <span class="string">'服务器成功返回请求的数据。'</span>,</span><br><span class="line">  <span class="number">201</span>: <span class="string">'新建或修改数据成功。'</span>,</span><br><span class="line">  <span class="number">202</span>: <span class="string">'一个请求已经进入后台排队（异步任务）。'</span>,</span><br><span class="line">  <span class="number">204</span>: <span class="string">'删除数据成功。'</span>,</span><br><span class="line">  <span class="number">400</span>: <span class="string">'发出的请求有错误，服务器没有进行新建或修改数据的操作。'</span>,</span><br><span class="line">  <span class="number">401</span>: <span class="string">'用户没有权限（令牌、用户名、密码错误）。'</span>,</span><br><span class="line">  <span class="number">403</span>: <span class="string">'用户得到授权，但是访问是被禁止的。'</span>,</span><br><span class="line">  <span class="number">404</span>: <span class="string">'发出的请求针对的是不存在的记录，服务器没有进行操作。'</span>,</span><br><span class="line">  <span class="number">406</span>: <span class="string">'请求的格式不可得。'</span>,</span><br><span class="line">  <span class="number">410</span>: <span class="string">'请求的资源被永久删除，且不会再得到的。'</span>,</span><br><span class="line">  <span class="number">422</span>: <span class="string">'当创建一个对象时，发生一个验证错误。'</span>,</span><br><span class="line">  <span class="number">500</span>: <span class="string">'服务器发生错误，请检查服务器。'</span>,</span><br><span class="line">  <span class="number">502</span>: <span class="string">'网关错误。'</span>,</span><br><span class="line">  <span class="number">503</span>: <span class="string">'服务不可用，服务器暂时过载或维护。'</span>,</span><br><span class="line">  <span class="number">504</span>: <span class="string">'网关超时。'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个请求拦截器，用于设置请求过渡状态</span></span><br><span class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 请求开始，蓝色过渡滚动条开始出现</span></span><br><span class="line">  NProgress.start();</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个返回拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 请求结束，蓝色过渡滚动条消失</span></span><br><span class="line">  NProgress.done();</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 请求结束，蓝色过渡滚动条消失</span></span><br><span class="line">  <span class="comment">// 即使出现异常，也要调用关闭方法，否则一直处于加载状态很奇怪</span></span><br><span class="line">  NProgress.done();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span> (<span class="params">opt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 调用 axios api，统一拦截</span></span><br><span class="line">  <span class="keyword">return</span> axios(opt)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> </span><br><span class="line">      <span class="comment">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 请求成功 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`【<span class="subst">$&#123;opt.method&#125;</span> <span class="subst">$&#123;opt.url&#125;</span>】请求成功，响应数据：%o`</span>, response);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 打印业务错误提示</span></span><br><span class="line">      <span class="keyword">if</span> (response.data &amp;&amp; response.data.code != <span class="string">'0000'</span>) &#123;</span><br><span class="line">        message.error(response.data.message);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; ...response.data &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 请求失败 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line">      <span class="comment">// 请求配置发生的错误</span></span><br><span class="line">      <span class="keyword">if</span> (!error.response) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'Error'</span>, error.message);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 响应时状态码处理 </span></span><br><span class="line">      <span class="keyword">const</span> status = error.response.status;</span><br><span class="line">      <span class="keyword">const</span> errortext = codeMessage[status] || error.response.statusText;</span><br><span class="line">      </span><br><span class="line">      notification.error(&#123;</span><br><span class="line">        message: <span class="string">`请求错误 <span class="subst">$&#123;status&#125;</span>`</span>,</span><br><span class="line">        description: errortext,</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 存在请求，但是服务器的返回一个状态码，它们都在2xx之外</span></span><br><span class="line">      <span class="keyword">const</span> &#123; dispatch &#125; = store;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (status === <span class="number">401</span>) &#123;</span><br><span class="line">        dispatch(routerRedux.push(<span class="string">'/user/login'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="number">403</span>) &#123;</span><br><span class="line">        dispatch(routerRedux.push(<span class="string">'/exception/403'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status &lt;= <span class="number">504</span> &amp;&amp; status &gt;= <span class="number">500</span>) &#123;</span><br><span class="line">        dispatch(routerRedux.push(<span class="string">'/exception/500'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status &gt;= <span class="number">404</span> &amp;&amp; status &lt; <span class="number">422</span>) &#123;</span><br><span class="line">        dispatch(routerRedux.push(<span class="string">'/exception/404'</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 开发时使用，上线时删除</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`【<span class="subst">$&#123;opt.method&#125;</span> <span class="subst">$&#123;opt.url&#125;</span>】请求失败，响应数据：%o`</span>, error.response);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">code</span>: status, <span class="attr">message</span>: errortext &#125;; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-明确响应体"><a href="#6-2-明确响应体" class="headerlink" title="6.2 明确响应体"></a>6.2 明确响应体</h2><blockquote><p>以微信小程序为例，请求响应数据分为两部分：</p></blockquote><ul><li>网络请求是否成功；</li><li>业务场景值。即便网络请求成功了，业务处理上可能有时也会出错，比如校验不通过</li></ul><p>我们在拦截响应时要分别对这两部分进行处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">response = &#123;</span><br><span class="line">  status: <span class="number">200</span>,                <span class="comment">// 网络请求状态。</span></span><br><span class="line">  statusText: <span class="string">'xxx'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    code: <span class="string">'1001'</span>,             <span class="comment">// 业务请求状态。这里 '0000' 表示业务没问题，其它都有问题</span></span><br><span class="line">    message: <span class="string">'yyy'</span>,</span><br><span class="line">    data: &#123;  &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-依赖包分析"><a href="#6-3-依赖包分析" class="headerlink" title="6.3 依赖包分析"></a>6.3 依赖包分析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; notification, message &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routerRedux &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../index'</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>import store from &#39;../index&#39;;</code>这是 <code>dva</code> 中导出的对象。即下面代码最终导出的 <code>app._store</code>，引入它是因为 <code>dispatch</code> 对象在里面，我们需要 dispatch 对象进行路由跳转</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserHistory <span class="keyword">as</span> createHistory &#125; <span class="keyword">from</span> <span class="string">'history'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Initialize</span></span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  history: createHistory(),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Plugins</span></span><br><span class="line">app.use(createLoading());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Model</span></span><br><span class="line">app.model(<span class="built_in">require</span>(<span class="string">'./models/app/global'</span>).default);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Router</span></span><br><span class="line">app.router(<span class="built_in">require</span>(<span class="string">'./router'</span>).default);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Start</span></span><br><span class="line">app.start(<span class="string">'#root'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app._store;</span><br></pre></td></tr></table></figure><h2 id="6-4-axios-全局配置"><a href="#6-4-axios-全局配置" class="headerlink" title="6.4 axios 全局配置"></a>6.4 axios 全局配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置全局参数，如响应超市时间，请求前缀等。</span></span><br><span class="line">axios.defaults.timeout = <span class="number">5000</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">'/api/v1'</span>;</span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><blockquote><p>axios 可以设置很多全局配置，具体可参阅 <a href="https://segmentfault.com/a/1190000008470355" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008470355</a></p></blockquote><h2 id="6-5-加载-NProgress-过渡组件"><a href="#6-5-加载-NProgress-过渡组件" class="headerlink" title="6.5 加载 NProgress 过渡组件"></a>6.5 加载 NProgress 过渡组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/ 添加一个请求拦截器，用于设置请求过渡状态</span><br><span class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 请求开始，蓝色过渡滚动条开始出现</span></span><br><span class="line">  NProgress.start();</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个返回拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 请求结束，蓝色过渡滚动条消失</span></span><br><span class="line">  NProgress.done();</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 请求结束，蓝色过渡滚动条消失</span></span><br><span class="line">  <span class="comment">// 即使出现异常，也要调用关闭方法，否则一直处于加载状态很奇怪</span></span><br><span class="line">  NProgress.done();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><code>NProgress</code> 的使用主要有两个方法，当调用 <code>NProgress.start();</code> 时在浏览器顶部就会出现蓝色小条，当调用 <code>NProgress.done();</code> 蓝色小条就会消失。我们分别在请求开始和接收到响应调用这两个方法</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/6693922-948c3efcfeeaf4fd.gif" alt=""></p><h2 id="6-6-网络请求成功处理"><a href="#6-6-网络请求成功处理" class="headerlink" title="6.6 网络请求成功处理"></a>6.6 网络请求成功处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> </span><br><span class="line">      <span class="comment">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 请求成功 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`【<span class="subst">$&#123;opt.method&#125;</span> <span class="subst">$&#123;opt.url&#125;</span>】请求成功，响应数据：%o`</span>, response);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 打印业务错误提示</span></span><br><span class="line">      <span class="keyword">if</span> (response.data &amp;&amp; response.data.code != <span class="string">'0000'</span>) &#123;</span><br><span class="line">        message.error(response.data.message);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; ...response.data &#125;;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>网络请求状态码为 <code>200-300</code> 表示成功，此时还应该判断业务处理是否成功。这个根据具体项目具体规定，比如微信小程序有一套场景值。在实际项目中可以自行规定 <code>code = &#39;0000&#39;</code> 业务处理完全没问题，<code>code = &#39;1111&#39;</code>校验不通过，<code>code = &#39;2222&#39;</code> 数据库出错等等。</p></blockquote><ul><li>最后别忘了要返回具体对象 <code>{ ...response.data }</code></li></ul><h2 id="6-7-网络请求失败处理"><a href="#6-7-网络请求失败处理" class="headerlink" title="6.7 网络请求失败处理"></a>6.7 网络请求失败处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态码错误信息</span></span><br><span class="line"><span class="keyword">const</span> codeMessage = &#123;</span><br><span class="line">  <span class="number">200</span>: <span class="string">'服务器成功返回请求的数据。'</span>,</span><br><span class="line">  <span class="number">201</span>: <span class="string">'新建或修改数据成功。'</span>,</span><br><span class="line">  <span class="number">202</span>: <span class="string">'一个请求已经进入后台排队（异步任务）。'</span>,</span><br><span class="line">  <span class="number">204</span>: <span class="string">'删除数据成功。'</span>,</span><br><span class="line">  <span class="number">400</span>: <span class="string">'发出的请求有错误，服务器没有进行新建或修改数据的操作。'</span>,</span><br><span class="line">  <span class="number">401</span>: <span class="string">'用户没有权限（令牌、用户名、密码错误）。'</span>,</span><br><span class="line">  <span class="number">403</span>: <span class="string">'用户得到授权，但是访问是被禁止的。'</span>,</span><br><span class="line">  <span class="number">404</span>: <span class="string">'发出的请求针对的是不存在的记录，服务器没有进行操作。'</span>,</span><br><span class="line">  <span class="number">406</span>: <span class="string">'请求的格式不可得。'</span>,</span><br><span class="line">  <span class="number">410</span>: <span class="string">'请求的资源被永久删除，且不会再得到的。'</span>,</span><br><span class="line">  <span class="number">422</span>: <span class="string">'当创建一个对象时，发生一个验证错误。'</span>,</span><br><span class="line">  <span class="number">500</span>: <span class="string">'服务器发生错误，请检查服务器。'</span>,</span><br><span class="line">  <span class="number">502</span>: <span class="string">'网关错误。'</span>,</span><br><span class="line">  <span class="number">503</span>: <span class="string">'服务不可用，服务器暂时过载或维护。'</span>,</span><br><span class="line">  <span class="number">504</span>: <span class="string">'网关超时。'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...........</span></span><br><span class="line"></span><br><span class="line">.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 请求失败 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line">      <span class="comment">// 请求配置发生的错误</span></span><br><span class="line">      <span class="keyword">if</span> (!error.response) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'Error'</span>, error.message);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 响应时状态码处理 </span></span><br><span class="line">      <span class="keyword">const</span> status = error.response.status;</span><br><span class="line">      <span class="keyword">const</span> errortext = codeMessage[status] || error.response.statusText;</span><br><span class="line">      </span><br><span class="line">      notification.error(&#123;</span><br><span class="line">        message: <span class="string">`请求错误 <span class="subst">$&#123;status&#125;</span>`</span>,</span><br><span class="line">        description: errortext,</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 存在请求，但是服务器的返回一个状态码，它们都在2xx之外</span></span><br><span class="line">      <span class="keyword">const</span> &#123; dispatch &#125; = store;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (status === <span class="number">401</span>) &#123;</span><br><span class="line">        dispatch(routerRedux.push(<span class="string">'/user/login'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="number">403</span>) &#123;</span><br><span class="line">        dispatch(routerRedux.push(<span class="string">'/exception/403'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status &lt;= <span class="number">504</span> &amp;&amp; status &gt;= <span class="number">500</span>) &#123;</span><br><span class="line">        dispatch(routerRedux.push(<span class="string">'/exception/500'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status &gt;= <span class="number">404</span> &amp;&amp; status &lt; <span class="number">422</span>) &#123;</span><br><span class="line">        dispatch(routerRedux.push(<span class="string">'/exception/404'</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 开发时使用，上线时删除</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`【<span class="subst">$&#123;opt.method&#125;</span> <span class="subst">$&#123;opt.url&#125;</span>】请求失败，响应数据：%o`</span>, error.response);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">code</span>: status, <span class="attr">message</span>: errortext &#125;; </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li>网络请求失败，首先需要根据 <code>status</code> 打印提示消息，告诉用户为什么请求失败。如响应码为 <code>401</code>，那么提示用户的文字就会是 用户没有权限（令牌、用户名、密码错误）</li><li>如果是 <code>401</code> 错误，表示用户没有权限访问或者用户名密码输入错误，应该跳转到登录页面：<code>dispatch(routerRedux.push(&#39;/user/login&#39;));</code></li></ul><h1 id="七、更多参考"><a href="#七、更多参考" class="headerlink" title="七、更多参考"></a>七、更多参考</h1><ul><li><a href="https://github.com/dvajs/dva-docs/blob/master/v1/zh-cn/tutorial/01-%E6%A6%82%E8%A6%81.md" target="_blank" rel="noopener">dva官方教程</a></li><li><a href="https://github.com/dvajs/dva/blob/master/README_zh-CN.md" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://github.com/dvajs/dva-knowledgemap" target="_blank" rel="noopener">使用Dva的所有知识点</a></li><li><a href="http://slides.com/sorrycc/dva#/" target="_blank" rel="noopener">Dva-React 应用框架在蚂蚁金服的实践</a></li><li><a href="https://github.com/sorrycc/roadhog#%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">roadhog介绍</a></li><li><a href="https://my.oschina.net/dkvirus/blog/1057996" target="_blank" rel="noopener">创建一个 dva 脚手架工程</a></li><li><a href="https://my.oschina.net/dkvirus/blog/1058203" target="_blank" rel="noopener">dva 脚手架目录分析</a></li><li><a href="https://github.com/sorrycc/blog/issues/18" target="_blank" rel="noopener">12 步 30 分钟，完成用户管理的 CURD 应用 (react+dva+antd)</a></li><li><a href="https://www.jianshu.com/p/c5ec9ffa29be" target="_blank" rel="noopener">dva router4.0 使用实践总结</a></li><li><a href="https://www.jianshu.com/p/7de59752b8a8" target="_blank" rel="noopener">dva 2.0中如何使用代码进行路由跳转</a></li><li><a href="https://www.jianshu.com/p/2e9e45e9a880" target="_blank" rel="noopener">dva 配置 browserHistory 实践总结</a></li><li><a href="https://www.jianshu.com/p/61fe7a57fad4" target="_blank" rel="noopener">dva-loading 实践用法</a></li><li><a href="https://www.jianshu.com/p/649e97ff4354" target="_blank" rel="noopener">dva 升级2.0版本遇到的问题小结</a></li><li><a href="https://www.jianshu.com/p/e0a220906301" target="_blank" rel="noopener">dva 中进行页面复用实践总结</a></li><li><a href="https://dvajs.com/knowledgemap/#javascript-%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">Dva知识地图</a></li><li><a href="https://dvajs.com/api/" target="_blank" rel="noopener">dva-API文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、环境搭建&quot;&gt;&lt;a href=&quot;#一、环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一、环境搭建&quot;&gt;&lt;/a&gt;一、环境搭建&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Dva" scheme="http://blog.poetries.top/tags/Dva/"/>
    
      <category term="React" scheme="http://blog.poetries.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>浅谈PWA(Progressive Web App)</title>
    <link href="http://blog.poetries.top/2018/09/04/pwa/"/>
    <id>http://blog.poetries.top/2018/09/04/pwa/</id>
    <published>2018-09-04T10:00:43.000Z</published>
    <updated>2018-09-17T03:35:00.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、初识PWA"><a href="#一、初识PWA" class="headerlink" title="一、初识PWA"></a>一、初识PWA</h1><blockquote><ul><li><code>PWA</code>，即<code>Progressive Web App</code>, 是提升 <code>Web App</code> 的体验的一种新方法，能给用户原生应用的体验。</li><li>一个 <code>PWA</code> 应用首先是一个网页, 可以通过 <code>Web</code> 技术编写出一个网页应用. 随后添加上 <code>App Manifest</code> 和 <code>Service Worker</code> 来实现<code>PWA</code> 的安装和离线等功能</li></ul></blockquote><h2 id="1-1-PWA中的一些技术"><a href="#1-1-PWA中的一些技术" class="headerlink" title="1.1 PWA中的一些技术"></a>1.1 PWA中的一些技术</h2><blockquote><p><code>PWA</code>本身其实是一个概念集合，它不是指某一项技术，而是通过一系列的<code>Web</code>技术与<code>Web</code>标准来优化<code>Web App</code>的安全、性能和体验。其中涉及到的一些技术概念包括了</p></blockquote><ul><li><code>Web App Manifest</code></li><li><code>Service Worker</code></li><li><code>Cache API</code> 缓存</li><li><code>Push、Notification</code> 推送与通知</li><li><code>Background Sync</code>后台同步</li><li>响应式设计</li></ul><h2 id="1-2-解决了哪些问题"><a href="#1-2-解决了哪些问题" class="headerlink" title="1.2 解决了哪些问题"></a>1.2 解决了哪些问题</h2><ul><li>可以添加至主屏幕，点击主屏幕图标可以实现启动动画以及隐藏地址栏</li><li>实现离线缓存功能，即使用户手机没有网络，依然可以使用一些离线功能</li><li>实现了消息推送</li></ul><h2 id="1-3-PWA存在的问题"><a href="#1-3-PWA存在的问题" class="headerlink" title="1.3 PWA存在的问题"></a>1.3 PWA存在的问题</h2><ul><li>支持率不高:现在<code>ios</code>手机端不支持<code>pwa</code>，<code>IE</code>也暂时不支持<br><code>Chrome</code>在中国桌面版占有率还是不错的，安卓移动端上的占有率却很低</li><li>各大厂商还未明确支持<code>pwa</code></li><li>依赖的<code>GCM</code>服务在国内无法使用</li><li>微信小程序的竞争</li></ul><blockquote><p>尽管有上述的一些缺点，PWA技术仍然有很多可以使用的点。</p></blockquote><ul><li><code>service worker</code>技术实现离线缓存，可以将一些不经常更改的静态文件放到缓存中，提升用户体验。</li><li><code>service worker</code>实现消息推送，使用浏览器推送功能，吸引用户<br>渐进式开发，尽管一些浏览器暂时不支持，可以利用上述技术给使用支持浏览器的用户带来更好的体验</li></ul><h1 id="二、PWA的实现"><a href="#二、PWA的实现" class="headerlink" title="二、PWA的实现"></a>二、PWA的实现</h1><h2 id="2-1-Manifest实现添加至主屏幕"><a href="#2-1-Manifest实现添加至主屏幕" class="headerlink" title="2.1 Manifest实现添加至主屏幕"></a>2.1 Manifest实现添加至主屏幕</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Minimal PWA<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"manifest.json"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"/e.png"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// manifest.json</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Minimal PWA"</span>, <span class="comment">// 必填 显示的插件名称</span></span><br><span class="line">  <span class="string">"short_name"</span>: <span class="string">"PWA Demo"</span>, <span class="comment">// 可选  在APP launcher和新的tab页显示，如果没有设置，则使用name</span></span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"The app that helps you understand PWA"</span>, <span class="comment">//用于描述应用</span></span><br><span class="line">  <span class="string">"display"</span>: <span class="string">"standalone"</span>, <span class="comment">// 定义开发人员对Web应用程序的首选显示模式。standalone模式会有单独的</span></span><br><span class="line">  <span class="string">"start_url"</span>: <span class="string">"/"</span>, <span class="comment">// 应用启动时的url</span></span><br><span class="line">  <span class="string">"theme_color"</span>: <span class="string">"#313131"</span>, <span class="comment">// 桌面图标的背景色</span></span><br><span class="line">  <span class="string">"background_color"</span>: <span class="string">"#313131"</span>, <span class="comment">// 为web应用程序预定义的背景颜色。在启动web应用程序和加载应用程序的内容之间创建了一个平滑的过渡。</span></span><br><span class="line">  <span class="string">"icons"</span>: [ <span class="comment">// 桌面图标，是一个数组</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"icon/lowres.webp"</span>,</span><br><span class="line">    <span class="string">"sizes"</span>: <span class="string">"48x48"</span>,  <span class="comment">// 以空格分隔的图片尺寸</span></span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"image/webp"</span>  <span class="comment">// 帮助userAgent快速排除不支持的类型</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"icon/lowres"</span>,</span><br><span class="line">    <span class="string">"sizes"</span>: <span class="string">"48x48"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"icon/hd_hi.ico"</span>,</span><br><span class="line">    <span class="string">"sizes"</span>: <span class="string">"72x72 96x96 128x128 256x256"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"icon/hd_hi.svg"</span>,</span><br><span class="line">    <span class="string">"sizes"</span>: <span class="string">"72x72"</span></span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>Manifest</code>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Manifest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Manifest</a></li><li>如果用的是安卓手机，可以下载chrome浏览器自己操作看看</li></ul></blockquote><h2 id="2-2-service-worker实现离线缓存"><a href="#2-2-service-worker实现离线缓存" class="headerlink" title="2.2 service worker实现离线缓存"></a>2.2 service worker实现离线缓存</h2><h3 id="2-2-1-什么是service-worker"><a href="#2-2-1-什么是service-worker" class="headerlink" title="2.2.1 什么是service worker"></a>2.2.1 什么是service worker</h3><blockquote><p><code>Service Worker</code> 是 Chrome 团队提出和力推的一个 WEB API，用于给 web 应用提供高级的可持续的后台处理能力</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-fabc2954c2bc98f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>Service Workers</code> 就像介于服务器和网页之间的拦截器，能够拦截进出的HTTP 请求，从而完全控制你的网站</p></blockquote><h3 id="2-2-2-最主要的特点"><a href="#2-2-2-最主要的特点" class="headerlink" title="2.2.2 最主要的特点"></a>2.2.2 最主要的特点</h3><ul><li>在页面中注册并安装成功后，运行于浏览器后台，不受页面刷新的影响，可以监听和截拦作用域范围内所有页面的 <code>HTTP</code> 请求。</li><li>网站必须使用 <code>HTTPS</code>。除了使用本地开发环境调试时(如域名使用 <code>localhost</code>)</li><li>运行于浏览器后台，可以控制打开的作用域范围下所有的页面请求</li><li>单独的作用域范围，单独的运行环境和执行线程</li><li>不能操作页面 <code>DOM</code>。但可以通过事件机制来处理</li><li>事件驱动型服务线程</li></ul><blockquote><p>为什么要求网站必须是<code>HTTPS</code>的，大概是因为<code>service worker</code>权限太大能拦截所有页面的请求，如果<code>http</code>的网站安装<code>service worker</code>很容易被攻击</p></blockquote><h3 id="2-2-3-生命周期"><a href="#2-2-3-生命周期" class="headerlink" title="2.2.3 生命周期"></a>2.2.3 生命周期</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8169196971eefbeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>当用户首次导航至 URL 时，服务器会返回响应的网页。</p></blockquote><ul><li>第1步:当你调用 <code>register()</code> 函数时， <code>Service Worker</code>开始下载。</li><li>第2步:在注册过程中，浏览器会下载、解析并执行 <code>Service Worker ()</code>。如果在此步骤中出现任何错误，<code>register()</code>返回的 <code>promise</code> 都会执行 <code>reject</code>操作，并且 <code>Service Worker</code> 会被废弃。</li><li>第3步:一旦 <code>Service Worker</code> 成功执行了，<code>install</code> 事件就会激活</li><li>第4步:安装完成，<code>Service Worker</code> 便会激活，并控制在其范围内的一切。如果生命周期中的所有事件都成功了，<code>Service Worker</code>便已准备就绪，随时可以使用了！</li></ul><blockquote><p><code>chrome://serviceworker-internals</code> 来了解当前浏览器中所有已安装<code>Service Worker</code>的详细情况</p></blockquote><h3 id="2-2-4-实现离线缓存"><a href="#2-2-4-实现离线缓存" class="headerlink" title="2.2.4 实现离线缓存"></a>2.2.4 实现离线缓存</h3><p><strong>HTTP缓存</strong></p><ul><li><code>Web</code> 服务器可以使用 <code>Expires</code> 首部来通知 <code>Web</code>客户端，它可以使用资源的当前副本，直到指定的“过期时间”。反过来，浏览器可以缓存此资源，并且只有在有效期满后才会再次检查新版本。使用 <code>HTTP</code> 缓存意味着你要依赖服务器来告诉你何时缓存资源和何时过期</li></ul><p><strong>service worker缓存</strong></p><ul><li><code>Service Workers</code>的强大在于它们拦截 HTTP 请求的能力<br>进入任何传入的<code>HTTP</code> 请求，并决定想要如何响应。在你的 <code>Service Worker</code> 中，可以编写逻辑来决定想要缓存的资源，以及需要满足什么条件和资源需要缓存多久。一切尽归你掌控！</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Caching World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Image --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/hello.png"</span> /&gt;</span>                 </span><br><span class="line">    <span class="comment">&lt;!-- JavaScript --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 注册 service worker</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;           </span></span><br><span class="line"><span class="javascript">        navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>, &#123;<span class="attr">scope</span>: <span class="string">'/'</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">registration</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 注册成功</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration successful with scope: '</span>, registration.scope);</span></span><br><span class="line"><span class="javascript">        &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;                   </span></span><br><span class="line"><span class="javascript">          <span class="comment">// 注册失败 :(</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration failed: '</span>, err);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注：<code>Service Worker</code>的注册路径决定了其 <code>scope</code>默认作用页面的范围。</li><li>如果 <code>service-worker.js</code>是在 <code>/sw/</code> 页面路径下，这使得该 <code>Service Worker</code> 默认只会收到 页面<code>/sw/</code> 路径下的 fetch 事件。</li><li>如果存放在网站的根路径下，则将会收到该网站的所有 <code>fetch</code>事件。</li><li>如果希望改变它的作用域，可在第二个参数设置 <code>scope</code> 范围。示例中将其改为了根目录，即对整个站点生效。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service-worker.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cacheName = <span class="string">'helloWorld'</span>;     <span class="comment">// 缓存的名称  </span></span><br><span class="line"><span class="comment">// install 事件，它发生在浏览器安装并注册 Service Worker 时        </span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, event =&gt; &#123; </span><br><span class="line"><span class="comment">/* event.waitUtil 用于在安装成功之前执行一些预装逻辑</span></span><br><span class="line"><span class="comment"> 但是建议只做一些轻量级和非常重要资源的缓存，减少安装失败的概率</span></span><br><span class="line"><span class="comment"> 安装成功后 ServiceWorker 状态会从 installing 变为 installed */</span></span><br><span class="line">  event.waitUntil(</span><br><span class="line">    caches.open(cacheName)                  </span><br><span class="line">    .then(<span class="function"><span class="params">cache</span> =&gt;</span> cache.addAll([    <span class="comment">// 如果所有的文件都成功缓存了，便会安装完成。如果任何文件下载失败了，那么安装过程也会随之失败。        </span></span><br><span class="line">      <span class="string">'/js/script.js'</span>,</span><br><span class="line">      <span class="string">'/images/hello.png'</span></span><br><span class="line">    ]))</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">为 fetch 事件添加一个事件监听器。接下来，使用 caches.match() 函数来检查传入的请求 URL 是否匹配当前缓存中存在的任何内容。如果存在的话，返回缓存的资源。</span></span><br><span class="line"><span class="comment">如果资源并不存在于缓存当中，通过网络来获取资源，并将获取到的资源添加到缓存中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    caches.match(event.request)                  </span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response) &#123;                            </span><br><span class="line">        <span class="keyword">return</span> response;                         </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> requestToCache = event.request.clone();  <span class="comment">//          </span></span><br><span class="line">      <span class="keyword">return</span> fetch(requestToCache).then(                   </span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!response || response.status !== <span class="number">200</span>) &#123;      </span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">var</span> responseToCache = response.clone();          </span><br><span class="line">          caches.open(cacheName)                           </span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">cache</span>) </span>&#123;</span><br><span class="line">              cache.put(requestToCache, responseToCache);  </span><br><span class="line">            &#125;);</span><br><span class="line">          <span class="keyword">return</span> response;             </span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注：为什么用<code>request.clone()</code>和<code>response.clone()</code><br>需要这么做是因为<code>request</code>和<code>response</code>是一个流，它只能消耗一次。因为我们已经通过缓存消耗了一次，然后发起 <code>HTTP</code> 请求还要再消耗一次，所以我们需要在此时克隆请求<br>Clone the request—a request is a stream and can only be consumed once</p></blockquote><h3 id="2-2-5-调试相关"><a href="#2-2-5-调试相关" class="headerlink" title="2.2.5 调试相关"></a>2.2.5 调试相关</h3><blockquote><p>chrome浏览器打开<code>https://googlechrome.github.io/samples/service-worker/basic/index.html</code>，这是一个实现了<code>service worker</code>离线缓存功能的网站，打开调试工具</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3242c3dc637a4bf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>勾选可以模拟网站离线情况，勾选后<code>network</code>会有一个黄色警告图标，该网站已经离线。此时刷新页面，页面仍然能够正常显示</li><li>当前<code>service worker</code>的<code>scope</code>。它能够拦截<code>https://googlechrome.github.i</code>…，同样也能够拦截<code>https://googlechrome.github.i.</code>..<em>/</em>.html下的请求</li></ul><blockquote><p>调试面板具体代表的什么参看 <code>https://x5.tencent.com/tbs/guide/serviceworker.html</code>的第三部分</p></blockquote><h2 id="2-3-serice-worker实现消息推送"><a href="#2-3-serice-worker实现消息推送" class="headerlink" title="2.3 serice worker实现消息推送"></a>2.3 serice worker实现消息推送</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-04b00dbdb25e9291.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>步骤一、提示用户并获得他们的订阅详细信息</li><li>步骤二、将这些详细信息保存在服务器上</li><li>步骤三、在需要时发送任何消息</li></ul><blockquote><p>不同浏览器需要用不同的推送消息服务器。以 Chrome 上使用 <code>Google Cloud Messaging&lt;GCM&gt;</code> 作为推送服务为例，第一步是注册 <code>applicationServerKey</code>(通过 GCM 注册获取)，并在页面上进行订阅或发起订阅。每一个会话会有一个独立的端点（<code>endpoint</code>），订阅对象的属性(<code>PushSubscription.endpoint</code>) 即为端点值。将端点发送给服务器后，服务器用这一值来发送消息给会话的激活的 Service Worker （通过 GCM 与浏览器客户端沟通</p></blockquote><p><strong>步骤一和步骤二</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Progressive Times<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"/manifest.json"</span>&gt;</span>                                      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> endpoint;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> key;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> authSecret;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> vapidPublicKey = <span class="string">'BAyb_WgaR0L0pODaR7wWkxJi__tWbM1MPBymyRDFEGjtDCWeRYS9EF7yGoCHLdHJi6hikYdg4MuYaK0XoD0qnoY'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 方法很复杂，但是可以不用具体看，知识用来转化vapidPublicKey用</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">urlBase64ToUint8Array</span>(<span class="params">base64String</span>) </span>&#123;                                  </span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> padding = <span class="string">'='</span>.repeat((<span class="number">4</span> - base64String.length % <span class="number">4</span>) % <span class="number">4</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> base64 = (base64String + padding)</span></span><br><span class="line"><span class="javascript">          .replace(<span class="regexp">/\-/g</span>, <span class="string">'+'</span>)</span></span><br><span class="line"><span class="javascript">          .replace(<span class="regexp">/_/g</span>, <span class="string">'/'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> rawData = <span class="built_in">window</span>.atob(base64);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> outputArray = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(rawData.length);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rawData.length; ++i) &#123;</span></span><br><span class="line"><span class="undefined">          outputArray[i] = rawData.charCodeAt(i);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> outputArray;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span></span><br><span class="line"><span class="javascript">        navigator.serviceWorker.register(<span class="string">'sw.js'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">registration</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> registration.pushManager.getSubscription()                            </span></span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">subscription</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span> (subscription) &#123;                                                      </span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> registration.pushManager.subscribe(&#123;                              </span></span><br><span class="line"><span class="javascript">                  userVisibleOnly: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                  applicationServerKey: urlBase64ToUint8Array(vapidPublicKey)</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span> (<span class="params">subscription</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> rawKey = subscription.getKey ? subscription.getKey(<span class="string">'p256dh'</span>) : <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">                  key = rawKey ? btoa(<span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(rawKey))) : <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> rawAuthSecret = subscription.getKey ? subscription.getKey(<span class="string">'auth'</span>) : <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined">                  authSecret = rawAuthSecret ?</span></span><br><span class="line"><span class="javascript">                    btoa(<span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(rawAuthSecret))) : <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined">                  endpoint = subscription.endpoint;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span> fetch(<span class="string">'./register'</span>, &#123;                                         </span></span><br><span class="line"><span class="javascript">                    method: <span class="string">'post'</span>,</span></span><br><span class="line"><span class="javascript">                    headers: <span class="keyword">new</span> Headers(&#123;</span></span><br><span class="line"><span class="javascript">                      <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span></span><br><span class="line"><span class="undefined">                    &#125;),</span></span><br><span class="line"><span class="javascript">                    body: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="undefined">                      endpoint: subscription.endpoint,</span></span><br><span class="line"><span class="undefined">                      key: key,</span></span><br><span class="line"><span class="undefined">                      authSecret: authSecret,</span></span><br><span class="line"><span class="undefined">                    &#125;),</span></span><br><span class="line"><span class="undefined">                  &#125;);</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 注册失败 :(</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration failed: '</span>, err);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>步骤三 服务器发送消息给service worker</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpush = <span class="built_in">require</span>(<span class="string">'web-push'</span>);                 </span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">webpush.setVapidDetails(                             </span><br><span class="line">  <span class="string">'mailto:contact@deanhume.com'</span>,</span><br><span class="line">  <span class="string">'BAyb_WgaR0L0pODaR7wWkxJi__tWbM1MPBymyRDFEGjtDCWeRYS9EF7yGoCHLdHJi6hikYdg4MuYaK0XoD0qnoY'</span>,</span><br><span class="line">  <span class="string">'p6YVD7t8HkABoez1CvVJ5bl7BnEdKUu5bSyVjyxMBh0'</span></span><br><span class="line">);</span><br><span class="line">app.post(<span class="string">'/register'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;           </span><br><span class="line">  <span class="keyword">var</span> endpoint = req.body.endpoint;</span><br><span class="line">  saveRegistrationDetails(endpoint, key, authSecret); </span><br><span class="line">  <span class="keyword">const</span> pushSubscription = &#123;                          </span><br><span class="line">    endpoint: req.body.endpoint,</span><br><span class="line">    keys: &#123;</span><br><span class="line">      auth: req.body.authSecret,</span><br><span class="line">      p256dh: req.body.key</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="string">'Thank you for registering'</span>;</span><br><span class="line">  <span class="keyword">var</span> iconUrl = <span class="string">'https://example.com/images/homescreen.png'</span>;</span><br><span class="line">  <span class="comment">// 发送 Web 推送消息</span></span><br><span class="line">  webpush.sendNotification(pushSubscription,          </span><br><span class="line">      <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        msg: body,</span><br><span class="line">        url: <span class="string">'http://localhost:3111/'</span>,</span><br><span class="line">        icon: iconUrl</span><br><span class="line">      &#125;))</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> res.sendStatus(<span class="number">201</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3111</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Web push app listening on port 3111!'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><code>service worker</code>监听push事件，将通知详情推送给用户</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service-worker.js</span></span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 检查服务端是否发来了任何有效载荷数据</span></span><br><span class="line">  <span class="keyword">var</span> payload = event.data ? <span class="built_in">JSON</span>.parse(event.data.text()) : <span class="string">'no payload'</span>;</span><br><span class="line">  <span class="keyword">var</span> title = <span class="string">'Progressive Times'</span>;</span><br><span class="line">  event.waitUntil(</span><br><span class="line">    <span class="comment">// 使用提供的信息来显示 Web 推送通知</span></span><br><span class="line">    self.registration.showNotification(title, &#123;                           </span><br><span class="line">      body: payload.msg,</span><br><span class="line">      url: payload.url,</span><br><span class="line">      icon: payload.icon</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h1><ul><li><a href="https://lzw.me/a/pwa-service-worker.html#3.3" target="_blank" rel="noopener">网站渐进式增强体验(PWA)改造：Service Worker 应用详解</a></li><li><a href="https://github.com/SangKa/PWA-Book-CN" target="_blank" rel="noopener">PWA实战：面向下一代的Progressive Web APP</a></li><li><a href="https://x5.tencent.com/tbs/guide/serviceworker.html" target="_blank" rel="noopener">Service Worker最佳实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、初识PWA&quot;&gt;&lt;a href=&quot;#一、初识PWA&quot; class=&quot;headerlink&quot; title=&quot;一、初识PWA&quot;&gt;&lt;/a&gt;一、初识PWA&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PWA&lt;/code&gt;，即&lt;code&gt;Progres
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="PWA" scheme="http://blog.poetries.top/tags/PWA/"/>
    
  </entry>
  
  <entry>
    <title>webpack4定制前端开发环境</title>
    <link href="http://blog.poetries.top/2018/09/04/webpack-custom-work-flow/"/>
    <id>http://blog.poetries.top/2018/09/04/webpack-custom-work-flow/</id>
    <published>2018-09-04T07:10:12.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源掘金小册笔记</p></blockquote><h1 id="一、webpack概念和基础使用"><a href="#一、webpack概念和基础使用" class="headerlink" title="一、webpack概念和基础使用"></a>一、webpack概念和基础使用</h1><h2 id="1-1-安装和使用"><a href="#1-1-安装和使用" class="headerlink" title="1.1 安装和使用"></a>1.1 安装和使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -g </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">yarn global add webpack webpack-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后就可以全局执行命令了</span></span><br><span class="line">webpack --help</span><br></pre></td></tr></table></figure><h2 id="1-2-webpack-的基本概念"><a href="#1-2-webpack-的基本概念" class="headerlink" title="1.2 webpack 的基本概念"></a>1.2 webpack 的基本概念</h2><blockquote><p>webpack 本质上是一个打包工具，它会根据代码的内容解析模块依赖，帮助我们把多个模块的代码打包</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-9bd38573bdc1456c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>webpack 会把我们项目中使用到的多个代码模块（可以是不同文件类型），打包构建成项目运行仅需要的几个静态文件</p></blockquote><p><strong>入口</strong></p><blockquote><p>入口可以使用 <code>entry</code>字段来进行配置，<code>webpack</code> 支持配置多个入口来进行构建</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述配置等同于</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'./src/index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者配置多个入口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    foo: <span class="string">'./src/page-foo.js'</span>,</span><br><span class="line">    bar: <span class="string">'./src/page-bar.js'</span>, </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用数组来对多个文件进行打包</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: [</span><br><span class="line">      <span class="string">'./src/foo.js'</span>,</span><br><span class="line">      <span class="string">'./src/bar.js'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><p><strong>loader</strong></p><blockquote><p>可以把 <code>loader</code>理解为是一个转换器，负责把某种文件格式的内容转换成 webpack 可以支持打包的模块</p></blockquote><ul><li>当我们需要使用不同的 <code>loader</code> 来解析处理不同类型的文件时，我们可以在 <code>module.rules</code> 字段下来配置相关的规则，例如使用 <code>Babel</code> 来处理 <code>.js</code> 文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.jsx?/</span>, <span class="comment">// 匹配文件路径的正则表达式，通常我们都是匹配文件类型后缀</span></span><br><span class="line">      include: [</span><br><span class="line">        path.resolve(__dirname, <span class="string">'src'</span>) <span class="comment">// 指定哪些路径下的文件需要经过 loader 处理</span></span><br><span class="line">      ],</span><br><span class="line">      use: <span class="string">'babel-loader'</span>, <span class="comment">// 指定使用的 loader</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><p><strong>plugin</strong></p><blockquote><p>模块代码转换的工作由 <code>loader</code> 来处理，除此之外的其他任何工作都可以交由 <code>plugin</code> 来完成。通过添加我们需要的 <code>plugin</code>，可以满足更多构建中特殊的需求。例如，要使用压缩 <code>JS</code>代码的 <code>uglifyjs-webpack-plugin</code> 插件，只需在配置中通过 <code>plugins</code>字段添加新的 <code>plugin</code>即可…</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> UglifyPlugin()</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>plugin</code> 理论上可以干涉 <code>webpack</code> 整个构建流程，可以在流程的每一个步骤中定制自己的构建需求</p></blockquote><p><strong>输出</strong></p><blockquote><p>构建结果的文件名、路径等都是可以配置的，使用 <code>output</code>字段</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者多个入口生成不同文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    foo: <span class="string">'./src/foo.js'</span>,</span><br><span class="line">    bar: <span class="string">'./src/bar.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径中使用 hash，每次构建时会有一个不同 hash 值，避免发布新版本时线上使用浏览器缓存</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: __dirname + <span class="string">'/dist/[hash]'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>我们一开始直接使用 <code>webpack</code> 构建时，默认创建的输出内容就是 <code>./dist/main.js</code></p></blockquote><p><strong>一个简单的 webpack 配置</strong></p><blockquote><p>我们把上述涉及的几部分配置内容合到一起，就可以创建一个简单的 <code>webpack</code> 配置了，<code>webpack</code> 运行时默认读取项目下的 <code>webpack.config.js</code> 文件作为配置。所以我们在项目中创建一个 <code>webpack.config.js</code> 文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> UglifyPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?/</span>,</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">        ],</span><br><span class="line">        use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代码模块路径解析的配置</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    modules: [</span><br><span class="line">      <span class="string">"node_modules"</span>,</span><br><span class="line">      path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    extensions: [<span class="string">".wasm"</span>, <span class="string">".mjs"</span>, <span class="string">".js"</span>, <span class="string">".json"</span>, <span class="string">".jsx"</span>],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> UglifyPlugin(), </span><br><span class="line">    <span class="comment">// 使用 uglifyjs-webpack-plugin 来压缩 JS 代码</span></span><br><span class="line">    <span class="comment">// 如果你留意了我们一开始直接使用 webpack 构建的结果，你会发现默认已经使用了 JS 代码压缩的插件</span></span><br><span class="line">    <span class="comment">// 这其实也是我们命令中的 --mode production 的效果，后续的小节会介绍 webpack 的 mode 参数</span></span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h1 id="二、搭建基础的前端开发环境"><a href="#二、搭建基础的前端开发环境" class="headerlink" title="二、搭建基础的前端开发环境"></a>二、搭建基础的前端开发环境</h1><h2 id="2-1-关联-HTML"><a href="#2-1-关联-HTML" class="headerlink" title="2.1 关联 HTML"></a>2.1 关联 HTML</h2><blockquote><p><code>webpack</code> 默认从作为入口的 <code>.js</code> 文件进行构建（更多是基于 <code>SPA</code> 去考虑），但通常一个前端项目都是从一个页面（即 HTML）出发的，最简单的方法是，创建一个 HTML 文件，使用 <code>script</code> 标签直接引用构建好的 JS 文件，如…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>但是，如果我们的文件名或者路径会变化，例如使用 <code>[hash]</code> 来进行命名，那么最好是将 <code>HTML</code> 引用路径和我们的构建结果关联起来，这个时候我们可以使用 <code>html-webpack-plugin</code></li><li><code>html-webpack-plugin</code> 是一个独立的 <code>node package</code>，所以在使用之前我们需要先安装它，把它安装到项目的开发依赖中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure><blockquote><p>然后在 <code>webpack</code>配置中，将 <code>html-webpack-plugin</code> 添加到 <code>plugins</code> 列表中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(),</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>这样配置好之后，构建时 <code>html-webpack-plugin</code> 会为我们创建一个 <code>HTML</code> 文件，其中会引用构建出来的 JS 文件。实际项目中，默认创建的 <code>HTML</code> 文件并没有什么用，我们需要自己来写 <code>HTML</code> 文件，可以通过 <code>html-webpack-plugin</code> 的配置，传递一个写好的 HTML 模板…</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 配置输出文件名和路径</span></span><br><span class="line">      template: <span class="string">'assets/index.html'</span>, <span class="comment">// 配置文件模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>这样，通过 <code>html-webpack-plugin</code> 就可以将我们的页面和构建 <code>JS</code> 关联起来，回归日常，从页面开始开发。如果需要添加多个页面关联，那么实例化多个 <code>html-webpack-plugin</code>， 并将它们都放到 <code>plugins</code> 字段数组中就可以了…</p></blockquote><h2 id="2-2-构建-CSS"><a href="#2-2-构建-CSS" class="headerlink" title="2.2 构建 CSS"></a>2.2 构建 CSS</h2><blockquote><p>我们编写 <code>CSS</code>，并且希望使用 <code>webpack</code> 来进行构建，为此，需要在配置中引入 <code>loader</code> 来解析和处理 <code>CSS</code> 文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css/</span>,</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">        ],</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><ul><li><code>css-loader</code> 负责解析 <code>CSS</code> 代码，主要是为了处理 <code>CSS</code> 中的依赖，例如 <code>@import</code> 和 <code>url()</code> 等引用外部文件的声明；</li><li><code>style-loader</code> 会将 <code>css-loader</code> 解析的结果转变成 <code>JS</code>代码，运行时动态插入 <code>style</code> 标签来让 <code>CSS</code> 代码生效…</li></ul><blockquote><p>经由上述两个 <code>loader</code> 的处理后，CSS 代码会转变为 JS，和 <code>index.js</code>一起打包了。如果需要单独把 CSS 文件分离出来，我们需要使用 <code>extract-text-webpack-plugin</code> 插件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader</span></span><br><span class="line">        use: ExtractTextPlugin.extract(&#123; </span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: <span class="string">'css-loader'</span>,</span><br><span class="line">        &#125;), </span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 引入插件，配置文件名，这里同样可以使用 [hash]</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'index.css'</span>),</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h2 id="2-3-CSS-预处理器"><a href="#2-3-CSS-预处理器" class="headerlink" title="2.3 CSS 预处理器"></a>2.3 CSS 预处理器</h2><blockquote><p>在上述使用 CSS 的基础上，通常我们会使用 <code>Less/Sass</code> 等 CSS 预处理器，webpack 可以通过添加对应的 <code>loader</code> 来支持，以使用 <code>Less</code> 为例，我们可以在官方文档中找到对应的 <code>loader</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader</span></span><br><span class="line">        use: ExtractTextPlugin.extract(&#123; </span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: [</span><br><span class="line">            <span class="string">'css-loader'</span>, </span><br><span class="line">            <span class="string">'less-loader'</span>,</span><br><span class="line">          ],</span><br><span class="line">        &#125;), </span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h2 id="2-4-处理图片文件"><a href="#2-4-处理图片文件" class="headerlink" title="2.4 处理图片文件"></a>2.4 处理图片文件</h2><blockquote><p>在前端项目的样式中总会使用到图片，虽然我们已经提到 <code>css-loader</code> 会解析样式中用 <code>url()</code> 引用的文件路径，但是图片对应的 <code>jpg/png/gif</code> 等文件格式，<code>webpack</code> 处理不了。是的，我们只要添加一个处理图片的 <code>loader</code> 配置就可以了，现有的 <code>file-loader</code> 就是个不错的选择…</p></blockquote><ul><li><code>file-loader</code> 可以用于处理很多类型的文件，它的主要作用是直接输出文件，把构建后的文件路径返回。配置很简单，在 <code>rules</code>中添加一个字段，增加图片类型文件的解析配置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;&#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h2 id="2-5-使用-Babel"><a href="#2-5-使用-Babel" class="headerlink" title="2.5 使用 Babel"></a>2.5 使用 Babel</h2><blockquote><p><code>Babel</code> 是一个让我们能够使用 <code>ES</code> 新特性的 <code>JS</code> 编译工具，我们可以在 <code>webpack</code> 中配置 Babel，以便使用 <code>ES6</code>、<code>ES7</code> 标准来编写 <code>JS</code>代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?/</span>, <span class="comment">// 支持 js 和 jsx</span></span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">'src'</span>), <span class="comment">// src 目录下的才需要经过 babel-loader 处理</span></span><br><span class="line">        ],</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h2 id="2-6-启动静态服务"><a href="#2-6-启动静态服务" class="headerlink" title="2.6 启动静态服务"></a>2.6 启动静态服务</h2><blockquote><p>至此，我们完成了处理多种文件类型的 webpack 配置。我们可以使用 <code>webpack-dev-server</code> 在本地开启一个简单的静态服务来进行开发</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --mode production"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack-dev-server --mode development"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>尝试着运行 <code>npm start</code> 或者 <code>yarn start</code>，然后就可以访问<code>http://localhost:8080/</code> 来查看你的页面了。默认是访问 <code>index.html</code>，如果是其他页面要注意访问的 URL 是否正确</p></blockquote><h2 id="2-7-完整示例代码"><a href="#2-7-完整示例代码" class="headerlink" title="2.7 完整示例代码"></a>2.7 完整示例代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?/</span>,</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">        ],</span><br><span class="line">        use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader</span></span><br><span class="line">        use: ExtractTextPlugin.extract(&#123; </span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: [</span><br><span class="line">            <span class="string">'css-loader'</span>, </span><br><span class="line">            <span class="string">'less-loader'</span>,</span><br><span class="line">          ],</span><br><span class="line">        &#125;), </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'file-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代码模块路径解析的配置</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    modules: [</span><br><span class="line">      <span class="string">"node_modules"</span>,</span><br><span class="line">      path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    extensions: [<span class="string">".wasm"</span>, <span class="string">".mjs"</span>, <span class="string">".js"</span>, <span class="string">".json"</span>, <span class="string">".jsx"</span>],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 配置输出文件名和路径</span></span><br><span class="line">      template: <span class="string">'src/index.html'</span>, <span class="comment">// 配置文件模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、webpack如何解析代码模块路径"><a href="#三、webpack如何解析代码模块路径" class="headerlink" title="三、webpack如何解析代码模块路径"></a>三、webpack如何解析代码模块路径</h1><blockquote><p>webpack 中有一个很关键的模块 <code>enhanced-resolve</code> 就是处理依赖模块路径的解析的，这个模块可以说是 Node.js 那一套模块路径解析的增强版本，有很多可以自定义的解析配置</p></blockquote><ul><li>在 webpack 配置中，和模块路径解析相关的配置都在 <code>resolve</code>字段下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-1-常用的一些配置"><a href="#3-1-常用的一些配置" class="headerlink" title="3.1 常用的一些配置"></a>3.1 常用的一些配置</h2><p><strong>resolve.alias</strong></p><blockquote><p>假设我们有个 <code>utils</code> 模块极其常用，经常编写相对路径很麻烦，希望可以直接 <code>import &#39;utils&#39;</code> 来引用，那么我们可以配置某个模块的别名，如</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">  utils: path.resolve(__dirname, <span class="string">'src/utils'</span>) <span class="comment">// 这里使用 path.resolve 和 __dirname 来获取绝对路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述的配置是模糊匹配，意味着只要模块路径中携带了 utils 就可以被替换掉，如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;utils/query.js&apos; // 等同于 import &apos;[项目绝对路径]/src/utils/query.js&apos;</span><br></pre></td></tr></table></figure><blockquote><p>如果需要进行精确匹配可以使用：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">  utils$: path.resolve(__dirname, <span class="string">'src/utils'</span>) <span class="comment">// 只会匹配 import 'utils'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>resolve.extensions</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extensions: [<span class="string">'.wasm'</span>, <span class="string">'.mjs'</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>],</span><br><span class="line"><span class="comment">// 这里的顺序代表匹配后缀的优先级，例如对于 index.js 和 index.jsx，会优先选择 index.js</span></span><br></pre></td></tr></table></figure><blockquote><p>这个配置的作用是和文件后缀名有关的,这个配置可以定义在进行模块路径解析时，webpack 会尝试帮你补全那些后缀名来进行查找</p></blockquote><h1 id="四、配置loader"><a href="#四、配置loader" class="headerlink" title="四、配置loader"></a>四、配置loader</h1><h2 id="4-1-loader-匹配规则"><a href="#4-1-loader-匹配规则" class="headerlink" title="4.1 loader 匹配规则"></a>4.1 loader 匹配规则</h2><blockquote><p>当我们需要配置 <code>loader</code> 时，都是在 <code>module.rules</code> 中添加新的配置项，在该字段中，每一项被视为一条匹配使用 <code>loader</code>的规则</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [ </span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?/</span>, <span class="comment">// 条件</span></span><br><span class="line">        include: [ </span><br><span class="line">          path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">        ], <span class="comment">// 条件</span></span><br><span class="line">        use: <span class="string">'babel-loader'</span>, <span class="comment">// 规则应用结果</span></span><br><span class="line">      &#125;, <span class="comment">// 一个 object 即一条规则</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p><code>loader</code> 的匹配规则中有两个最关键的因素：一个是匹配条件，一个是匹配规则后的应用</p></blockquote><h2 id="4-2-规则条件配置"><a href="#4-2-规则条件配置" class="headerlink" title="4.2 规则条件配置"></a>4.2 规则条件配置</h2><blockquote><p>大多数情况下，配置 <code>loader</code> 的匹配条件时，只要使用 <code>test</code> 字段就好了，很多时候都只需要匹配文件后缀名来决定使用什么 <code>loader</code>，但也不排除在某些特殊场景下，我们需要配置比较复杂的匹配条件。webpack 的规则提供了多种配置形式…</p></blockquote><ul><li><code>{ test: ... }</code> 匹配特定条件</li><li><code>{ include: ... }</code> 匹配特定路径</li><li><code>{ exclude: ... }</code>排除特定路径</li><li><code>{ and: [...] }</code>必须匹配数组中所有条件</li><li><code>{ or: [...] }</code>匹配数组中任意一个条件</li><li><code>{ not: [...] }</code> 排除匹配数组中所有条件…</li></ul><blockquote><p>上述的所谓条件的值可以是：</p></blockquote><ul><li>字符串：必须以提供的字符串开始，所以是字符串的话，这里我们需要提供绝对路径</li><li>正则表达式：调用正则的 <code>test</code> 方法来判断匹配</li><li>函数：<code>(path) =&gt; boolean</code>，返回 <code>true</code> 表示匹配</li><li>数组：至少包含一个条件的数组</li><li>对象：匹配所有属性值的条件…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.jsx?/</span>, <span class="comment">// 正则</span></span><br><span class="line">    include: [</span><br><span class="line">      path.resolve(__dirname, <span class="string">'src'</span>), <span class="comment">// 字符串，注意是绝对路径</span></span><br><span class="line">    ], <span class="comment">// 数组</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: &#123;</span><br><span class="line">      js: <span class="regexp">/\.js/</span>,</span><br><span class="line">      jsx: <span class="regexp">/\.jsx/</span>,</span><br><span class="line">    &#125;, <span class="comment">// 对象，不建议使用</span></span><br><span class="line">    not: [</span><br><span class="line">      (value) =&gt; &#123; <span class="comment">/* ... */</span> <span class="keyword">return</span> <span class="literal">true</span>; &#125;, <span class="comment">// 函数，通常需要高度自定义时才会使用</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">],...</span><br></pre></td></tr></table></figure><h2 id="4-3-使用-loader-配置"><a href="#4-3-使用-loader-配置" class="headerlink" title="4.3 使用 loader 配置"></a>4.3 使用 loader 配置</h2><blockquote><p><code>module.rules</code> 的匹配规则最重要的还是用于配置 <code>loader</code>，我们可以使用 <code>use</code> 字段</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.less/</span>,</span><br><span class="line">    use: [</span><br><span class="line">      <span class="string">'style-loader'</span>, <span class="comment">// 直接使用字符串表示 loader</span></span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          importLoaders: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;, <span class="comment">// 用对象表示 loader，可以传递 loader 配置等</span></span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="string">'less-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          noIeCompat: <span class="literal">true</span></span><br><span class="line">        &#125;, <span class="comment">// 传递 loader 配置</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">],...</span><br></pre></td></tr></table></figure><blockquote><p><code>use</code>字段可以是一个数组，也可以是一个字符串或者表示 <code>loader</code> 的对象。如果只需要一个 <code>loader</code>，也可以这样：<code>use: { loader: &#39;babel-loader&#39;</code>, <code>options: { ... } }</code></p></blockquote><h2 id="4-4-loader-应用顺序"><a href="#4-4-loader-应用顺序" class="headerlink" title="4.4 loader 应用顺序"></a>4.4 loader 应用顺序</h2><ul><li>对于上面的 <code>less</code> 规则配置，一个 <code>style.less</code> 文件会途径 <code>less-loader</code>、<code>css-loader</code>、<code>style-loader</code> 处理，成为一个可以打包的模块。</li><li><code>loader</code> 的应用顺序在配置多个 <code>loader</code> 一起工作时很重要，通常会使用在 CSS 配置上，除了 <code>style-loader</code> 和 <code>css-loader</code>，你可能还要配置 <code>less-loader</code>然后再加个 <code>postcss</code> 的 <code>autoprefixer</code> 等。</li><li>上述从后到前的顺序是在同一个 <code>rule</code> 中进行的，那如果多个 <code>rule</code> 匹配了同一个模块文件，<code>loader</code> 的应用顺序又是怎样的呢？看一份这样的配置…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    loader: <span class="string">"eslint-loader"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],...</span><br></pre></td></tr></table></figure><blockquote><p>这样无法法保证 <code>eslint-loader</code> 在 <code>babel-loader</code> 应用前执行。<code>webpack</code>在 r<code>ules</code> 中提供了一个 <code>enforce</code> 的字段来配置当前 <code>rule</code> 的 <code>loader</code> 类型，没配置的话是普通类型，我们可以配置 <code>pre</code>或<code>post</code>，分别对应前置类型或后置类型的 <code>loader</code>…</p></blockquote><ul><li>所有的 <code>loader</code> <strong>按照前置</strong> -&gt; <strong>行</strong>内 -&gt; <strong>普通</strong> -&gt; <strong>后置</strong>的顺序执行。所以当我们要确保 <code>eslint-loader</code> 在 <code>babel-loader</code> 之前执行时，可以如下添加 <code>enforce</code> 配置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    enforce: <span class="string">'pre'</span>, <span class="comment">// 指定为前置类型</span></span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    loader: <span class="string">"eslint-loader"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]...</span><br></pre></td></tr></table></figure><blockquote><p>当项目文件类型和应用的 <code>loader</code> 不是特别复杂的时候，通常建议把要应用的同一类型 <code>loader</code> 都写在同一个匹配规则中，这样更好维护和控制</p></blockquote><h2 id="4-5-完整代码"><a href="#4-5-完整代码" class="headerlink" title="4.5 完整代码"></a>4.5 完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index'</span>,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        enforce: <span class="string">'pre'</span>, <span class="comment">// 指定为前置类型</span></span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">"eslint-loader"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">        ],</span><br><span class="line">        use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: [</span><br><span class="line">            <span class="string">'css-loader'</span>,</span><br><span class="line">          ],</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: [</span><br><span class="line">            <span class="string">'css-loader'</span>,</span><br><span class="line">            <span class="string">'less-loader'</span>,</span><br><span class="line">          ],</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'file-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      utils: path.resolve(__dirname, <span class="string">'src/utils'</span>), <span class="comment">// 这里使用 path.resolve 和 __dirname 来获取绝对路径</span></span><br><span class="line">      log$: path.resolve(__dirname, <span class="string">'src/utils/log.js'</span>) <span class="comment">// 只匹配 log</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>, <span class="string">'.less'</span>],</span><br><span class="line">    modules: [</span><br><span class="line">      path.resolve(__dirname, <span class="string">'node_modules'</span>), <span class="comment">// 指定当前目录下的 node_modules 优先查找</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 配置输出文件名和路径</span></span><br><span class="line">      template: <span class="string">'src/index.html'</span>, <span class="comment">// 配置文件模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      TWO: <span class="string">'1+1'</span>,</span><br><span class="line">      CONSTANTS: &#123;</span><br><span class="line">        APP_VERSION: <span class="built_in">JSON</span>.stringify(<span class="string">'1.1.2'</span>), <span class="comment">// const CONSTANTS = &#123; APP_VERSION: '1.1.2' &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123; <span class="attr">from</span>: <span class="string">'src/assets/favicon.ico'</span>, <span class="attr">to</span>: <span class="string">'favicon.ico'</span>, &#125;, <span class="comment">// 顾名思义，from 配置来源，to 配置目标路径</span></span><br><span class="line">    ]),</span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      _: <span class="string">'lodash'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="string">'1234'</span>,</span><br><span class="line">    before(app)&#123;</span><br><span class="line">      app.get(<span class="string">'/api/test.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; <span class="comment">// 当访问 /some/path 路径时，返回自定义的 json 数据</span></span><br><span class="line">        res.json(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">'hello world'</span> &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、使用plugin"><a href="#五、使用plugin" class="headerlink" title="五、使用plugin"></a>五、使用plugin</h1><blockquote><p>更多的插件可以在这里查找：<a href="https://github.com/webpack-contrib/awesome-webpack#webpack-plugins" target="_blank" rel="noopener">plugins in awesome-webpack</a></p></blockquote><h2 id="5-1-DefinePlugin"><a href="#5-1-DefinePlugin" class="headerlink" title="5.1 DefinePlugin"></a>5.1 DefinePlugin</h2><blockquote><p><code>DefinePlugin</code> 是 <code>webpack</code> 内置的插件，可以使用 <code>webpack.DefinePlugin</code> 直接获取</p></blockquote><ul><li>这个插件用于创建一些在编译时可以配置的全局常量，这些常量的值我们可以在 <code>webpack</code> 的配置中去指定，例如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      PRODUCTION: <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>), <span class="comment">// const PRODUCTION = true</span></span><br><span class="line">      VERSION: <span class="built_in">JSON</span>.stringify(<span class="string">'5fa3b9'</span>), <span class="comment">// const VERSION = '5fa3b9'</span></span><br><span class="line">      BROWSER_SUPPORTS_HTML5: <span class="literal">true</span>, <span class="comment">// const BROWSER_SUPPORTS_HTML5 = 'true'</span></span><br><span class="line">      TWO: <span class="string">'1+1'</span>, <span class="comment">// const TWO = 1 + 1,</span></span><br><span class="line">      CONSTANTS: &#123;</span><br><span class="line">        APP_VERSION: <span class="built_in">JSON</span>.stringify(<span class="string">'1.1.2'</span>) <span class="comment">// const CONSTANTS = &#123; APP_VERSION: '1.1.2' &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>有了上面的配置，就可以在应用代码文件中，访问配置好的变量了，如：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Running App version "</span> + VERSION);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!BROWSER_SUPPORTS_HTML5) <span class="built_in">require</span>(<span class="string">"html5shiv"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面配置的注释已经简单说明了这些配置的效果，这里再简述一下整个配置规则。</p></blockquote><ul><li>如果配置的值是字符串，那么整个字符串会被当成代码片段来执行，其结果作为最终变量的值，如上面的 <code>&quot;1+1&quot;</code>，最后的结果是 <code>2</code></li><li>如果配置的值不是字符串，也不是一个对象字面量，那么该值会被转为一个字符串，如 <code>true</code>，最后的结果是 <code>&#39;true&#39;</code></li><li>如果配置的是一个对象字面量，那么该对象的所有 <code>key</code>会以同样的方式去定义</li><li>这样我们就可以理解为什么要使用 <code>JSON.stringify()</code> 了，因为 <code>JSON.stringify(true)</code> 的结果是 <code>&#39;true&#39;</code>，<code>JSON.stringify(&quot;5fa3b9&quot;)</code> 的结果是 <code>&quot;5fa3b9&quot;</code>。</li></ul><blockquote><p>社区中关于 <code>DefinePlugin</code> 使用得最多的方式是定义环境变量，例如 <code>PRODUCTION = true</code> 或者 <code>__DEV__ = true</code> 等。部分类库在开发环境时依赖这样的环境变量来给予开发者更多的开发调试反馈，例如 react 等。</p></blockquote><ul><li>建议使用 <code>process.env.NODE_ENV</code>: … 的方式来定义 <code>process.env.NODE_ENV</code>，而不是使用 <code>process: { env: { NODE_ENV: ... } }</code> 的方式，因为这样会覆盖掉 <code>process</code> 这个对象，可能会对其他代码造成影响…</li></ul><h2 id="5-2-copy-webpack-plugin"><a href="#5-2-copy-webpack-plugin" class="headerlink" title="5.2 copy-webpack-plugin"></a>5.2 copy-webpack-plugin</h2><blockquote><p>我们一般会把开发的所有源码和资源文件放在 <code>src/</code> 目录下，构建的时候产出一个 <code>build/</code> 目录，通常会直接拿 <code>build</code> 中的所有文件来发布。有些文件没经过 <code>webpack</code> 处理，但是我们希望它们也能出现在 <code>build</code> 目录下，这时就可以使用 <code>CopyWebpackPlugin</code> 来处理了…</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123; <span class="attr">from</span>: <span class="string">'src/file.txt'</span>, <span class="attr">to</span>: <span class="string">'build/file.txt'</span>, &#125;, <span class="comment">// 顾名思义，from 配置来源，to 配置目标路径</span></span><br><span class="line">      &#123; <span class="attr">from</span>: <span class="string">'src/*.ico'</span>, <span class="attr">to</span>: <span class="string">'build/*.ico'</span> &#125;, <span class="comment">// 配置项可以使用 glob</span></span><br><span class="line">      <span class="comment">// 可以配置很多项复制规则</span></span><br><span class="line">    ]),</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h2 id="5-3-extract-text-webpack-plugin"><a href="#5-3-extract-text-webpack-plugin" class="headerlink" title="5.3 extract-text-webpack-plugin"></a>5.3 extract-text-webpack-plugin</h2><blockquote><p>我们用它来把依赖的 <code>CSS</code> 分离出来成为单独的文件。这里再看一下使用 <code>extract-text-webpack-plugin</code> 的配置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader</span></span><br><span class="line">        use: ExtractTextPlugin.extract(&#123; </span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: <span class="string">'css-loader'</span>,</span><br><span class="line">        &#125;), </span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 引入插件，配置文件名，这里同样可以使用 [hash]</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'index.css'</span>),</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>在上述的配置中，我们使用了 <code>index.css</code> 作为单独分离出来的文件名，但有的时候构建入口不止一个，<code>extract-text-webpack-plugin</code> 会为每一个入口创建单独分离的文件，因此最好这样配置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样确保在使用多个构建入口时，生成不同名称的文件</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h1 id="六、更好使用webpack-dev-server"><a href="#六、更好使用webpack-dev-server" class="headerlink" title="六、更好使用webpack-dev-server"></a>六、更好使用webpack-dev-server</h1><blockquote><p><code>webpack-dev-server</code> 是 <code>webpack</code> 官方提供的一个工具，可以基于当前的 <code>webpack</code> 构建配置快速启动一个静态服务。当 <code>mode</code> 为 <code>development</code> 时，会具备 <code>hot reload</code> 的功能，即当源码文件变化时，会即时更新当前页面，以便你看到最新的效果…</p></blockquote><h2 id="6-1-基础使用"><a href="#6-1-基础使用" class="headerlink" title="6.1 基础使用"></a>6.1 基础使用</h2><blockquote><p><code>webpack-dev-server</code> 是一个 <code>npm package</code>，安装后在已经有 <code>webpack</code> 配置文件的项目目录下直接启动就可以</p></blockquote><ul><li><code>webpack-dev-server</code> 默认使用 <code>8080</code> 端口</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -g</span><br><span class="line">webpack-dev-server --mode development</span><br></pre></td></tr></table></figure><blockquote><p><code>package</code> 中的 <code>scripts</code> 配置：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server --mode development"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-配置"><a href="#6-2-配置" class="headerlink" title="6.2 配置"></a>6.2 配置</h2><blockquote><p>在 webpack 的配置中，可以通过 <code>devServer</code> 字段来配置 <code>webpack-dev-server</code>，如端口设置、启动 <code>gzip</code> 压缩等，这里简单讲解几个常用的配置</p></blockquote><ul><li><code>public</code>字段用于指定静态服务的域名，默认是 <code>http://localhost:8080/</code> ，当你使用 <code>Nginx</code> 来做反向代理时，应该就需要使用该配置来指定 <code>Nginx</code> 配置使用的服务域名</li><li><code>port</code> 字段用于指定静态服务的端口，如上，默认是 <code>8080</code>，通常情况下都不需要改动</li><li><code>publicPath</code> 字段用于指定构建好的静态文件在浏览器中用什么路径去访问，默认是 <code>/</code>，例如，对于一个构建好的文件 <code>bundle.js</code>，完整的访问路径是 <code>http://localhost:8080/bundle.js</code>，如果你配置了 <code>publicPath: &#39;assets/&#39;</code>，那么上述 <code>bundle.js</code> 的完整访问路径就是 <code>http://localhost:8080/assets/bundle.js</code>。可以使用整个 <code>URL</code> 来作为 <code>publicPath</code>的值，如 <code>publicPath: &#39;http://localhost:8080/assets/&#39;</code>。如果你使用了 <code>HMR</code>，那么要设置 <code>publicPath</code> 就必须使用完整的 <code>URL</code></li></ul><blockquote><p>建议将 <code>devServer.publicPath</code> 和 <code>output.publicPath</code> 的值保持一致</p></blockquote><ul><li><code>proxy</code>用于配置 <code>webpack-dev-server</code>将特定 <code>URL</code> 的请求代理到另外一台服务器上。当你有单独的后端开发服务器用于请求 API 时，这个配置相当有用。例如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">"http://localhost:3000"</span>, <span class="comment">// 将 URL 中带有 /api 的请求代理到本地的 3000 端口的服务上</span></span><br><span class="line">    pathRewrite: &#123; <span class="string">'^/api'</span>: <span class="string">''</span> &#125;, <span class="comment">// 把 URL 中 path 部分的 `api` 移除掉</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><ul><li><code>before</code> 和 <code>after</code> 配置用于在 <code>webpack-dev-server</code> 定义额外的中间件，如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before(app)&#123;</span><br><span class="line">  app.get(<span class="string">'/some/path'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; <span class="comment">// 当访问 /some/path 路径时，返回自定义的 json 数据</span></span><br><span class="line">    res.json(&#123; <span class="attr">custom</span>: <span class="string">'response'</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><ul><li><code>before</code> 在 <code>webpack-dev-server</code> 静态资源中间件处理之前，可以用于拦截部分请求返回特定内容，或者实现简单的数据 <code>mock</code>。</li><li><code>after</code> 在 <code>webpack-dev-server</code> 静态资源中间件处理之后，比较少用到，可以用于打印日志或者做一些额外处理…</li></ul><h1 id="七、开发和生产环境的构建配置差异"><a href="#七、开发和生产环境的构建配置差异" class="headerlink" title="七、开发和生产环境的构建配置差异"></a>七、开发和生产环境的构建配置差异</h1><ul><li>我们在日常的前端开发工作中，一般都会有两套构建环境：一套开发时使用，构建结果用于本地开发调试，不进行代码压缩，打印 <code>debug</code> 信息，包含<code>sourcemap</code> 文件</li><li>另外一套构建后的结果是直接应用于线上的，即代码都是压缩后，运行时不打印 <code>debug</code> 信息，静态文件不包括 <code>sourcemap</code> 的。有的时候可能还需要多一套测试环境，在运行时直接进行请求 <code>mock</code> 等工作</li><li><code>webpack 4.x</code> 版本引入了 <code>mode</code> 的概念，在运行 <code>webpack</code> 时需要指定使用 <code>production</code>或 <code>development</code> 两个 <code>mode</code> 其中一个，这个功能也就是我们所需要的运行两套构建环境的能力。</li></ul><h2 id="7-1-在配置文件中区分-mode"><a href="#7-1-在配置文件中区分-mode" class="headerlink" title="7.1 在配置文件中区分 mode"></a>7.1 在配置文件中区分 mode</h2><blockquote><p>之前我们的配置文件都是直接对外暴露一个 <code>JS</code> 对象，这种方式暂时没有办法获取到 <code>webpack</code> 的 <code>mode</code> 参数，我们需要更换一种方式来处理配置。根据官方的文档多种配置类型，配置文件可以对外暴露一个函数，因此我们可以这样做</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env, argv</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// ... 其他配置</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimize: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 使用 argv 来获取 mode 参数的值</span></span><br><span class="line">    minimizer: argv.mode === <span class="string">'production'</span> ? [</span><br><span class="line">      <span class="keyword">new</span> UglifyJsPlugin(&#123; <span class="comment">/* 你自己的配置 */</span> &#125;), </span><br><span class="line">      <span class="comment">// 仅在我们要自定义压缩配置时才需要这么做</span></span><br><span class="line">      <span class="comment">// mode 为 production 时 webpack 会默认使用压缩 JS 的 plugin</span></span><br><span class="line">    ] : [],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)...</span><br></pre></td></tr></table></figure><blockquote><p>这样获取 <code>mode</code> 之后，我们就能够区分不同的构建环境，然后根据不同环境再对特殊的 <code>loader</code>或<code>plugin</code> 做额外的配置就可以了</p></blockquote><ul><li>以上是 <code>webpack 4.x</code> 的做法，由于有了 <code>mode</code> 参数，区分环境变得简单了。不过在当前业界，估计还是使用 <code>webpack 3.x</code> 版本的居多，所以这里也简单介绍一下 <code>3.x</code> 如何区分环境</li></ul><blockquote><p><code>webpack</code> 的运行时环境是<code>Node.js</code>，我们可以通过 <code>Node.js</code>提供的机制给要运行的 <code>webpack</code> 程序传递环境变量，来控制不同环境下的构建行为。例如，我们在 <code>npm</code> 中的 <code>scripts</code> 字段添加一个用于生产环境的构建命令…</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack"</span>,</span><br><span class="line">    <span class="string">"develop"</span>: <span class="string">"NODE_ENV=development webpack-dev-server"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>然后在 <code>webpack.config.js</code> 文件中可以通过 <code>process.env.NODE_ENV</code> 来获取命令传入的环境变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ... webpack 配置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="comment">// 生产环境需要做的事情，如使用代码压缩插件等</span></span><br><span class="line">  config.plugins.push(<span class="keyword">new</span> UglifyJsPlugin())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config...</span><br></pre></td></tr></table></figure><h2 id="7-2-运行时的环境变量"><a href="#7-2-运行时的环境变量" class="headerlink" title="7.2 运行时的环境变量"></a>7.2 运行时的环境变量</h2><blockquote><p>我们使用 webpack 时传递的 mode 参数，是可以在我们的应用代码运行时，通过 <code>process.env.NODE_ENV</code> 这个变量获取的。这样方便我们在运行时判断当前执行的构建环境，使用最多的场景莫过于控制是否打印 <code>debug</code> 信息…</p></blockquote><ul><li>下面这个简单的例子，在应用开发的代码中实现一个简单的 <code>console</code>打印封装</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span> &amp;&amp; <span class="built_in">console</span> &amp;&amp; <span class="built_in">console</span>.log) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>同样，以上是 <code>webpack 4.x</code> 的做法，下面简单介绍一下 <code>3.x</code> 版本应该如何实现。这里需要用到 <code>DefinePlugin</code> 插件，它可以帮助我们在构建时给运行时定义变量，那么我们只要在前面 <code>webpack 3.x</code> 版本区分构建环境的例子的基础上，再使用 <code>DefinePlugin</code> 添加环境变量即可影响到运行时的代码…</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// webpack 的配置</span></span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="comment">// webpack 3.x 的 process.env.NODE_ENV 是通过手动在命令行中指定 NODE_ENV=... 的方式来传递的</span></span><br><span class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(process.env.NODE_ENV),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h2 id="7-3-常见的环境差异配置"><a href="#7-3-常见的环境差异配置" class="headerlink" title="7.3 常见的环境差异配置"></a>7.3 常见的环境差异配置</h2><p><strong>常见的 webpack 构建差异配置</strong></p><ul><li>生产环境可能需要分离 <code>CSS</code>成单独的文件，以便多个页面共享同一个 <code>CSS</code> 文件</li><li>生产环境需要压缩 <code>HTML/CSS/JS</code> 代码</li><li>生产环境需要压缩图片</li><li>开发环境需要生成 <code>sourcemap</code> 文件</li><li>开发环境需要打印 <code>debug</code> 信息</li><li>开发环境需要 <code>live reload</code>或者 <code>hot reload</code> 的功能…</li></ul><blockquote><p><code>webpack 4.x</code> 的 <code>mode</code> 已经提供了上述差异配置的大部分功能，<code>mode</code> 为 <code>production</code> 时默认使用 <code>JS</code> 代码压缩，而<code>mode</code> 为 <code>development</code> 时默认启用 <code>hot</code> <code>reload</code>，等等。这样让我们的配置更为简洁，我们只需要针对特别使用的 <code>loader</code> 和 <code>plugin</code> 做区分配置就可以了…</p></blockquote><ul><li><code>webpack 3.x</code> 版本还是只能自己动手修改配置来满足大部分环境差异需求，所以如果你要开始一个新的项目，建议直接使用 <code>webpack 4.x</code>版本</li></ul><h2 id="7-4-拆分配置"><a href="#7-4-拆分配置" class="headerlink" title="7.4 拆分配置"></a>7.4 拆分配置</h2><blockquote><p>前面我们列出了几个环境差异配置，可能这些构建需求就已经有点多了，会让整个 <code>webpack</code> 的配置变得复杂，尤其是有着大量环境变量判断的配置。我们可以把 <code>webpack</code> 的配置按照不同的环境拆分成多个文件，运行时直接根据环境变量加载对应的配置即可。基本的划分如下…</p></blockquote><ul><li><code>webpack.base.js</code>：基础部分，即多个文件中共享的配置</li><li><code>webpack.development.js</code>：开发环境使用的配置</li><li><code>webpack.production.js</code>：生产环境使用的配置</li><li><code>webpack.test.js</code>：测试环境使用的配置…</li></ul><p><strong>如何处理这样的配置拆分</strong></p><blockquote><p>首先我们要明白，对于 <code>webpack</code> 的配置，其实是对外暴露一个 <code>JS</code> 对象，所以对于这个对象，我们都可以用 <code>JS</code> 代码来修改它，例如</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ... webpack 配置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以修改这个 config 来调整配置，例如添加一个新的插件</span></span><br><span class="line">config.plugins.push(<span class="keyword">new</span> YourPlugin());</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;...</span><br></pre></td></tr></table></figure><blockquote><p>因此，只要有一个工具能比较智能地合并多个配置对象，我们就可以很轻松地拆分 webpack 配置，然后通过判断环境变量，使用工具将对应环境的多个配置对象整合后提供给 webpack 使用。这个工具就是 <code>webpack-merge</code></p></blockquote><ul><li>我们的 webpack 配置基础部分，即 <code>webpack.base.js</code> 应该大致是这样的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'...'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 这里是一个简单的例子，后面介绍 API 时会用到</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, </span><br><span class="line">        use: [<span class="string">'babel'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>然后 <code>webpack.development.js</code> 需要添加 <code>loader</code> 或 <code>plugin</code>，就可以使用 <code>webpack-merge</code>的 <code>API</code>，例如</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; smart &#125; = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.base.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = smart(base, &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// 用 smart API，当这里的匹配规则相同且 use 值都是数组时，smart 会识别后处理</span></span><br><span class="line">      <span class="comment">// 和上述 base 配置合并后，这里会是 &#123; test: /\.js$/, use: ['babel', 'coffee'] &#125;</span></span><br><span class="line">      <span class="comment">// 如果这里 use 的值用的是字符串或者对象的话，那么会替换掉原本的规则 use 的值</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [<span class="string">'coffee'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// plugins 这里的数组会和 base 中的 plugins 数组进行合并</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(process.env.NODE_ENV),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)...</span><br></pre></td></tr></table></figure><blockquote><p>可见 <code>webpack-merge</code> 提供的 <code>smart</code> 方法，可以帮助我们更加轻松地处理 <code>loader</code> 配置的合并。<code>webpack-merge</code> 还有其他 <code>API</code> 可以用于自定义合并行为 <a href="https://github.com/survivejs/webpack-merge" target="_blank" rel="noopener">https://github.com/survivejs/webpack-merge</a></p></blockquote><h2 id="7-5-完整代码"><a href="#7-5-完整代码" class="headerlink" title="7.5 完整代码"></a>7.5 完整代码</h2><blockquote><p><code>webpack.config.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">env, argv</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> argv.mode === <span class="string">'production'</span> ?</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./configs/webpack.production'</span>) :</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./configs/webpack.development'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>configs/webpack.base.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?/</span>,</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">        ],</span><br><span class="line">        use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'file-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 配置输出文件名和路径</span></span><br><span class="line">      template: <span class="string">'src/index.html'</span>, <span class="comment">// 配置文件模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>configs/webpack.development.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = merge.smart(baseConfig, &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">"eslint-loader"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="string">'less-loader'</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="string">'1234'</span>,</span><br><span class="line">    before(app)&#123;</span><br><span class="line">      app.get(<span class="string">'/api/test.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.json(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">'hello world'</span> &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">config.plugins.push(</span><br><span class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    __DEV__: <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>),</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure><blockquote><p><code>configs/webpack.production.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = merge.smart(baseConfig, &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'css-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                minimize: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'less-loader'</span>,</span><br><span class="line">          ],</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">config.plugins.push(<span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure><h1 id="八、模块热替换提高开发效率"><a href="#八、模块热替换提高开发效率" class="headerlink" title="八、模块热替换提高开发效率"></a>八、模块热替换提高开发效率</h1><blockquote><p><code>HMR</code> 全称是 <code>Hot Module Replacement</code>，即模块热替换。在这个概念出来之前，我们使用过 <code>Hot Reloading</code>，当代码变更时通知浏览器刷新页面，以避免频繁手动刷新浏览器页面。HMR 可以理解为增强版的 <code>Hot Reloading</code>，但不用整个页面刷新，而是局部替换掉部分模块代码并且使其生效，可以看到代码变更后的效果。所以，<code>HMR</code> 既避免了频繁手动刷新页面，也减少了页面刷新时的等待，可以极大地提高前端页面开发效率…</p></blockquote><h2 id="8-1-配置使用-HMR"><a href="#8-1-配置使用-HMR" class="headerlink" title="8.1 配置使用 HMR"></a>8.1 配置使用 HMR</h2><blockquote><p><code>HMR</code> 是 <code>webpack</code> 提供的非常有用的一个功能，跟我们之前提到的一样，安装好 <code>webpack-dev-server</code>， 添加一些简单的配置，即在<code>webpack</code> 的配置文件中添加启用<code>HMR</code>需要的两个插件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span> <span class="comment">// dev server 的配置要启动 hot，或者在命令行中带参数开启</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(), <span class="comment">// 用于启动 HMR 时可以显示模块的相对路径</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(), <span class="comment">// Hot Module Replacement 的插件</span></span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h2 id="8-2-module-hot-常见的-API"><a href="#8-2-module-hot-常见的-API" class="headerlink" title="8.2 module.hot 常见的 API"></a>8.2 module.hot 常见的 API</h2><blockquote><p>前面 <code>HMR</code>实现部分已经讲解了实现 HMR 接口的重要性，下面来看看常见的 <code>module.hot</code> <code>API</code> 有哪些，以及如何使用</p></blockquote><ul><li><code>module.hot.accept</code> 方法指定在应用特定代码模块更新时执行相应的 <code>callback</code>，第一个参数可以是字符串或者数组，如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept([<span class="string">'./bar.js'</span>, <span class="string">'./index.css'</span>], () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ... 这样当 bar.js 或者 index.css 更新时都会执行该函数</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><ul><li><code>module.hot.decline</code> 对于指定的代码模块，拒绝进行模块代码的更新，进入更新失败状态，如 <code>module.hot.decline(&#39;./bar.js&#39;)</code>。这个方法比较少用到</li><li><code>module.hot.dispose</code> 用于添加一个处理函数，在当前模块代码被替换时运行该函数，例如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.dispose(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// data 用于传递数据，如果有需要传递的数据可以挂在 data 对象上，然后在模块代码更新后可以通过 module.hot.data 来获取</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><ul><li><code>module.hot.accept</code> 通常用于指定当前依赖的某个模块更新时需要做的处理，如果是当前模块更新时需要处理的动作，使用 <code>module.hot.dispose</code> 会更加容易方便</li><li><code>module.hot.removeDisposeHandler</code>用于移除 <code>dispose</code> 方法添加的 <code>callback</code></li></ul><h1 id="九、图片加载优化"><a href="#九、图片加载优化" class="headerlink" title="九、图片加载优化"></a>九、图片加载优化</h1><h2 id="9-1-CSS-Sprites"><a href="#9-1-CSS-Sprites" class="headerlink" title="9.1 CSS Sprites"></a>9.1 CSS Sprites</h2><ul><li>如果你使用的 <code>webpack 3.x</code> 版本，需要 <code>CSS Sprites</code> 的话，可以使用 <code>webpack-spritesmith</code> 或者 <code>sprite-webpack-plugin</code>。</li><li>我们以 <code>webpack-spritesmith</code> 为例，先安装依赖…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  loaders: [</span><br><span class="line">    <span class="comment">// ... 这里需要有处理图片的 loader，如 file-loader</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">resolve: &#123;</span><br><span class="line">  modules: [</span><br><span class="line">    <span class="string">'node_modules'</span>, </span><br><span class="line">    <span class="string">'spritesmith-generated'</span>, <span class="comment">// webpack-spritesmith 生成所需文件的目录</span></span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> SpritesmithPlugin(&#123;</span><br><span class="line">    src: &#123;</span><br><span class="line">      cwd: path.resolve(__dirname, <span class="string">'src/ico'</span>), <span class="comment">// 多个图片所在的目录</span></span><br><span class="line">      glob: <span class="string">'*.png'</span> <span class="comment">// 匹配图片的路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">    target: &#123;</span><br><span class="line">      <span class="comment">// 生成最终图片的路径</span></span><br><span class="line">      image: path.resolve(__dirname, <span class="string">'src/spritesmith-generated/sprite.png'</span>), </span><br><span class="line">      <span class="comment">// 生成所需 SASS/LESS/Stylus mixins 代码，我们使用 Stylus 预处理器做例子</span></span><br><span class="line">      css: path.resolve(__dirname, <span class="string">'src/spritesmith-generated/sprite.styl'</span>), </span><br><span class="line">    &#125;,</span><br><span class="line">    apiOptions: &#123;</span><br><span class="line">      cssImageRef: <span class="string">"~sprite.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">],...</span><br></pre></td></tr></table></figure><blockquote><p>在你需要的样式代码中引入 <code>sprite.styl</code> 后调用需要的<code>mixins</code> 即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@import &apos;~sprite.styl&apos;</span><br><span class="line"></span><br><span class="line">.close-button</span><br><span class="line">    sprite($close)</span><br><span class="line">.open-button</span><br><span class="line">    sprite($open)</span><br></pre></td></tr></table></figure><blockquote><p>如果你使用的是 <code>webpack 4.x</code>，你需要配合使用 <code>postcss</code>和 <code>postcss-sprites</code>，才能实现 <code>CSS Sprites</code> 的相关构建</p></blockquote><h2 id="9-2-图片压缩"><a href="#9-2-图片压缩" class="headerlink" title="9.2 图片压缩"></a>9.2 图片压缩</h2><ul><li>在一般的项目中，图片资源会占前端资源的很大一部分，既然代码都进行压缩了，占大头的图片就更不用说了</li><li>我们之前提及使用<code>file-loader</code> 来处理图片文件，在此基础上，我们再添加一个 <code>image-webpack-loader</code>来压缩图片文件。简单的配置如下…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/.*\.(gif|png|jpe?g|svg|webp)$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;&#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'image-webpack-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              mozjpeg: &#123; <span class="comment">// 压缩 jpeg 的配置</span></span><br><span class="line">                progressive: <span class="literal">true</span>,</span><br><span class="line">                quality: <span class="number">65</span></span><br><span class="line">              &#125;,</span><br><span class="line">              optipng: &#123; <span class="comment">// 使用 imagemin-optipng 压缩 png，enable: false 为关闭</span></span><br><span class="line">                enabled: <span class="literal">false</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              pngquant: &#123; <span class="comment">// 使用 imagemin-pngquant 压缩 png</span></span><br><span class="line">                quality: <span class="string">'65-90'</span>,</span><br><span class="line">                speed: <span class="number">4</span></span><br><span class="line">              &#125;,</span><br><span class="line">              gifsicle: &#123; <span class="comment">// 压缩 gif 的配置</span></span><br><span class="line">                interlaced: <span class="literal">false</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              webp: &#123; <span class="comment">// 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式</span></span><br><span class="line">                quality: <span class="number">75</span></span><br><span class="line">              &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h2 id="9-3-使用-DataURL"><a href="#9-3-使用-DataURL" class="headerlink" title="9.3 使用 DataURL"></a>9.3 使用 DataURL</h2><blockquote><p>有的时候我们的项目中会有一些很小的图片，因为某些缘故并不想使用 <code>CSS Sprites</code> 的方式来处理（譬如小图片不多，因此引入 CSS Sprites 感觉麻烦），那么我们可以在 webpack 中使用 <code>url-loader</code> 来处理这些很小的图片…</p></blockquote><ul><li><code>url-loader</code> 和 <code>file-loader</code> 的功能类似，但是在处理文件的时候，可以通过配置指定一个大小，当文件小于这个配置值时，<code>url-loader</code> 会将其转换为一个 <code>base64</code> 编码的 <code>DataURL</code>，配置如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span>, <span class="comment">// 单位是 Byte，当文件小于 8KB 时作为 DataURL 处理</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h2 id="9-4-代码压缩"><a href="#9-4-代码压缩" class="headerlink" title="9.4 代码压缩"></a>9.4 代码压缩</h2><ul><li><code>webpack 4.x</code> 版本运行时，<code>mode</code> 为 <code>production</code> 即会启动压缩 <code>JS</code> 代码的插件，而对于 <code>webpack</code> <code>3.x</code>，使用压缩 <code>JS</code> 代码插件的方式也已经介绍过了。在生产环境中，压缩 <code>JS</code> 代码基本是一个必不可少的步骤，这样可以大大减小 <code>JavaScript</code> 的体积，相关内容这里不再赘述。</li><li>除了 JS 代码之外，我们一般还需要 HTML 和 CSS 文件，这两种文件也都是可以压缩的，虽然不像 JS 的压缩那么彻底（替换掉长变量等），只能移除空格换行等无用字符，但也能在一定程度上减小文件大小。在 webpack 中的配置使用也不是特别麻烦，所以我们通常也会使用。</li><li>对于 HTML 文件，之前介绍的 <code>html-webpack-plugin</code> 插件可以帮助我们生成需要的 HTML 并对其进行压缩…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 配置输出文件名和路径</span></span><br><span class="line">      template: <span class="string">'assets/index.html'</span>, <span class="comment">// 配置文件模板</span></span><br><span class="line">      minify: &#123; <span class="comment">// 压缩 HTML 的配置</span></span><br><span class="line">        minifyCSS: <span class="literal">true</span>, <span class="comment">// 压缩 HTML 中出现的 CSS 代码</span></span><br><span class="line">        minifyJS: <span class="literal">true</span> <span class="comment">// 压缩 HTML 中出现的 JS 代码</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><ul><li>如上，使用 <code>minify</code> 字段配置就可以使用 <code>HTML</code> 压缩，这个插件是使用 <code>html-minifier</code> 来实现<code>HTML</code> 代码压缩的，<code>minify</code>下的配置项直接透传给 <code>html-minifier</code>，配置项参考 <code>html-minifier</code> 文档即可。</li><li>对于 CSS 文件，我们之前介绍过用来处理 CSS 文件的 <code>css-loader</code>，也提供了压缩 CSS 代码的功能：…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css/</span>,</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">        ],</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              minimize: <span class="literal">true</span>, <span class="comment">// 使用 css 的压缩功能</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>css-loader</code> 的选项中配置 <code>minimize</code> 字段为 <code>true</code>来使用<code>CSS</code> 压缩代码的功能。<code>css-loader</code> 是使用 <code>cssnano</code>来压缩代码的，<code>minimize</code> 字段也可以配置为一个对象，来将相关配置传递给 <code>cssnano</code>…</p></blockquote><h1 id="十、分离代码文件"><a href="#十、分离代码文件" class="headerlink" title="十、分离代码文件"></a>十、分离代码文件</h1><ul><li>关于分离 CSS 文件这个主题，之前在介绍如何搭建基本的前端开发环境时有提及，在 <code>webpack</code> 中使用 <code>extract-text-webpack-plugin</code> 插件即可。</li><li>先简单解释一下为何要把 CSS 文件分离出来，而不是直接一起打包在 JS 中。最主要的原因是我们希望更好地利用缓存。</li><li>假设我们原本页面的静态资源都打包成一个 JS 文件，加载页面时虽然只需要加载一个 JS 文件，但是我们的代码一旦改变了，用户访问新的页面时就需要重新加载一个新的 JS 文件。有些情况下，我们只是单独修改了样式，这样也要重新加载整个应用的 JS 文件，相当不划算。</li><li>还有一种情况是我们有多个页面，它们都可以共用一部分样式（这是很常见的，CSS Reset、基础组件样式等基本都是跨页面通用），如果每个页面都单独打包一个 JS 文件，那么每次访问页面都会重复加载原本可以共享的那些 CSS 代码。如果分离开来，第二个页面就有了 CSS 文件的缓存，访问速度自然会加快。虽然对第一个页面来说多了一个请求，但是对随后的页面来说，缓存带来的速度提升相对更加可观…</li></ul><blockquote><p><code>3.x</code> 以前的版本是使用 <code>CommonsChunkPlugin</code> 来做代码分离的，而 <code>webpack 4.x</code> 则是把相关的功能包到了<code>optimize.splitChunks</code> 中，直接使用该配置就可以实现代码分离。</p></blockquote><h2 id="10-1-webpack-4-x-的-optimization"><a href="#10-1-webpack-4-x-的-optimization" class="headerlink" title="10.1 webpack 4.x 的 optimization"></a>10.1 webpack 4.x 的 optimization</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ... webpack 配置</span></span><br><span class="line"></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">"all"</span>, <span class="comment">// 所有的 chunks 代码公共的部分分离出来成为一个单独的文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>我们需要在 HTML 中引用两个构建出来的 JS 文件，并且 <code>commons.js</code> 需要在入口代码之前。下面是个简单的例子</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"commons.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"entry.bundle.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你使用了 <code>html-webpack-plugin</code>，那么对应需要的 JS 文件都会在 HTML 文件中正确引用，不用担心。如果没有使用，那么你需要从 <code>stats</code> 的 <code>entrypoints</code> 属性来获取入口应该引用哪些 JS 文件，可以参考 Node API 了解如何从 stats 中获取信息…</p></blockquote><p><strong>显式配置共享类库可以这么操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [<span class="string">"react"</span>, <span class="string">"lodash"</span>, <span class="string">"angular"</span>, ...], <span class="comment">// 指定公共使用的第三方类库</span></span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          chunks: <span class="string">"initial"</span>,</span><br><span class="line">          test: <span class="string">"vendor"</span>,</span><br><span class="line">          name: <span class="string">"vendor"</span>, <span class="comment">// 使用 vendor 入口作为公共部分</span></span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... 其他配置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          test: <span class="regexp">/react|angluar|lodash/</span>, <span class="comment">// 直接使用 test 来做路径匹配</span></span><br><span class="line">          chunks: <span class="string">"initial"</span>,</span><br><span class="line">          name: <span class="string">"vendor"</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          chunks: <span class="string">"initial"</span>,</span><br><span class="line">          test: path.resolve(__dirname, <span class="string">"node_modules"</span>) <span class="comment">// 路径在 node_modules 目录下的都作为公共部分</span></span><br><span class="line">          name: <span class="string">"vendor"</span>, <span class="comment">// 使用 vendor 入口作为公共部分</span></span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>上述第一种做法是显示指定哪些类库作为公共部分，第二种做法实现的功能差不多，只是利用了 test 来做模块路径的匹配，第三种做法是把所有在 node_modules 下的模块，即作为依赖安装的，都作为公共部分。你可以针对项目情况，选择最合适的做法..</p></blockquote><h2 id="10-2-webpack-3-x-的-CommonsChunkPlugin"><a href="#10-2-webpack-3-x-的-CommonsChunkPlugin" class="headerlink" title="10.2 webpack 3.x 的 CommonsChunkPlugin"></a>10.2 webpack 3.x 的 CommonsChunkPlugin</h2><blockquote><p><code>webpack 3.x</code>以下的版本需要用到 webpack 自身提供的 <code>CommonsChunkPlugin</code> 插件。我们先来看一个最简单的例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">"commons"</span>, <span class="comment">// 公共使用的 chunk 的名称</span></span><br><span class="line">      filename: <span class="string">"commons.js"</span>, <span class="comment">// 公共 chunk 的生成文件名</span></span><br><span class="line">      minChunks: <span class="number">3</span>, <span class="comment">// 公共的部分必须被 3 个 chunk 共享</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><ul><li><code>chunk</code> 在这里是构建的主干，可以简单理解为一个入口对应一个 <code>chunk</code>。</li><li>以上插件配置在构建后会生成一个 <code>commons.js</code> 文件，该文件就是代码中的公共部分。上面的配置中 <code>minChunks</code>字段为 3，该字段的意思是当一个模块被 3 个以上的 <code>chunk</code> 依赖时，这个模块就会被划分到 <code>commons chunk</code> 中去。单从这个配置的角度上讲，这种方式并没有 <code>4.x</code> 的 <code>chunks: &quot;all&quot;</code>那么方便。</li></ul><p><strong>CommonsChunkPlugin 也是支持显式配置共享类库的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [<span class="string">'react'</span>, <span class="string">'react-redux'</span>], <span class="comment">// 指定公共使用的第三方类库</span></span><br><span class="line">    app: <span class="string">'./src/entry'</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span> <span class="comment">// 使用 vendor 入口作为公共部分</span></span><br><span class="line">      filename: <span class="string">"vendor.js"</span>, </span><br><span class="line">      minChunks: <span class="literal">Infinity</span>, <span class="comment">// 这个配置会让 webpack 不再自动抽离公共模块</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>上述配置会生成一个名为 <code>vendor.js</code> 的共享代码文件，里面包含了 <code>React</code> 和<code>React-Redux</code> 库的代码，可以提供给多个不同的入口代码使用。这里的 <code>minChunks</code> 字段的配置，我们使用了 <code>Infinity</code>，可以理解为<code>webpack</code> 不自动抽离公共模块。如果这里和之前一样依旧设置为 3，那么被 3 个以上的<code>chunk</code>依赖的模块会和 <code>React</code>、<code>React-Redux</code> 一同打包进 <code>vendor</code>，这样就失去显式指定的意义了。</p></blockquote><blockquote><p><code>minChunks</code>其实还可以是一个函数，如：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">minChunks: <span class="function">(<span class="params"><span class="built_in">module</span>, count</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">module</span>, count);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>该函数在分析每一个依赖的时候会被调用，传入当前依赖模块的信息 <code>module</code>，以及已经被作为公共模块的数量 <code>count</code>，你可以在函数中针对每一个模块做更加精细化的控制。看一个简单的例子：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">minChunks: <span class="function">(<span class="params"><span class="built_in">module</span>, count</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.context &amp;&amp; <span class="built_in">module</span>.context.includes(<span class="string">"node_modules"</span>); </span><br><span class="line">  <span class="comment">// node_modules 目录下的模块都作为公共部分，效果就如同 webpack 4.x 中的 test: path.resolve(__dirname, "node_modules")</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>更多使用 <code>CommonsChunkPlugin</code>的配置参考官方文档 <code>commons-chunk-plugin</code>。</li></ul><h1 id="十一、进一步控制JS大小"><a href="#十一、进一步控制JS大小" class="headerlink" title="十一、进一步控制JS大小"></a>十一、进一步控制JS大小</h1><h2 id="11-1-按需加载模块"><a href="#11-1-按需加载模块" class="headerlink" title="11.1 按需加载模块"></a>11.1 按需加载模块</h2><blockquote><p>在 webpack 的构建环境中，要按需加载代码模块很简单，遵循 ES 标准的动态加载语法 <code>dynamic-import</code> 来编写代码即可，<code>webpack</code> 会自动处理使用该语法编写的模块</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import 作为一个方法使用，传入模块名即可，返回一个 promise 来获取模块暴露的对象</span></span><br><span class="line"><span class="comment">// 注释 webpackChunkName: "lodash" 可以用于指定 chunk 的名称，在输出文件时有用</span></span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "lodash" */</span> <span class="string">'lodash'</span>).then(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="built_in">console</span>.log(_.lash([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment">// 打印 3</span></span><br><span class="line">&#125;)...</span><br></pre></td></tr></table></figure><ul><li>注意一下，如果你使用了 <code>Babel</code> 的话，还需要 <code>Syntax Dynamic Import</code> 这个 <code>Babel</code> 插件来处理 <code>import()</code> 这种语法。</li><li>由于动态加载代码模块的语法依赖于 <code>promise</code>，对于低版本的浏览器，需要添加 <code>promise</code> 的 <code>polyfill</code> 后才能使用。</li><li>如上的代码，webpack 构建时会自动把 <code>lodash</code> 模块分离出来，并且在代码内部实现动态加载 <code>lodash</code> 的功能。动态加载代码时依赖于网络，其模块内容会异步返回，所以 import 方法是返回一个 <code>promise</code> 来获取动态加载的模块内容。</li><li><code>import</code> 后面的注释 <code>webpackChunkName: &quot;lodash&quot;</code> 用于告知 <code>webpack</code>所要动态加载模块的名称。我们在 webpack 配置中添加一个 <code>output.chunkFilename</code> 的配置…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">  filename: <span class="string">'[name].[hash:8].js'</span>,</span><br><span class="line">  chunkFilename: <span class="string">'[name].[hash:8].js'</span> <span class="comment">// 指定分离出来的代码文件的名称</span></span><br><span class="line">&#125;,...</span><br></pre></td></tr></table></figure><blockquote><p>这样就可以把分离出来的文件名称用 lodash 标识了，如下图：</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ae36b6816feed422.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>如果没有添加注释 <code>webpackChunkName: &quot;lodash&quot; 以及 output.chunkFilename</code> 配置，那么分离出来的文件名称会以简单数字的方式标识，不便于识别</p></blockquote><h2 id="11-2-以上完整示例代码"><a href="#11-2-以上完整示例代码" class="headerlink" title="11.2 以上完整示例代码"></a>11.2 以上完整示例代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?/</span>,</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">        ],</span><br><span class="line">        use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: [</span><br><span class="line">            <span class="string">'css-loader'</span>,</span><br><span class="line">            <span class="string">'postcss-loader'</span>,</span><br><span class="line">            <span class="string">'less-loader'</span>,</span><br><span class="line">          ],</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'image-webpack-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              mozjpeg: &#123; <span class="comment">// 压缩 jpeg 的配置</span></span><br><span class="line">                progressive: <span class="literal">true</span>,</span><br><span class="line">                quality: <span class="number">65</span></span><br><span class="line">              &#125;,</span><br><span class="line">              optipng: &#123; <span class="comment">// 使用 imagemin-optipng 压缩 png，enable: false 为关闭</span></span><br><span class="line">                enabled: <span class="literal">false</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              pngquant: &#123; <span class="comment">// 使用 imagemin-pngquant 压缩 png</span></span><br><span class="line">                quality: <span class="string">'65-90'</span>,</span><br><span class="line">                speed: <span class="number">4</span></span><br><span class="line">              &#125;,</span><br><span class="line">              gifsicle: &#123; <span class="comment">// 压缩 gif 的配置</span></span><br><span class="line">                interlaced: <span class="literal">false</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              webp: &#123; <span class="comment">// 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式</span></span><br><span class="line">                quality: <span class="number">75</span></span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          chunks: <span class="string">"initial"</span>,</span><br><span class="line">          test: path.resolve(__dirname, <span class="string">"node_modules"</span>), <span class="comment">// 路径在 node_modules 目录下的都作为公共部分</span></span><br><span class="line">          name: <span class="string">"vendor"</span>, <span class="comment">// 使用 vendor 入口作为公共部分</span></span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 配置输出文件名和路径</span></span><br><span class="line">      template: <span class="string">'src/index.html'</span>, <span class="comment">// 配置文件模板</span></span><br><span class="line">      minify: &#123; <span class="comment">// 压缩 HTML 的配置</span></span><br><span class="line">        minifyCSS: <span class="literal">true</span>, <span class="comment">// 压缩 HTML 中出现的 CSS 代码</span></span><br><span class="line">        minifyJS: <span class="literal">true</span>, <span class="comment">// 压缩 HTML 中出现的 JS 代码</span></span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>),</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源掘金小册笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、webpack概念和基础使用&quot;&gt;&lt;a href=&quot;#一、webpack概念和基础使用&quot; class=&quot;headerlink&quot; title=&quot;一、webpack概念和基础使用&quot;
      
    
    </summary>
    
      <category term="Build" scheme="http://blog.poetries.top/categories/Build/"/>
    
    
      <category term="webpack" scheme="http://blog.poetries.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Taro开发小程序体验</title>
    <link href="http://blog.poetries.top/2018/09/03/wx-taro/"/>
    <id>http://blog.poetries.top/2018/09/03/wx-taro/</id>
    <published>2018-09-03T11:30:43.000Z</published>
    <updated>2018-09-17T03:35:00.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、初识Taro"><a href="#一、初识Taro" class="headerlink" title="一、初识Taro"></a>一、初识Taro</h2><h3 id="1-1-优点"><a href="#1-1-优点" class="headerlink" title="1.1 优点"></a>1.1 优点</h3><blockquote><p>小程序中无法使用 <code>npm</code> 来进行第三方库的管理，无法使用一些比较新的 <code>ES</code> 规范等等，针对小程序端的开发弊端，<code>Taro</code> 具有以下的优秀特性</p></blockquote><ul><li>支持使用 <code>npm/yarn</code> 安装管理第三方依赖。</li><li>支持使用 <code>ES7/ES8</code> 甚至更加新的 <code>ES</code> 规范，一切都可自行配置</li><li>支持使用 <code>CSS</code> 预编译器，例如 <code>Sass</code> 等</li><li>支持使用 <code>Redux</code> 进行状态管理</li><li>小程序 <code>API</code> 优化，异步 <code>API Promise</code> 化等</li></ul><h3 id="1-2-快速开始"><a href="#1-2-快速开始" class="headerlink" title="1.2 快速开始"></a>1.2 快速开始</h3><blockquote><p>微信小程序编译预览模式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># npm script</span><br><span class="line">$ npm run dev:weapp</span><br><span class="line"># 仅限全局安装</span><br><span class="line">$ taro build --type weapp --watch</span><br><span class="line"># npx用户也可以使用</span><br><span class="line">$ npx taro build --type weapp --watch</span><br></pre></td></tr></table></figure><blockquote><p>H5 编译预览模式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># npm script</span><br><span class="line">$ npm run dev:h5</span><br><span class="line"># 仅限全局安装</span><br><span class="line">$ taro build --type h5 --watch</span><br><span class="line"># npx用户也可以使用</span><br><span class="line">$ npx taro build --type h5 --watch</span><br></pre></td></tr></table></figure><blockquote><p>RN 编译预览模式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># npm script</span><br><span class="line">$ npm run dev:rn</span><br><span class="line"># 仅限全局安装</span><br><span class="line">$ taro build --type rn --watch</span><br><span class="line"># npx用户也可以使用</span><br><span class="line">$ npx taro build --type rn --watch</span><br></pre></td></tr></table></figure><p><strong>目录结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── dist                   编译结果目录</span><br><span class="line">├── config                 配置目录</span><br><span class="line">|   ├── dev.js             开发时配置</span><br><span class="line">|   ├── index.js           默认配置</span><br><span class="line">|   └── prod.js            打包时配置</span><br><span class="line">├── src                    源码目录</span><br><span class="line">|   ├── pages              页面文件目录</span><br><span class="line">|   |   ├── index          index页面目录</span><br><span class="line">|   |   |   ├── index.js   index页面逻辑</span><br><span class="line">|   |   |   └── index.css  index页面样式</span><br><span class="line">|   ├── app.css            项目总通用样式</span><br><span class="line">|   └── app.js             项目入口文件</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><blockquote><p>进入项目目录开始开发，可以选择小程序预览模式，或者h5预览模式，若使用微信小程序预览模式，则需要自行下载并打开微信开发者工具，选择预览项目根目录</p></blockquote><p><strong>注意</strong></p><ul><li>需要设置关闭<code>ES6</code>转<code>ES5</code>功能，开启可能报错</li><li>需要设置关闭上传代码时样式自动补全，开启可能报错</li><li>需要设置关闭代码压缩上传，开启可能报错</li></ul><h3 id="1-3-语法风格"><a href="#1-3-语法风格" class="headerlink" title="1.3 语法风格"></a>1.3 语法风格</h3><blockquote><p>Taro 的语法规则基于 <code>React</code> 规范，它采用与 <code>React</code> 一致的组件化思想，组件生命周期与 <code>React</code> 保持一致，同时在书写体验上也尽量与 <code>React</code> 类似，支持使用 <code>JSX</code> 语法</p></blockquote><blockquote><p>一个普通的入口文件示例如下<code>app.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Taro, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@tarojs/taro'</span></span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">'./pages/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./app.scss'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 项目配置</span></span><br><span class="line">  config = &#123;</span><br><span class="line">    pages: [</span><br><span class="line">      <span class="string">'pages/index/index'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">window</span>: &#123;</span><br><span class="line">      backgroundTextStyle: <span class="string">'light'</span>,</span><br><span class="line">      navigationBarBackgroundColor: <span class="string">'#fff'</span>,</span><br><span class="line">      navigationBarTitleText: <span class="string">'WeChat'</span>,</span><br><span class="line">      navigationBarTextStyle: <span class="string">'black'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount () &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount () &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentDidShow () &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentDidHide () &#123;&#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Index /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、生命周期函数"><a href="#二、生命周期函数" class="headerlink" title="二、生命周期函数"></a>二、生命周期函数</h2><p><strong>App.js生命周期</strong></p><table><thead><tr><th>生命周期方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>componentWillMount</code></td><td>程序被载入</td><td>对应微信小程序<code>onLaunch</code></td></tr><tr><td><code>componentDidMount</code></td><td>程序被载入</td><td>对应微信小程序<code>onLaunch</code>，在<code>componentWillMount</code>之后执行</td></tr><tr><td><code>componentDidShow</code></td><td>程序展示出来</td><td>对应微信小程序<code>onShow</code></td></tr><tr><td><code>componentDidHide</code></td><td>程序被隐藏</td><td>对应微信小程序onHide</td></tr></tbody></table><blockquote><p>不过当然也包含<code>componentWillUnmout</code>和<code>componentWillReceiveProps</code>等<code>react</code>原始生命周期函数，用来编写自定义组件</p></blockquote><p><strong>页面生命周期</strong></p><table><thead><tr><th>生命周期方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>componentWillMount</code></td><td>页面被载入</td><td>在微信小程序中这一生命周期方法对应 <code>onLoad</code></td></tr><tr><td><code>componentDidMount</code></td><td>页面渲染完成</td><td>在微信小程序中这一生命周期方法对应 <code>onReady</code></td></tr><tr><td><code>shouldComponentUpdate</code></td><td>页面是否需要更新</td><td></td></tr><tr><td><code>componentWillUpdate</code></td><td>页面即将更新</td><td></td></tr><tr><td><code>componentDidUpdate</code></td><td>页面更新完毕</td><td></td></tr><tr><td><code>componentWillUnmount</code></td><td>页面退出</td><td>在微信小程序中这一生命周期方法对应 <code>onUnload</code></td></tr><tr><td><code>componentDidShow</code></td><td>页面展示出来</td><td>在微信小程序中这一生命周期方法对应<code>onShow</code>，在<code>H5</code>中同样实现</td></tr><tr><td><code>componentDidHide</code></td><td>页面被隐藏</td><td>在微信小程序中这一生命周期方法对应 <code>onHide</code>，在<code>H5</code>中同样实现</td></tr></tbody></table><blockquote><p>微信小程序中 <code>onLoad</code> 通常带有一个参数 <code>options</code>，在 <code>Taro</code> 中你可以在所有生命周期方法中通过 <code>this.$router.params</code>访问到，在其他端也适用</p></blockquote><h2 id="三、路由"><a href="#三、路由" class="headerlink" title="三、路由"></a>三、路由</h2><blockquote><p>我们只需要在入口文件的 <code>config</code>配置中指定好 <code>pages</code>，然后就可以在代码中通过<code>Taro</code> 提供的 API 来跳转到目的页面，例如</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转到目的页面，打开新页面</span></span><br><span class="line">Taro.navigateTo(&#123;</span><br><span class="line">  url: <span class="string">'/pages/page/path/name'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到目的页面，在当前页面打开</span></span><br><span class="line">Taro.redirectTo(&#123;</span><br><span class="line">  url: <span class="string">'/pages/page/path/name'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>传参</strong></p><blockquote><p>我们可以通过在所有跳转的 url 后面添加查询字符串参数进行跳转传参，例如</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入参数 id=2&amp;type=test</span></span><br><span class="line">Taro.navigateTo(&#123;</span><br><span class="line">  url: <span class="string">'/pages/page/path/name?id=2&amp;type=test'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这样的话，在跳转成功的目标页的生命周期方法里就能通过 <code>this.$router.params</code> 获取到传入的参数，例如上述跳转，在目标页的 <code>componentWillMount</code> 生命周期里获取入参</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Taro</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentWillMount () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$router.params) <span class="comment">// 输出 &#123; id: 2, type: 'test' &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、专属的方法"><a href="#四、专属的方法" class="headerlink" title="四、专属的方法"></a>四、专属的方法</h2><blockquote><p>在小程序中，页面还有在一些专属的方法成员，如下</p></blockquote><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>onPullDownRefresh</code></td><td>页面相关事件处理函数–监听用户下拉动作</td></tr><tr><td><code>onReachBottom</code></td><td>页面上拉触底事件的处理函数</td></tr><tr><td><code>onShareAppMessage</code></td><td>用户点击右上角转发</td></tr><tr><td><code>onPageScroll</code></td><td>页面滚动触发事件的处理函数</td></tr><tr><td><code>onTabItemTap</code></td><td>当前是 tab 页时，点击 <code>tab</code> 时触发</td></tr></tbody></table><blockquote><p>以上成员方案在 <code>Taro</code> 的页面中同样可以使用，书写同名方法即可，不过需要注意的，目前暂时只有微信小程序端支持这些方法，编译到H5端后这些方法均会失效</p></blockquote><h2 id="五、更多参考"><a href="#五、更多参考" class="headerlink" title="五、更多参考"></a>五、更多参考</h2><ul><li><a href="https://nervjs.github.io/taro/" target="_blank" rel="noopener">Taro文档</a></li><li><a href="https://taro-ui.aotu.io/#/" target="_blank" rel="noopener">Taro-UI</a></li><li><a href="https://baijiahao.baidu.com/s?id=1603297934363840853&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">一文看懂，支撑京东核心业务小程序的统一开发框架「Taro」</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、初识Taro&quot;&gt;&lt;a href=&quot;#一、初识Taro&quot; class=&quot;headerlink&quot; title=&quot;一、初识Taro&quot;&gt;&lt;/a&gt;一、初识Taro&lt;/h2&gt;&lt;h3 id=&quot;1-1-优点&quot;&gt;&lt;a href=&quot;#1-1-优点&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="Taro" scheme="http://blog.poetries.top/tags/Taro/"/>
    
  </entry>
  
  <entry>
    <title>初识MobX</title>
    <link href="http://blog.poetries.top/2018/08/31/acq-mobx/"/>
    <id>http://blog.poetries.top/2018/08/31/acq-mobx/</id>
    <published>2018-08-31T08:25:24.000Z</published>
    <updated>2018-09-17T03:35:00.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、认识MobX"><a href="#一、认识MobX" class="headerlink" title="一、认识MobX"></a>一、认识MobX</h2><blockquote><p>打印<code>mobx</code>，看看<code>mobx</code>中有什么</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-dab61a98feb75db1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mobx"></p><blockquote><p><code>MobX</code>的整个流程</p></blockquote><p><img src="https://camo.githubusercontent.com/20705ede0bf83c38a187bd911ed417db69701237/687474703a2f2f636e2e6d6f62782e6a732e6f72672f666c6f772e706e67" alt=""></p><p><strong>MobX 和 Redux 的比较</strong></p><ul><li><code>Redux</code> 是单一数据源，而 <code>MobX</code> 往往是多个 <code>store</code>。<code>MobX</code> 可以根据应用的 <code>UI</code>、数据或业务逻辑来组织 <code>store</code>，具体如何进行需要你自己进行权衡</li><li><code>Redux store</code> 使用普通的 <code>JavaScript</code> 对象结构，<code>MobX</code> 将常规 <code>JavaScript</code> 对象包裹，赋予 <code>observable</code> 的能力，通过隐式订阅，自动跟踪 <code>observable</code> 的变化。<code>MobX</code> 是观察引用的，在跟踪函数中（例如：<code>computed value</code>、<code>reactions</code>等等），任何被引用的 <code>observable</code> 的属性都会被记录，一旦引用改变，<code>MobX</code> 将作出反应。注意，不在跟踪函数中的属性将不会被跟踪，在异步中访问的属性也不会被跟踪</li><li><code>Redux</code> 的 <code>state</code> 是只读的，只能通过将之前的 <code>state</code> 与触发的 <code>action</code> 结合，产生新的 <code>state</code>，因此是纯净的（<code>pure</code>）。而 <code>MobX</code> 的 <code>state</code> 即可读又可写，<code>action</code> 是非必须的，可以直接赋值改变，因此是不纯净的（Impure）</li><li><code>Redux</code> 需要你去规范化你的 <code>state</code>，<code>Immutable</code> 数据使 <code>Reducer</code> 在更新时需要将状态树的祖先数据进行复制和更新，新的对象会导致与之 <code>connect</code>的所有 <code>UI</code> 组件都重复渲染。因此<code>Redux state</code> 不建议进行深层嵌套，或者需要我们在组件中用 <code>shouldComponentUpdate</code> 优化。而 <code>MobX</code> 只自动更新你所关心的，不必担心嵌套带来的重渲染问题</li></ul><blockquote><p><code>redux</code> 管理的是 (<code>STORE</code> -&gt; <code>VIEW</code> -&gt; <code>ACTION</code>) 的整个闭环，而 <code>mobx</code> 只关心 <code>STORE</code> -&gt; <code>VIEW</code> 的部分</p></blockquote><p><strong>优点</strong></p><ul><li><strong>基于运行时的数据订阅</strong> <code>mobx</code> 的数据依赖始终保持了最小，而且还是基于运行时。而如果用 <code>redux</code>，可能一不小心就多订阅或者少订阅了数据。所以为了达到高性能，我们需要借助 <code>PureRenderMixin</code> 以及 <code>reselect</code> 对 <code>selector</code> 做缓存</li><li><strong>通过 OOP 的方式组织领域模型 (domain model)</strong>  <code>OOP</code> 的方式在某些场景下会比较方便，尤其是容易抽取 <code>domain model</code> 的时候。进而由于 <code>mobx</code> 支持引用的方式引用数据，所以可以非常容易得形成模型图 (model graph )，这样可以更好地理解我们的应用。</li><li><strong>修改数据方便自然</strong>  <code>mobx</code> 是基于原生的 <code>JavaScript</code> 对象、数组和 <code>Class</code>实现的。所以修改数据不需要额外语法成本，也不需要始终返回一个新的数据，而是直接操作数据</li></ul><p><strong>缺点</strong></p><ul><li><strong>缺最佳实践和社区</strong>  mobx 比较新，遇到的问题可能社区都没有遇到过。并且，mobx 并没有很好的扩展/插件机制</li><li><strong>随意修改 store</strong> 我们都知道 redux 里唯一可以改数据的地方是 reducer，这样可以保证应用的安全稳定；而 mobx 可以随意修改数据，触发更新，给人一种不安全的感觉<ul><li>最新的<code>mobx 2.2</code> 加入了 <code>action</code> 的支持。并且在开启 <code>strict mode</code> 之后，就只有 <code>action</code> 可以对数据进行修改，限制数据的修改入口。可以解决这个问题</li></ul></li><li><strong>逻辑层的限制</strong><ul><li>如果更新逻辑不能很好地封装在 <code>domain class</code> 里，用 <code>redux</code> 会更合适。另外，<code>mobx</code>缺类 <code>redux-saga</code> 的库，业务逻辑的整合不知道放哪合适</li></ul></li></ul><h2 id="二、核心API"><a href="#二、核心API" class="headerlink" title="二、核心API"></a>二、核心API</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-25b582583cf82dc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-1-observable"><a href="#2-1-observable" class="headerlink" title="2.1 @observable"></a>2.1 @observable</h3><blockquote><p><code>Observable</code> 值可以是JS基本数据类型、引用类型、普通对象、类实例、数组和映射。其修饰的state会暴露出来供观察者使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observable 值可以是JS基本数据类型、引用类型、普通对象、类实例、数组和映射</span></span><br><span class="line">@observable title = <span class="string">'this is about page'</span></span><br><span class="line">@observable num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算值(computed values)是可以根据现有的状态或其它计算值衍生出的值</span></span><br><span class="line">@computed get getUserInfo()&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">`我是computed经过计算的getter,currenct num:<span class="subst">$&#123;<span class="keyword">this</span>.num&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意：当你使用装饰器模式时，@action 中的 this 没有绑定在当前这个实例上，要用过 @action.bound 来绑定 使得 this 绑定在实例对象上</span></span><br><span class="line">@action.bound add()&#123;</span><br><span class="line">    <span class="keyword">this</span>.num ++</span><br><span class="line">&#125;</span><br><span class="line">@action.bound reduce()&#123;</span><br><span class="line">    <span class="keyword">this</span>.num --</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-observer"><a href="#2-2-observer" class="headerlink" title="2.2 observer"></a>2.2 observer</h3><blockquote><p>可以用作包裹 <code>React</code> 组件的高阶组件。 在组件的 <code>render</code> 函数中的任何已使用的 <code>observable</code> 发生变化时，组件都会自动重新渲染。 注意 <code>observer</code> 是由 <code>&quot;mobx-react&quot;</code> 包提供的，而不是 <code>mobx</code> 本身</p></blockquote><ul><li><code>@Observer</code> 是一个注解，本质上是用 <code>mobx.autorun</code> 包装了组件的 <code>render</code> 函数以确保任何组件渲染中使用的数据变化时都可以强制刷新组件</li></ul><h3 id="2-3-computed"><a href="#2-3-computed" class="headerlink" title="2.3 @computed"></a>2.3 @computed</h3><ul><li>计算值(<code>computed values</code>)是可以根据现有的状态或其它计算值衍生出的值</li><li>用于获取由基础 <code>state</code>衍生出来的值。如果基础值没有变，获取衍生值时就会走缓存，这样就不会引起虚拟 DOM 的重新渲染</li></ul><blockquote><ul><li><code>getter</code>：获得计算得到的新<code>state</code>并返回。</li><li><code>setter</code>： 不能用来直接改变计算属性的值，但是它们可以用来作“逆向”衍生。</li></ul></blockquote><blockquote><p>通过 <code>@computed + getter</code>函数来定义衍生值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    @observable length = <span class="number">2</span>;</span><br><span class="line">    @computed get squared() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    set squared(value) &#123; <span class="comment">// 这是一个自动的动作，不需要注解</span></span><br><span class="line">        <span class="keyword">this</span>.length = <span class="built_in">Math</span>.sqrt(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-actions"><a href="#2-4-actions" class="headerlink" title="2.4 @actions"></a>2.4 @actions</h3><blockquote><ul><li>只有在 <code>actions</code> 中，才可以修改 <code>Mobx</code> 中 <code>state</code> 的值</li><li>注意：当你使用装饰器模式时，<code>@action</code> 中的 <code>this</code> 没有绑定在当前这个实例上，要用过 <a href="mailto:`@action.bound" target="_blank" rel="noopener">`@action.bound</a><code>来绑定 使得</code>this` 绑定在实例对象上</li></ul></blockquote><ul><li>通过引入 <code>mobx</code> 定义的严格模式，强制使用 <code>action</code> 来修改状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;configure&#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line">configure(&#123; <span class="attr">enforceActions</span>: <span class="string">'always'</span> &#125;) <span class="comment">// 开启严格模式</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@action.bound add()&#123;</span><br><span class="line">    <span class="keyword">this</span>.num ++</span><br><span class="line">&#125;</span><br><span class="line">@action.bound reduce()&#123;</span><br><span class="line">    <span class="keyword">this</span>.num --</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-autorun"><a href="#2-5-autorun" class="headerlink" title="2.5 autorun"></a>2.5 autorun</h3><ul><li>当可观察对象中保存的值发生变化时，可以在<code>mobx.autorun</code>中被观察到。<code>observable</code> 的值初始化或改变时，自动运行</li><li>如果你想响应式的产生一个可以被其它 <code>observer</code> 使用的值，请使用 <code>@computed</code>，如果你不想产生一个新值，而想要达到一个效果，请使用 <code>autorun</code>。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用</li></ul><h3 id="2-6-reactions"><a href="#2-6-reactions" class="headerlink" title="2.6 reactions"></a>2.6 reactions</h3><blockquote><p><code>Reactions</code>和计算值很像，但它不是产生一个新的值，而是会产生一些副作用，比如打印到控制台、网络请求、递增地更新 <code>React</code>组件树以修补<code>DOM</code>、等等。 简而言之，<code>reactions</code> 在 响应式编程和命令式编程之间建立沟通的桥梁</p></blockquote><h3 id="2-7-Flow"><a href="#2-7-Flow" class="headerlink" title="2.7 Flow"></a>2.7 Flow</h3><blockquote><p>用法: <code>flow(function* (args) { })</code></p></blockquote><ul><li><code>flow()</code> 接收 <code>generator</code> 函数作为它唯一的输入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许在动作外部修改状态</span></span><br><span class="line">configure(&#123; <span class="attr">enforceActions</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable githubProjects = [];</span><br><span class="line">    @observable state = <span class="string">"pending"</span>; <span class="comment">// "pending" / "done" / "error"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fetchProjects = flow(<span class="function"><span class="keyword">function</span>* <span class="title">fetchProjects</span>(<span class="params"></span>) </span>&#123; <span class="comment">// &lt;- 注意*号，这是生成器函数！</span></span><br><span class="line">        <span class="keyword">this</span>.githubProjects = [];</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">"pending"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> projects = <span class="keyword">yield</span> fetchGithubProjectsSomehow(); <span class="comment">// 用 yield 代替 await</span></span><br><span class="line">            <span class="keyword">const</span> filteredProjects = somePreprocessing(projects);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步代码自动会被 `action` 包装</span></span><br><span class="line">            <span class="keyword">this</span>.state = <span class="string">"done"</span>;</span><br><span class="line">            <span class="keyword">this</span>.githubProjects = filteredProjects;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="keyword">this</span>.state = <span class="string">"error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、计数器例子"><a href="#三、计数器例子" class="headerlink" title="三、计数器例子"></a>三、计数器例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;<span class="comment">//结合react</span></span><br><span class="line"><span class="keyword">import</span> &#123; observable, autorun,computed &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据store</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  @observable number = <span class="number">0</span>;</span><br><span class="line">  @computed get msg() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'number:'</span> + <span class="keyword">this</span>.number</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 用action改变数据，避免混乱</span></span><br><span class="line">  @action increment()&#123;</span><br><span class="line">    <span class="keyword">this</span>.number ++</span><br><span class="line">  &#125;</span><br><span class="line">  @action decrement: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.number --</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = <span class="keyword">new</span> Counter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把属性注入react组件</span></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123; store.msg &#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleInc&#125;</span>&gt;</span> + <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleDec&#125;</span>&gt;</span> - <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleInc() &#123;</span><br><span class="line">    store.increment();</span><br><span class="line">  &#125;</span><br><span class="line">  handleDec() &#123;</span><br><span class="line">    store.decrement();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><h2 id="四、应用案例"><a href="#四、应用案例" class="headerlink" title="四、应用案例"></a>四、应用案例</h2><blockquote><p><a href="https://github.com/poetries/react-mobx-template" target="_blank" rel="noopener">https://github.com/poetries/react-mobx-template</a></p></blockquote><h2 id="五、参考"><a href="#五、参考" class="headerlink" title="五、参考"></a>五、参考</h2><blockquote><p>文档学习 <a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">https://cn.mobx.js.org/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、认识MobX&quot;&gt;&lt;a href=&quot;#一、认识MobX&quot; class=&quot;headerlink&quot; title=&quot;一、认识MobX&quot;&gt;&lt;/a&gt;一、认识MobX&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;打印&lt;code&gt;mobx&lt;/code&gt;，看看&lt;code&gt;mobx&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="MobX" scheme="http://blog.poetries.top/tags/MobX/"/>
    
  </entry>
  
  <entry>
    <title>浅析redux-saga中间件及用法</title>
    <link href="http://blog.poetries.top/2018/08/29/redux-saga-and-redux-thunk/"/>
    <id>http://blog.poetries.top/2018/08/29/redux-saga-and-redux-thunk/</id>
    <published>2018-08-29T11:20:20.000Z</published>
    <updated>2018-09-17T03:35:00.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、redux-thunk"><a href="#一、redux-thunk" class="headerlink" title="一、redux-thunk"></a>一、redux-thunk</h2><h3 id="1-1-redux的副作用处理"><a href="#1-1-redux的副作用处理" class="headerlink" title="1.1 redux的副作用处理"></a>1.1 redux的副作用处理</h3><blockquote><p>redux中的数据流大致是</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UI—————&gt;action（plain）—————&gt;reducer——————&gt;state——————&gt;UI</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-318cf8dc905ad6ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>redux</code>是遵循函数式编程的规则，上述的数据流中，<code>action</code>是一个原始js对象（<code>plain object</code>）且<code>reducer</code>是一个纯函数，对于同步且没有副作用的操作，上述的数据流起到可以管理数据，从而控制视图层更新的目的</li><li>如果存在副作用函数，那么我们需要首先处理副作用函数，然后生成原始的js对象。如何处理副作用操作，在<code>redux</code>中选择在发出<code>action</code>，到<code>reducer</code>处理函数之间使用中间件处理副作用</li></ul><blockquote><p>redux增加中间件处理副作用后的数据流大致如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UI——&gt;action(side function)—&gt;middleware—&gt;action(plain)—&gt;reducer—&gt;state—&gt;UI</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-455dd2791c909234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>在有副作用的<code>action</code>和原始的<code>action</code>之间增加中间件处理，从图中我们也可以看出，中间件的作用就是：</p></blockquote><ul><li>转换异步操作，<strong>生成原始的action</strong>，这样，<code>reducer</code>函数就能处理相应的<code>action</code>，从而改变<code>state</code>，更新<code>UI</code></li></ul><h3 id="1-2-redux-thunk源码"><a href="#1-2-redux-thunk源码" class="headerlink" title="1.2 redux-thunk源码"></a>1.2 redux-thunk源码</h3><blockquote><p>在redux中，thunk是redux作者给出的中间件，实现极为简单，10多行代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure><blockquote><p>这几行代码做的事情也很简单，判别action的类型，如果action是函数，就调用这个函数，调用的步骤为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action(dispatch, getState, extraArgument);</span><br></pre></td></tr></table></figure><blockquote><p>发现实参为<code>dispatch</code>和<code>getState</code>，因此我们在定义<code>action</code>为<code>thunk</code>函数是，一般形参为<code>dispatch</code>和<code>getState</code></p></blockquote><h3 id="1-3-redux-thunk的缺点"><a href="#1-3-redux-thunk的缺点" class="headerlink" title="1.3 redux-thunk的缺点"></a>1.3 redux-thunk的缺点</h3><blockquote><p><code>thunk</code>的缺点也是很明显的，<code>thunk</code>仅仅做了执行这个函数，并不在乎函数主体内是什么，也就是说<code>thunk</code>使得<code>redux</code>可以接受函数作为<code>action</code>，但是函数的内部可以多种多样。比如下面是一个获取商品列表的异步操作所对应的<code>action</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;<span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">    fetch(<span class="string">'/api/goodList'</span>,&#123; <span class="comment">//fecth返回的是一个promise</span></span><br><span class="line">      method: <span class="string">'get'</span>,</span><br><span class="line">      dataType: <span class="string">'json'</span>,</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> json=<span class="built_in">JSON</span>.parse(json);</span><br><span class="line">      <span class="keyword">if</span>(json.msg==<span class="number">200</span>)&#123;</span><br><span class="line">        dispatch(&#123;<span class="attr">type</span>:<span class="string">'init'</span>,<span class="attr">data</span>:json.data&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>从这个具有副作用的<code>action</code>中，我们可以看出，函数内部极为复杂。如果需要为每一个异步操作都如此定义一个<code>action</code>，显然<code>action</code>不易维护</p></blockquote><p><strong>action不易维护的原因</strong></p><ul><li><code>action</code>的形式不统一</li><li>就是异步操作太为分散，分散在了各个<code>action</code>中</li></ul><h2 id="二、redux-saga-简介"><a href="#二、redux-saga-简介" class="headerlink" title="二、redux-saga 简介"></a>二、redux-saga 简介</h2><blockquote><p><code>redux-saga</code>是一个 <code>redux</code>中间件，它具有如下特性</p></blockquote><ul><li>集中处理 <code>redux</code> 副作用问题。</li><li>被实现为 <code>generator</code> 。</li><li>类 <code>redux-thunk</code> 中间件。</li><li><code>watch</code>/<code>worker</code>（监听-&gt;执行） 的工作形式</li></ul><p><strong>redux-saga的优点</strong></p><ul><li>集中处理了所有的异步操作，异步接口部分一目了然</li><li><code>action</code>是普通对象，这跟<code>redux</code>同步的<code>action</code>一模一样</li><li>通过<code>Effect</code>，方便异步接口的测试</li><li>通过<code>worker</code> 和<code>watcher</code>可以实现非阻塞异步调用，并且同时可以实现非阻塞调用下的事件监听</li><li>异步操作的流程是可以控制的，可以随时取消相应的异步操作</li></ul><blockquote><p>基本用法</p></blockquote><ul><li>使用<code>createSagaMiddleware</code>方法创建<code>saga</code> 的<code>Middleware</code>，然后在创建的<code>redux</code>的<code>store</code>时，使用<code>applyMiddleware</code>函数将创建的<code>saga Middleware</code>实例绑定到<code>store</code>上，最后可以调用<code>saga Middleware</code>的<code>run</code>函数来执行某个或者某些<code>Middleware</code>。</li><li>在<code>saga</code>的<code>Middleware</code>中，可以使用<code>takeEvery</code>或者<code>takeLatest</code>等<code>API</code>来监听某个<code>action</code>，当某个<code>action</code>触发后，<code>saga</code>可以使用<code>call</code>发起异步操作，操作完成后使用<code>put</code>函数触发<code>action</code>，同步更新<code>state</code>，从而完成整个<code>State</code>的更新。</li></ul><h2 id="三、redux-saga使用案例"><a href="#三、redux-saga使用案例" class="headerlink" title="三、redux-saga使用案例"></a>三、redux-saga使用案例</h2><ul><li><code>redux-saga</code>是控制执行的<code>generator</code>，在<code>redux-saga</code>中<code>action</code>是原始的<code>js</code>对象，把所有的异步副作用操作放在了<code>saga</code>函数里面。这样既统一了<code>action</code>的形式，又使得异步操作集中可以被集中处理</li><li><code>redux-saga</code>是通过<code>genetator</code>实现的，如果不支持<code>generator</code>需要通过插件<code>babel-polyfill</code>转义。我们接着来实现一个输出<code>hellosaga</code>的例子</li></ul><p><strong>创建一个helloSaga.js文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> * <span class="title">helloSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello Sagas!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在redux中使用redux-saga中间件</strong></p><blockquote><p>在<code>main.js</code>中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">'redux-saga'</span></span><br><span class="line"><span class="keyword">import</span> &#123; helloSaga &#125; <span class="keyword">from</span> <span class="string">'./sagas'</span></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware=createSagaMiddleware();</span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line"> reducer,</span><br><span class="line"> applyMiddleware(sagaMiddleware)</span><br><span class="line">);</span><br><span class="line">sagaMiddleware.run(helloSaga);</span><br><span class="line"><span class="comment">//会输出Hello, Sagas!</span></span><br></pre></td></tr></table></figure><blockquote><p>和调用<code>redux</code>的其他中间件一样，如果想使用<code>redux-saga</code>中间件，那么只要在<code>applyMiddleware</code>中调用一个<code>createSagaMiddleware</code>的实例。唯一不同的是需要调用<code>run</code>方法使得<code>generator</code>可以开始执行</p></blockquote><h2 id="四、redux-saga使用细节"><a href="#四、redux-saga使用细节" class="headerlink" title="四、redux-saga使用细节"></a>四、redux-saga使用细节</h2><h3 id="4-1-声明式的Effect"><a href="#4-1-声明式的Effect" class="headerlink" title="4.1 声明式的Effect"></a>4.1 声明式的Effect</h3><blockquote><p>在<code>redux-saga</code>中提供了一系列的<code>api</code>，比如<code>take</code>、<code>put</code>、<code>all</code>、<code>select</code>等<code>API</code>，在<code>redux-saga</code>中将这一系列的<code>api</code>都定义为Effect。这些<code>Effect</code>执行后，当函数<code>resolve</code>时返回一个描述对象，然后<code>redux-saga</code>中间件根据这个描述对象恢复执行<code>generator</code>中的函数</p></blockquote><p><strong>redux-thunk的大体过程</strong></p><blockquote><p><code>action1(side function)</code>—&gt;<code>redux-thunk</code>监听—&gt;执行相应的有副作用的方法—&gt;<code>action2(plain object)</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-6610e1f4b0d07aa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>转化到<code>action2</code>是一个原始<code>js</code>对象形式的<code>action</code>，然后执行<code>reducer</code>函数就会更新<code>store</code>中的<code>state</code></p></blockquote><p><strong>redux-saga的大体过程</strong></p><blockquote><p>action1(plain object)——&gt;redux-saga监听—&gt;执行相应的Effect方法——&gt;返回描述对象—&gt;恢复执行异步和副作用函数—&gt;action2(plain object)</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0b64449bd093536d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>对比<code>redux-thunk</code>我们发现，<code>redux-saga</code>中监听到了原始<code>js</code>对象<code>action</code>，并不会马上执行副作用操作，会先通过<code>Effect</code>方法将其转化成一个描述对象，然后再将描述对象，作为标识，再恢复执行副作用函数</p></blockquote><h3 id="4-2-Effect提供的具体方法"><a href="#4-2-Effect提供的具体方法" class="headerlink" title="4.2 Effect提供的具体方法"></a>4.2 Effect提供的具体方法</h3><blockquote><p>下面来介绍几个<code>Effect</code>中常用的几个方法，从低阶的API，比如<code>take</code>，<code>call(apply)</code>，<code>fork</code>，<code>put</code>，<code>select</code>等，以及高阶<code>API</code>，比如<code>takeEvery</code>和<code>takeLatest</code>等</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;take,call,put,select,fork,takeEvery,takeLatest&#125; from &apos;redux-saga/effects&apos;</span><br></pre></td></tr></table></figure><h4 id="4-2-1-take"><a href="#4-2-1-take" class="headerlink" title="4.2.1 take"></a>4.2.1 take</h4><blockquote><p><code>take</code>这个方法，是用来监听<code>action</code>，返回的是监听到的<code>action</code>对象。比如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const loginAction = &#123;</span><br><span class="line">   type:&apos;login&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>UI Component</code>中<code>dispatch</code>一个<code>action</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch(loginAction)</span><br></pre></td></tr></table></figure><p>在saga中使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const action = yield take(&apos;login&apos;);</span><br></pre></td></tr></table></figure><blockquote><p>可以监听到UI传递到中间件的<code>Action</code>,上述<code>take</code>方法的返回，就是<code>dipath</code>的原始对象。一旦监听到<code>login</code>动作，返回的<code>action</code>为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type:&apos;login&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-call-apply"><a href="#4-2-2-call-apply" class="headerlink" title="4.2.2 call(apply)"></a>4.2.2 call(apply)</h4><blockquote><p><code>call</code>和<code>apply</code>方法与<code>js</code>中的<code>call</code>和<code>apply</code>相似，我们以<code>call</code>方法为例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call(fn, ...args)</span><br></pre></td></tr></table></figure><blockquote><p><code>call</code>方法调用<code>fn</code>，参数为<code>args</code>，返回一个描述对象。不过这里<code>call</code>方法传入的函数<code>fn</code>可以是普通函数，也可以是<code>generator</code>。<code>call</code>方法应用很广泛，在<code>redux-saga</code>中使用异步请求等常用<code>call</code>方法来实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield call(fetch,&apos;/userInfo&apos;,username)</span><br></pre></td></tr></table></figure><h4 id="4-2-3-put"><a href="#4-2-3-put" class="headerlink" title="4.2.3 put"></a>4.2.3 put</h4><blockquote><p>redux-saga做为中间件，工作流是这样的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UI——&gt;action1————&gt;redux-saga中间件————&gt;action2————&gt;reducer..</span><br></pre></td></tr></table></figure><blockquote><p>从工作流中，我们发现<code>redux-saga</code>执行完副作用函数后，必须发出<code>action</code>，然后这个<code>action</code>被<code>reducer</code>监听，从而达到更新<code>state</code>的目的。相应的这里的<code>put</code>对应与<code>redux</code>中的<code>dispatch</code>，工作流程图如下</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-9f946c314d488481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>可以看出<code>redux-saga</code>执行副作用方法转化<code>action</code>时，<code>put</code>这个<code>Effect</code>方法跟<code>redux</code>原始的<code>dispatch</code>相似，都是可以发出<code>action</code>，且发出的<code>action</code>都会被<code>reducer</code>监听到。<code>put</code>的使用方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield put(&#123;type:&apos;login&apos;&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-2-4-select"><a href="#4-2-4-select" class="headerlink" title="4.2.4 select"></a>4.2.4 select</h4><blockquote><p><code>put</code>方法与<code>redux</code>中的<code>dispatch</code>相对应，同样的如果我们想在中间件中获取<code>state</code>，那么需要使用<code>select</code>。<code>select</code>方法对应的是<code>redux</code>中的<code>getState</code>，用户获取<code>store</code>中的<code>state</code>，使用方法：</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const id = yield select(state =&gt; state.id);</span><br></pre></td></tr></table></figure><h4 id="4-2-5-fork"><a href="#4-2-5-fork" class="headerlink" title="4.2.5 fork"></a>4.2.5 fork</h4><blockquote><p><code>fork</code>方法相当于<code>web work</code>，<code>fork</code>方法不会阻塞主线程，在非阻塞调用中十分有用</p></blockquote><h4 id="4-2-6-takeEvery和takeLatest"><a href="#4-2-6-takeEvery和takeLatest" class="headerlink" title="4.2.6 takeEvery和takeLatest"></a>4.2.6 takeEvery和takeLatest</h4><blockquote><p><code>takeEvery</code>和<code>takeLatest</code>用于监听相应的动作并执行相应的方法，是构建在<code>take</code>和<code>fork</code>上面的高阶<code>api</code>，比如要监听<code>login</code>动作，好用<code>takeEvery</code>方法可以</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">takeEvery(&apos;login&apos;,loginFunc)</span><br></pre></td></tr></table></figure><ul><li><code>takeEvery</code>监听到<code>login</code>的动作，就会执行<code>loginFunc</code>方法，除此之外，<code>takeEvery</code>可以同时监听到多个相同的<code>action</code>。</li><li><code>takeLatest</code>方法跟<code>takeEvery</code>是相同方式调用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">takeLatest(&apos;login&apos;,loginFunc)</span><br></pre></td></tr></table></figure><blockquote><p>与<code>takeLatest</code>不同的是，<code>takeLatest</code>是会监听执行最近的那个被触发的<code>action</code></p></blockquote><h2 id="五、案例分析一"><a href="#五、案例分析一" class="headerlink" title="五、案例分析一"></a>五、案例分析一</h2><blockquote><p>接着我们来实现一个<code>redux-saga</code>样例，存在一个登陆页，登陆成功后，显示列表页，并且，在列表页，可以点击登出，返回到登陆页。例子的最终展示效果如下</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d55fad60b5d7d797.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>样例的功能流程图为</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c71a6ade70f5f2fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="5-1-LoginPanel-登陆页"><a href="#5-1-LoginPanel-登陆页" class="headerlink" title="5.1 LoginPanel(登陆页)"></a>5.1 LoginPanel(登陆页)</h3><p><strong>输入时时保存用户名和密码</strong></p><ul><li>用户名输入框和密码框onchange时触发的函数为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">changeUsername:<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    dispatch(&#123;<span class="attr">type</span>:<span class="string">'CHANGE_USERNAME'</span>,<span class="attr">value</span>:e.target.value&#125;);</span><br><span class="line"> &#125;,</span><br><span class="line">changePassword:<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">  dispatch(&#123;<span class="attr">type</span>:<span class="string">'CHANGE_PASSWORD'</span>,<span class="attr">value</span>:e.target.value&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在函数中最后会<code>dispatch</code>两个<code>action：CHANGE_USERNAME和CHANGE_PASSWORD</code></p></blockquote><ul><li>在<code>saga.js</code>文件中监听这两个方法并执行副作用函数，最后<code>put</code>发出转化后的<code>action</code>，给<code>reducer</code>函数调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">watchUsername</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> action= <span class="keyword">yield</span> take(<span class="string">'CHANGE_USERNAME'</span>);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'change_username'</span>,</span><br><span class="line">    value:action.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">watchPassword</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> action=<span class="keyword">yield</span> take(<span class="string">'CHANGE_PASSWORD'</span>);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'change_password'</span>,</span><br><span class="line">    value:action.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后在<code>reducer</code>中接收到<code>redux-saga</code>的<code>put</code>方法传递过来的<code>action：change_username</code>和<code>change_password</code>，然后更新<code>state</code></p></blockquote><p><strong>监听登陆事件判断登陆是否成功</strong></p><blockquote><p>在UI中发出的登陆事件为</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">toLoginIn:<span class="function">(<span class="params">username,password</span>)=&gt;</span>&#123;</span><br><span class="line">  dispatch(&#123;<span class="attr">type</span>:<span class="string">'TO_LOGIN_IN'</span>,username,password&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>登陆事件的<code>action</code>为：<code>TO_LOGIN_IN</code>.对于登入事件的处理函数为：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//监听登入事件</span></span><br><span class="line">    <span class="keyword">const</span> action1=<span class="keyword">yield</span> take(<span class="string">'TO_LOGIN_IN'</span>);</span><br><span class="line">    <span class="keyword">const</span> res=<span class="keyword">yield</span> call(fetchSmart,<span class="string">'/login'</span>,&#123;</span><br><span class="line">      method:<span class="string">'POST'</span>,</span><br><span class="line">      body:<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        username:action1.username,</span><br><span class="line">        password:action1.password</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(res)&#123;</span><br><span class="line">      put(&#123;<span class="attr">type</span>:<span class="string">'to_login_in'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在上述的处理函数中，首先监听原始动作提取出传递来的用户名和密码，然后请求是否登陆成功，如果登陆成功有返回值，则执行<code>put</code>的<code>action:to_login_in</code></p></blockquote><h3 id="5-2-LoginSuccess"><a href="#5-2-LoginSuccess" class="headerlink" title="5.2 LoginSuccess"></a>5.2 LoginSuccess</h3><blockquote><p>(登陆成功列表展示页)</p></blockquote><ul><li>登陆成功后的页面功能包括：<ul><li>获取列表信息，展示列表信息</li><li>登出功能，点击可以返回登陆页面</li></ul></li></ul><p><strong>获取列表信息</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;delay&#125; <span class="keyword">from</span> <span class="string">'redux-saga'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">getList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="keyword">yield</span> delay(<span class="number">3000</span>);</span><br><span class="line">   <span class="keyword">const</span> res = <span class="keyword">yield</span> call(fetchSmart,<span class="string">'/list'</span>,&#123;</span><br><span class="line">     method:<span class="string">'POST'</span>,</span><br><span class="line">     body:<span class="built_in">JSON</span>.stringify(&#123;&#125;)</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'update_list'</span>,<span class="attr">list</span>:res.data.activityList&#125;);</span><br><span class="line"> &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">   <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'update_list_error'</span>, error&#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为了演示请求过程，我们在本地<code>mock</code>，通过<code>redux-saga</code>的工具函数<code>delay</code>，<code>delay</code>的功能相当于延迟xx秒，因为真实的请求存在延迟，因此可以用delay在本地模拟真实场景下的请求延迟</p></blockquote><p><strong>登出功能</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const action2=yield take(&apos;TO_LOGIN_OUT&apos;);</span><br><span class="line">yield put(&#123;type:&apos;to_login_out&apos;&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>与登入相似，登出的功能从UI处接受<code>action:TO_LOGIN_OUT</code>,然后转发<code>action:to_login_out</code></p></blockquote><p><strong>完整的实现登入登出和列表展示的代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">getList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="keyword">yield</span> delay(<span class="number">3000</span>);</span><br><span class="line">   <span class="keyword">const</span> res = <span class="keyword">yield</span> call(fetchSmart,<span class="string">'/list'</span>,&#123;</span><br><span class="line">     method:<span class="string">'POST'</span>,</span><br><span class="line">     body:<span class="built_in">JSON</span>.stringify(&#123;&#125;)</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'update_list'</span>,<span class="attr">list</span>:res.data.activityList&#125;);</span><br><span class="line"> &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">   <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'update_list_error'</span>, error&#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">watchIsLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//监听登入事件</span></span><br><span class="line">    <span class="keyword">const</span> action1=<span class="keyword">yield</span> take(<span class="string">'TO_LOGIN_IN'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> res=<span class="keyword">yield</span> call(fetchSmart,<span class="string">'/login'</span>,&#123;</span><br><span class="line">      method:<span class="string">'POST'</span>,</span><br><span class="line">      body:<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        username:action1.username,</span><br><span class="line">        password:action1.password</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据返回的状态码判断登陆是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(res.status===<span class="number">10000</span>)&#123;</span><br><span class="line">      <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'to_login_in'</span>&#125;);</span><br><span class="line">      <span class="comment">//登陆成功后获取首页的活动列表</span></span><br><span class="line">      <span class="keyword">yield</span> call(getList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//监听登出事件</span></span><br><span class="line">    <span class="keyword">const</span> action2=<span class="keyword">yield</span> take(<span class="string">'TO_LOGIN_OUT'</span>);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'to_login_out'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过请求状态码判断登入是否成功，在登陆成功后，可以通过</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield call(getList)</span><br></pre></td></tr></table></figure><blockquote><p>注意call方法调用是会阻塞主线程的，具体来说</p></blockquote><ul><li>在call方法调用结束之前，call方法之后的语句是无法执行的</li><li>如果<code>call(getList)</code>存在延迟，<code>call(getList)</code>之后的语句 <code>const action2=yieldtake(&#39;TO_LOGIN_OUT&#39;)</code>在<code>call</code>方法返回结果之前无法执行</li><li>在延迟期间的登出操作会被忽略</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-377d80bb1517bae2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>无阻塞调用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield call(getList)</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield fork(getList)</span><br></pre></td></tr></table></figure><blockquote><p>通过fork方法不会阻塞主线程，在白屏时点击登出，可以立刻响应登出功能，从而返回登陆页面</p></blockquote><h2 id="六、案例分析二"><a href="#六、案例分析二" class="headerlink" title="六、案例分析二"></a>六、案例分析二</h2><h3 id="6-1-配置saga信息"><a href="#6-1-配置saga信息" class="headerlink" title="6.1 配置saga信息"></a>6.1 配置saga信息</h3><blockquote><p><code>src/store/configureStore.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// import &#123;createLogger &#125; from 'redux-logger'</span></span><br><span class="line"><span class="keyword">import</span> createHistory <span class="keyword">from</span> <span class="string">'history/createBrowserHistory'</span></span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">'redux-saga'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routerMiddleware &#125; <span class="keyword">from</span> <span class="string">'react-router-redux'</span></span><br><span class="line"><span class="keyword">import</span> rootSaga <span class="keyword">from</span> <span class="string">'../sagas'</span></span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'../reducers/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> history = createHistory()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleware = routerMiddleware(history)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建saga middleware</span></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configureStore = <span class="function"><span class="params">preloadedState</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 安装 Redux-DevTools Chrome 插件后可用 composeEnhancers()</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">rootReducer,</span><br><span class="line">preloadedState,</span><br><span class="line">composeEnhancers(</span><br><span class="line">applyMiddleware(sagaMiddleware,middleware)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">sagaMiddleware.run(rootSaga);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line"><span class="comment">// Enable Webpack hot module replacement for reducers</span></span><br><span class="line"><span class="built_in">module</span>.hot.accept(<span class="string">'../reducers'</span>, () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> nextRootReducer = <span class="built_in">require</span>(<span class="string">'../reducers'</span>).default</span><br><span class="line">store.replaceReducer(nextRootReducer)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configureStore</span><br></pre></td></tr></table></figure><h3 id="6-2-配置reduce"><a href="#6-2-配置reduce" class="headerlink" title="6.2 配置reduce"></a>6.2 配置reduce</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/reducers/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;routerReducer <span class="keyword">as</span> routing&#125; <span class="keyword">from</span> <span class="string">'react-router-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">      routing,</span><br><span class="line">      poetry : <span class="built_in">require</span>(<span class="string">'./poetry'</span>).default</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/reducers/poetry.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ActionTypes <span class="keyword">from</span> <span class="string">'../actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = &#123;</span><br><span class="line">fetching:<span class="literal">false</span>,</span><br><span class="line">error:<span class="literal">false</span>,</span><br><span class="line">errMsg:<span class="string">''</span>,</span><br><span class="line">data:[]</span><br><span class="line">&#125;,action) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(action.type === ActionTypes.FETCH_POETRY_REQUEST)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;...state,<span class="attr">fetching</span>:<span class="literal">true</span>,<span class="attr">errMsg</span>:<span class="string">''</span>&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(action.type === ActionTypes.FETCH_POETRY_SUCCESS)&#123;</span><br><span class="line"><span class="keyword">const</span> data = action.payload.data</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;...state,<span class="attr">fetching</span>:<span class="literal">false</span>,data,<span class="attr">errMsg</span>:<span class="string">''</span>&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(action.type === ActionTypes.FETCH_POETRY_FAILURE)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;...state,<span class="attr">fetching</span>:<span class="literal">false</span>,<span class="attr">error</span>:<span class="literal">true</span>,<span class="attr">errMsg</span>:action.payload.errMsg&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-处理action"><a href="#6-3-处理action" class="headerlink" title="6.3 处理action"></a>6.3 处理action</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/action/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> COMMON_FETCHING = <span class="string">'COMMON_FETCHING'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> COMMON_OVER = <span class="string">'COMMON_OVER'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MSG_SHOW = <span class="string">'MSG_SHOW'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MSG_INIT = <span class="string">'MSG_INIT'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> POP_LOGIN = <span class="string">'POP_LOGIN'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initMsg = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;<span class="attr">type</span> : MSG_INIT&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相比用thunk多了一步 多了个action 来触发saga woker</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_POETRY_REQUEST = <span class="string">'FETCH_POETRY_REQUEST'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_POETRY_SUCCESS = <span class="string">'FETCH_POETRY_SUCCESS'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_POETRY_FAILURE = <span class="string">'FETCH_POETRY_FAILURE'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPoetryRequest = createAction(FETCH_POETRY_REQUEST)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPoetrySuccess = createAction(FETCH_POETRY_SUCCESS)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPoetryFauilure= createAction(FETCH_POETRY_FAILURE)</span><br></pre></td></tr></table></figure><h3 id="6-4-处理sagas"><a href="#6-4-处理sagas" class="headerlink" title="6.4 处理sagas"></a>6.4 处理sagas</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// src/sagas/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; all &#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>* <span class="title">rootSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> all([</span><br><span class="line">        ...require(<span class="string">'./fetchPoetry'</span>).default</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// src/fetchPoetry.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;put,take,call,fork,takeEvery,select&#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span></span><br><span class="line"><span class="keyword">import</span> &#123;delay&#125; <span class="keyword">from</span> <span class="string">'redux-saga'</span></span><br><span class="line"><span class="keyword">import</span>  * <span class="keyword">as</span> api  <span class="keyword">from</span> <span class="string">'../api'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">'../actions/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// saga worker 监听FETCH_POETRY_REQUEST动作触发执行相应操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fetchPoetrySaga</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// yield delay(100)</span></span><br><span class="line">    <span class="comment">// ======== 写法一 ========= </span></span><br><span class="line">    <span class="comment">// yield takeEvery(actionTypes.FETCH_POETRY_REQUEST,function*(action)&#123;</span></span><br><span class="line">    <span class="comment">//     // 调用this.props.fetchPoetryRequest(&#123;user:'poetries',age:23&#125;) 传参进来这里</span></span><br><span class="line">    <span class="comment">//     // 也可以通过这样获取state中的参数 const state = yield select()</span></span><br><span class="line">    <span class="comment">//     const &#123;user,age&#125; = action</span></span><br><span class="line">    <span class="comment">//     try&#123;</span></span><br><span class="line">    <span class="comment">//         const data =  yield call(api.get(&#123;</span></span><br><span class="line">    <span class="comment">//             url:'/mock/5b7fd63f719c7b7241f4e2fa/tangshi/tang-shi'</span></span><br><span class="line">    <span class="comment">//         &#125;))</span></span><br><span class="line">    <span class="comment">//         yield put(actionTypes.fetchPoetrySuccess(&#123;data:data.data.data&#125;))</span></span><br><span class="line">    <span class="comment">//     &#125;catch(error)&#123;</span></span><br><span class="line">    <span class="comment">//         yield put(actionTypes.fetchPoetryFauilure(&#123;errMsg:error.message&#125;))</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// === 写法二====</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">      <span class="comment">// 当dispatch(&#123;type:FETCH_POETRY_REQUEST&#125;)的时候被这里监听 执行对应的请求</span></span><br><span class="line">    <span class="keyword">const</span> &#123;user,age&#125; =  <span class="keyword">yield</span> take(actionTypes.FETCH_POETRY_REQUEST)</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">const</span> data =  <span class="keyword">yield</span> call(api.get(&#123;</span><br><span class="line">             url:<span class="string">'/mock/5b7fd63f719c7b7241f4e2fa/tangshi/tang-shi'</span></span><br><span class="line">         &#125;))</span><br><span class="line">          <span class="keyword">yield</span> put(actionTypes.fetchPoetrySuccess(&#123;<span class="attr">data</span>:data.data.data&#125;))</span><br><span class="line">     &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">         <span class="keyword">yield</span> put(actionTypes.fetchPoetryFauilure(&#123;<span class="attr">errMsg</span>:error.message&#125;))</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出所有的saga</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  [</span><br><span class="line">    fork(fetchPoetrySaga)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>完整代码例子 <a href="https://github.com/poetries/redux-saga-template" target="_blank" rel="noopener">https://github.com/poetries/redux-saga-template</a></p></blockquote><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><blockquote><p><code>redux-saga</code>做为<code>redux</code>中间件的全部优点</p></blockquote><ul><li>统一<code>action</code>的形式，在<code>redux-saga</code>中，从<code>UI</code>中<code>dispatch</code>的<code>action</code>为原始对象</li><li>集中处理异步等存在副作用的逻辑</li><li>通过转化<code>effects</code>函数，可以方便进行单元测试</li><li>完善和严谨的流程控制，可以较为清晰的控制复杂的逻辑</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、redux-thunk&quot;&gt;&lt;a href=&quot;#一、redux-thunk&quot; class=&quot;headerlink&quot; title=&quot;一、redux-thunk&quot;&gt;&lt;/a&gt;一、redux-thunk&lt;/h2&gt;&lt;h3 id=&quot;1-1-redux的副作用处理&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Redux" scheme="http://blog.poetries.top/tags/Redux/"/>
    
      <category term="中间件" scheme="http://blog.poetries.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue状态管理之vuex（十六）</title>
    <link href="http://blog.poetries.top/2018/08/29/vue-vuex/"/>
    <id>http://blog.poetries.top/2018/08/29/vue-vuex/</id>
    <published>2018-08-29T03:30:32.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>了解vuex核心概念请移步 <a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/</a></p></blockquote><h2 id="一、初始vuex"><a href="#一、初始vuex" class="headerlink" title="一、初始vuex"></a>一、初始vuex</h2><h3 id="1-1-vuex是什么"><a href="#1-1-vuex是什么" class="headerlink" title="1.1 vuex是什么"></a>1.1 vuex是什么</h3><blockquote><ul><li><code>vuex</code> 就是把需要共享的变量全部存储在一个对象里面，然后将这个对象放在顶层组件中供其他组件使用<ul><li>父子组件通信时，我们通常会采用 <code>props + emit</code> 这种方式。但当通信双方不是父子组件甚至压根不存在相关联系，或者一个状态需要共享给多个组件时，就会非常麻烦，数据也会相当难维护</li></ul></li></ul></blockquote><h3 id="1-2-vuex中有什么"><a href="#1-2-vuex中有什么" class="headerlink" title="1.2 vuex中有什么"></a>1.2 vuex中有什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">'weish'</span>,</span><br><span class="line">        age: <span class="number">22</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        personInfo(state) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;state.name&#125;</span>, I am <span class="subst">$&#123;state.age&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        SET_AGE(state, age) &#123;</span><br><span class="line">            commit(age, age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        nameAsyn(&#123;commit&#125;) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                commit(<span class="string">'SET_AGE'</span>, <span class="number">18</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;</span><br><span class="line">        a: modulesA</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个就是最基本也是完整的<code>vuex</code>代码；<code>vuex</code> 包含有五个基本的对象</p></blockquote><ul><li><code>state</code>：存储状态。也就是变量；</li><li><code>getters</code>：派生状态。也就是<code>set</code>、<code>get</code>中的<code>get</code>，有两个可选参数：<code>state</code>、<code>getters</code>分别可以获取<code>state</code>中的变量和其他的<code>getters</code>。外部调用方式：<code>store.getters.personInfo()</code>。就和<code>vue</code>的<code>computed</code>差不多；</li><li><code>mutations</code>：提交状态修改。也就是<code>set</code>、<code>get</code>中的<code>set</code>，这是<code>vuex</code>中唯一修改<code>state</code>的方式，但不支持异步操作。第一个参数默认是<code>state</code>。外部调用方式：<code>store.commit(&#39;SET_AGE&#39;, 18)</code>。和<code>vue</code>中的<code>methods</code>类似。</li><li><code>actions</code>：和<code>mutations</code>类似。不过<code>actions</code>支持异步操作。第一个参数默认是和<code>store</code>具有相同参数属性的对象。外部调用方式：<code>store.dispatch(&#39;nameAsyn&#39;)</code>。</li><li><code>modules</code>：<code>store</code>的子模块，内容就相当于是<code>store</code>的一个实例。调用方式和前面介绍的相似，只是要加上当前子模块名，如：<code>store.a.getters.xxx()</code></li></ul><h3 id="1-3-vue-cli中使用vuex的方式"><a href="#1-3-vue-cli中使用vuex的方式" class="headerlink" title="1.3 vue-cli中使用vuex的方式"></a>1.3 vue-cli中使用vuex的方式</h3><p><strong>目录结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── components</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          # 我们组装模块并导出 store 的地方</span><br><span class="line">    ├── state.js          # 跟级别的 state</span><br><span class="line">    ├── getters.js        # 跟级别的 getter</span><br><span class="line">    ├── mutation-types.js # 根级别的mutations名称（官方推荐mutions方法名使用大写）</span><br><span class="line">    ├── mutations.js      # 根级别的 mutation</span><br><span class="line">    ├── actions.js        # 根级别的 action</span><br><span class="line">    └── modules</span><br><span class="line">        ├── m1.js         # 模块1</span><br><span class="line">        └── m2.js         # 模块2</span><br></pre></td></tr></table></figure><p><strong>state示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    name: <span class="string">'weish'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state;</span><br></pre></td></tr></table></figure><p><strong>getter示例</strong></p><blockquote><p><code>getters.js</code>示例（我们一般使用<code>getters</code>来获取<code>state</code>的状态，而不是直接使用<code>state</code>）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> other = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;state.name&#125;</span>, I am <span class="subst">$&#123;state.age&#125;</span>.`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mutation-type示例</strong></p><blockquote><p>将所有<code>mutations</code>的函数名放在这个文件里</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export const SET_NAME = &apos;SET_NAME&apos;;</span><br><span class="line">export const SET_AGE = &apos;SET_AGE&apos;;</span><br></pre></td></tr></table></figure><p><strong>mutations示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-type.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    [types.SET_NAME](state, name) &#123;</span><br><span class="line">        state.name = name;</span><br><span class="line">    &#125;,</span><br><span class="line">    [types.SET_AGE](state, age) &#123;</span><br><span class="line">        state.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>actions示例</strong></p><blockquote><p>异步操作、多个<code>commit</code>时</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-type.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    nameAsyn(&#123;commit&#125;, &#123;age, name&#125;) &#123;</span><br><span class="line">        commit(types.SET_NAME, name);</span><br><span class="line">        commit(types.SET_AGE, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>modules–m1.js示例</strong></p><blockquote><p>如果不是很复杂的应用，一般来讲是不会分模块的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state: &#123;&#125;,</span><br><span class="line">    getters: &#123;&#125;,</span><br><span class="line">    mutations: &#123;&#125;,</span><br><span class="line">    actions: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.js示例（组装vuex)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state.js'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters.js'</span>;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations.js'</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'./actions.js'</span>;</span><br><span class="line"><span class="keyword">import</span> m1 <span class="keyword">from</span> <span class="string">'./modules/m1.js'</span>;</span><br><span class="line"><span class="keyword">import</span> m2 <span class="keyword">from</span> <span class="string">'./modules/m2.js'</span>;</span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span>; <span class="comment">// 修改日志</span></span><br><span class="line"></span><br><span class="line">vue.use(vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span>; <span class="comment">// 开发环境中为true，否则为false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    modules: &#123;</span><br><span class="line">        m1,</span><br><span class="line">        m2</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: debug ? [createLogger()] : [] <span class="comment">// 开发环境下显示vuex的状态修改</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>最后将<code>store</code>实例挂载到<code>main.js</code>里面的<code>vue</code>上去就行了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在<code>vue</code>组件中使用时，我们通常会使用<code>mapGetters</code>、<code>mapActions</code>、<code>mapMutations</code>，然后就可以按照<code>vue</code>调用<code>methods</code>和<code>computed</code>的方式去调用这些变量或函数，示例如</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters, mapMutations, mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 只写组件中的script部分 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapGetters([</span><br><span class="line">            name,</span><br><span class="line">            age</span><br><span class="line">        ])</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...mapMutations(&#123;</span><br><span class="line">            setName: <span class="string">'SET_NAME'</span>,</span><br><span class="line">            setAge: <span class="string">'SET_AGE'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        ...mapActions([</span><br><span class="line">            nameAsyn</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、modules"><a href="#二、modules" class="headerlink" title="二、modules"></a>二、modules</h2><blockquote><p>在 src 目录下 , 新建一个 store 文件夹 , 然后在里面新建一个 index.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        show:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>main.js</code> 里的代码应该改成,在实例化 <code>Vue</code>对象时加入 <code>store</code> 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vuex</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,<span class="comment">//使用store</span></span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这样就把 <code>store</code> 分离出去了 , 那么还有一个问题是 : 这里 <code>$store.state.show</code> 无论哪个组件都可以使用 , 那组件多了之后 , 状态也多了 , 这么多状态都堆在 store 文件夹下的 <code>index.js</code> 不好维护怎么办 ?</p></blockquote><ul><li>我们可以使用 <code>vuex</code> 的 <code>modules</code> , 把 <code>store</code> 文件夹下的 <code>index.js</code> 改成</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dialog_store <span class="keyword">from</span> <span class="string">'../components/dialog_store.js'</span>;<span class="comment">//引入某个store对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    modules: &#123;</span><br><span class="line">        dialog: dialog_store</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这里我们引用了一个 <code>dialog_store.js</code> , 在这个 <code>js</code>文件里我们就可以单独写 <code>dialog</code> 组件的状态了 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        show:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>做出这样的修改之后 , 我们将之前我们使用的 <code>$store.state.show</code> 统统改为 <code>$store.state.dialog.show</code> 即可</p></blockquote><ul><li>如果还有其他的组件需要使用 <code>vuex</code> , 就新建一个对应的状态文件 , 然后将他们加入 <code>store</code>文件夹下的 <code>index.js</code>文件中的 <code>modules</code> 中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modules: &#123;</span><br><span class="line">    dialog: dialog_store,</span><br><span class="line">    other: other,<span class="comment">//其他组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、mutations"><a href="#三、mutations" class="headerlink" title="三、mutations"></a>三、mutations</h2><blockquote><p>对<code>vuex</code> 的依赖仅仅只有一个 <code>$store.state.dialog.show</code> 一个状态 , 但是如果我们要进行一个操作 , 需要依赖很多很多个状态 , 那管理起来又麻烦了</p></blockquote><ul><li><code>mutations</code>里的操作必须是同步的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state:&#123;<span class="comment">//state</span></span><br><span class="line">        show:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        switch_dialog(state)&#123;<span class="comment">//这里的state对应着上面这个state</span></span><br><span class="line">            state.show = state.show?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//你还可以在这里执行其他的操作改变state</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>mutations</code> 后 , 原先我们的父组件可以改为 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"$store.commit('switch_dialog')"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">t-dialog</span>&gt;</span><span class="tag">&lt;/<span class="name">t-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> dialog <span class="keyword">from</span> <span class="string">'./components/dialog.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">"t-dialog"</span>:dialog</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>$store.commit(&#39;switch_dialog&#39;)</code> 来触发 <code>mutations</code> 中的 <code>switch_dialog</code> 方法</p></blockquote><h2 id="四、actions"><a href="#四、actions" class="headerlink" title="四、actions"></a>四、actions</h2><blockquote><p>多个 <code>state</code> 的操作 , 使用 <code>mutations</code>会来触发会比较好维护 , 那么需要执行多个 <code>mutations</code> 就需要用 <code>action</code> 了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state:&#123;<span class="comment">//state</span></span><br><span class="line">        show:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        switch_dialog(state)&#123;<span class="comment">//这里的state对应着上面这个state</span></span><br><span class="line">            state.show = state.show?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//你还可以在这里执行其他的操作改变state</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        switch_dialog(context)&#123;<span class="comment">//这里的context和我们使用的$store拥有相同的对象和方法</span></span><br><span class="line">            context.commit(<span class="string">'switch_dialog'</span>);</span><br><span class="line">            <span class="comment">//你还可以在这里触发其他的mutations方法</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么 , 在之前的父组件中 , 我们需要做修改 , 来触发 <code>action</code> 里的 <code>switch_dialog</code> 方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('switch_dialog')"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">t-dialog</span>&gt;</span><span class="tag">&lt;/<span class="name">t-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> dialog <span class="keyword">from</span> <span class="string">'./components/dialog.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">"t-dialog"</span>:dialog</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>$store.dispatch(&#39;switch_dialog&#39;)</code> 来触发 <code>action</code> 中的 <code>switch_dialog</code> 方法。</li><li>官方推荐 , 将异步操作放在 <code>action</code>中</li></ul><h2 id="五、getters"><a href="#五、getters" class="headerlink" title="五、getters"></a>五、getters</h2><blockquote><p><code>getters</code>和 <code>vue</code> 中的<code>computed</code> 类似 , 都是用来计算 <code>state</code> 然后生成新的数据 ( 状态 ) 的</p></blockquote><ul><li>假如我们需要一个与状态 <code>show</code> 刚好相反的状态 , 使用 <code>vue</code> 中的 <code>computed</code> 可以这样算出来</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed()&#123;</span><br><span class="line">    not_show()&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">this</span>.$store.state.dialog.show;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么 , 如果很多很多个组件中都需要用到这个与 <code>show</code>刚好相反的状态 , 那么我们需要写很多很多个 <code>not_show</code>, 使用 <code>getters</code>就可以解决这种问题 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state:&#123;<span class="comment">//state</span></span><br><span class="line">        show:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        not_show(state)&#123;<span class="comment">//这里的state对应着上面这个state</span></span><br><span class="line">            <span class="keyword">return</span> !state.show;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        switch_dialog(state)&#123;<span class="comment">//这里的state对应着上面这个state</span></span><br><span class="line">            state.show = state.show?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//你还可以在这里执行其他的操作改变state</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        switch_dialog(context)&#123;<span class="comment">//这里的context和我们使用的$store拥有相同的对象和方法</span></span><br><span class="line">            context.commit(<span class="string">'switch_dialog'</span>);</span><br><span class="line">            <span class="comment">//你还可以在这里触发其他的mutations方法</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们在组件中使用 <code>$store.state.dialog.show</code> 来获得状态 <code>show</code> , 类似的 , 我们可以使用 <code>$store.getters.not_show</code> 来获得状态 <code>not_show</code></p></blockquote><ul><li>注意 : <code>$store.getters.not_show</code> 的值是不能直接修改的 , 需要对应的 <code>state</code> 发生变化才能修改</li></ul><h2 id="六、mapState、mapGetters、mapActions"><a href="#六、mapState、mapGetters、mapActions" class="headerlink" title="六、mapState、mapGetters、mapActions"></a>六、mapState、mapGetters、mapActions</h2><blockquote><p>很多时候 , <code>$store.state.dialog.show</code> 、<code>$store.dispatch(&#39;switch_dialog&#39;)</code> 这种写法很不方便</p></blockquote><ul><li>使用 <code>mapState</code>、<code>mapGetters</code>、<code>mapActions</code> 就不会这么复杂了</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed:&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//这里的三点叫做 : 扩展运算符</span></span></span><br><span class="line"><span class="undefined">    ...mapState(&#123;</span></span><br><span class="line"><span class="javascript">      show:<span class="function"><span class="params">state</span>=&gt;</span>state.dialog.show</span></span><br><span class="line"><span class="undefined">    &#125;),</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed:&#123;</span></span><br><span class="line"><span class="undefined">    show()&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.dialog.show;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>mapGetters</code>、<code>mapActions</code> 和 <code>mapState</code> 类似 , <code>mapGetters</code> 一般也写在 <code>computed</code> 中 , <code>mapActions</code> 一般写在 <code>methods</code> 中</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;了解vuex核心概念请移步 &lt;a href=&quot;https://vuex.vuejs.org/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://vuex.vuejs.org/zh/&lt;/a&gt;&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue过渡与动画（十五）</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-animation-transition/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-animation-transition/</id>
    <published>2018-08-28T12:10:32.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、transition标签结合css"><a href="#一、transition标签结合css" class="headerlink" title="一、transition标签结合css"></a>一、transition标签结合css</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-08967bd611312202.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>vue.2.0</code>中的过渡动画利用自身的<code>transition</code>组件实现</p></blockquote><p><strong>有四种情形可以实现过渡效果</strong></p><ul><li>利用<code>v-if</code>渲染元素时</li><li>利用<code>v-show</code>展示或者隐藏元素时应用过渡生效</li><li>动态组件(把几个组件挂载到一个父节点上，在父节点绑定变量来决定显示哪个子组件)</li><li>组件根节点</li></ul><blockquote><ul><li>过渡有两种总的状态：即<code>enter</code>(过渡开始)和<code>leave</code>(过渡结束) </li><li>这两中状态再细分，可分出6种状态，对应6个类名</li><li>在进入/离开的过渡中，会有 6 个 <code>class</code> 切换</li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-cdb6a6cb0faa21b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="transition"></p><p><img src="https://cn.vuejs.org/images/transition.png" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d2cb3498acd43afd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>控制元素的滑入与滑出，例如：<code>DOM</code>结构，要在<code>transition</code>组件上添加<code>name</code>属性，并在<code>css</code>中使用<code>name</code>的属性值替代以上<code>v-</code>状态种的<code>v</code>作为类名</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"food"</span> <span class="attr">v-show</span>=<span class="string">"showFlag"</span> @<span class="attr">click</span>=<span class="string">"hide"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"food-content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imang-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"food.image"</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p> css样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.food</span></span><br><span class="line">  <span class="selector-tag">position</span> <span class="selector-pseudo">:fixed</span></span><br><span class="line">  <span class="selector-tag">left</span><span class="selector-pseudo">:0</span></span><br><span class="line">  <span class="selector-tag">top</span><span class="selector-pseudo">:0</span></span><br><span class="line">  <span class="selector-tag">bottom</span>: 48<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">z-index</span><span class="selector-pseudo">:30</span></span><br><span class="line">  <span class="selector-tag">width</span> <span class="selector-pseudo">:100</span>%</span><br><span class="line">  <span class="selector-tag">background</span> :<span class="selector-id">#fff</span></span><br><span class="line">  <span class="comment">/*定义元素最终移动到的位置，以及移动到此位置需要的时间*/</span></span><br><span class="line"><span class="selector-class">.slide-enter-active</span></span><br><span class="line">  <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease</span></span><br><span class="line">  <span class="selector-tag">transform</span><span class="selector-pseudo">:translate3d(0</span>,0,0)</span><br><span class="line">  <span class="comment">/*定义元素从什么位置离开，以及离开岛指定位置所需的时间*/</span></span><br><span class="line"><span class="selector-class">.slide-leave-active</span></span><br><span class="line">  <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease</span></span><br><span class="line">  <span class="selector-tag">transform</span><span class="selector-pseudo">:translate3d(0</span>,0,0)</span><br><span class="line">  <span class="comment">/*定义元素从100%的位置移入到0，过渡结束后再从0回到100%的位置*/</span></span><br><span class="line"><span class="selector-class">.slide-enter</span>,<span class="selector-class">.slide-leave-to</span></span><br><span class="line">  <span class="selector-tag">transform</span><span class="selector-pseudo">:translate3d(100</span>%,0,0)</span><br></pre></td></tr></table></figure><p><strong>单组件过渡</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类似的只需要在过度类中填写动画即可</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: fade-in .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>:fade-in .<span class="number">5s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> bounce-in &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">ooacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">ooacity</span>: .<span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">ooacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、自定义过渡类名实现动画"><a href="#二、自定义过渡类名实现动画" class="headerlink" title="二、自定义过渡类名实现动画"></a>二、自定义过渡类名实现动画</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1460f61d58e3115c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>animate.css</code>结合<code>transition</code></p></blockquote><blockquote><p><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">https://daneden.github.io/animate.css/</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggle"</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInRight"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutRight"</span></span></span><br><span class="line"><span class="tag">     &gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 坑：span行内元素（行内元素没有宽） 应该改为块级元素 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;span class="show" v-show="isshow"&gt;it创业&lt;/span&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:200px"</span> <span class="attr">class</span>=<span class="string">"show"</span> <span class="attr">v-show</span>=<span class="string">"isshow"</span>&gt;</span>it创业<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、js钩子函数实现动画"><a href="#三、js钩子函数实现动画" class="headerlink" title="三、js钩子函数实现动画"></a>三、js钩子函数实现动画</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-eefc46df55457ac2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>这些钩子函数可以结合 <code>CSS transitions/animations</code>使用，也可以单独使用。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-enter</span>=<span class="string">"beforeEnter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter</span>=<span class="string">"enter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-enter</span>=<span class="string">"afterEnter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter-cancelled</span>=<span class="string">"enterCancelled"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-leave</span>=<span class="string">"beforeLeave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave</span>=<span class="string">"leave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-leave</span>=<span class="string">"afterLeave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave-cancelled</span>=<span class="string">"leaveCancelled"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="comment">// 进入中</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line">  beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 此回调函数是可选项的设置</span></span><br><span class="line">  <span class="comment">// 与 CSS 结合时使用</span></span><br><span class="line">  enter: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="comment">// 离开时</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line">  beforeLeave: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 此回调函数是可选项的设置</span></span><br><span class="line">  <span class="comment">// 与 CSS 结合时使用</span></span><br><span class="line">  leave: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// leaveCancelled 只用于 v-show 中</span></span><br><span class="line">  leaveCancelled: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当只用 <code>JavaScript</code> 过渡的时候，在 <code>enter</code> 和 <code>leave</code> 中必须使用 <code>done</code> 进行回调。否则，它们将被同步调用，过渡会立即完成</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、transition标签结合css&quot;&gt;&lt;a href=&quot;#一、transition标签结合css&quot; class=&quot;headerlink&quot; title=&quot;一、transition标签结合css&quot;&gt;&lt;/a&gt;一、transition标签结合css&lt;/h2&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue项目中的痛点（十四）</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-project-dev-question/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-project-dev-question/</id>
    <published>2018-08-28T09:10:30.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、列表进入详情页传参"><a href="#一、列表进入详情页传参" class="headerlink" title="一、列表进入详情页传参"></a>一、列表进入详情页传参</h2><blockquote><p>例如商品列表页面前往商品详情页面，需要传一个商品id</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'detail', query: &#123;id: 1&#125;&#125;"</span>&gt;</span>前往detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>c</code>页面的路径为<code>http://localhost:8080/#/detail?id=1</code>，可以看到传了一个参数<code>id=1</code>，并且就算刷新页面id也还会存在。此时在c页面可以通过id来获取对应的详情数据，获取<code>id</code>的方式是<code>this.$route.query.id</code></p></blockquote><p><strong>vue传参方式有：query、params+动态路由传参</strong></p><blockquote><p><code>query</code>通过<code>path</code>切换路由，<code>params</code>通过<code>name</code>切换路由</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// query通过path切换路由</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'Detail', query: &#123; id: 1 &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">// params通过name切换路由</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'Detail', params: &#123; id: 1 &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>query</code>通过<code>this.$route.query</code>来接收参数，<code>params</code>通过<code>this.$route.params</code>来接收参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query通过this.$route.query接收参数</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">this</span>.$route.query.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// params通过this.$route.params来接收参数</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">this</span>.$route.params.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>query</code>传参的<code>url</code>展现方式：<code>/detail?id=1&amp;user=123&amp;identity=1&amp;</code>更多参数</li><li><code>params</code>＋动态路由的<code>url</code>方式：<code>/detail/123</code></li><li><code>params</code>动态路由传参，一定要在路由中定义参数，然后在路由跳转的时候必须要加上参数，否则就是空白页面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;      </span><br><span class="line">    path: &apos;/detail/:id&apos;,      </span><br><span class="line">    name: &apos;Detail&apos;,      </span><br><span class="line">    component: Detail    </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>，<code>params</code>传参时，如果没有在路由中定义参数，也是可以传过去的，同时也能接收到，但是一旦刷新页面，这个参数就不存在了。这对于需要依赖参数进行某些操作的行为是行不通的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 定义的路由中，只定义一个id参数</span><br><span class="line">&#123;</span><br><span class="line">    path: 'detail/:id',</span><br><span class="line">    name: 'Detail',</span><br><span class="line">    components: Detail</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// template中的路由传参，</span><br><span class="line">// 传了一个id参数和一个token参数</span><br><span class="line">// id是在路由中已经定义的参数，而token没有定义</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'Detail', params: &#123; id: 1, token: '123456' &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 在详情页接收</span><br><span class="line">created () &#123;</span><br><span class="line">    // 以下都可以正常获取到</span><br><span class="line">    // 但是页面刷新后，id依然可以获取，而token此时就不存在了</span><br><span class="line">    const id = this.$route.params.id;</span><br><span class="line">    const token = this.$route.params.token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>综上：尽量使用<code>query</code>来传参</p></blockquote><h2 id="二、请求服务器接口跨域"><a href="#二、请求服务器接口跨域" class="headerlink" title="二、请求服务器接口跨域"></a>二、请求服务器接口跨域</h2><blockquote><p>本地开发项目请求服务器接口的时候，因为客户端的同源策略，导致了跨域的问题</p></blockquote><ul><li><code>vue-cli</code>初始化的项目，在配置文件中提供了<code>proxyTable</code>来解决本地开发的跨域问题。<code>config</code>文件的<code>index.js</code>文件中，找到<code>proxyTable</code>选项，进行如下配置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">      <span class="comment">// 用‘/api’开头，代理所有请求到目标服务器</span></span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://jsonplaceholder.typicode.com'</span>, <span class="comment">// 接口域名</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 是否启用跨域</span></span><br><span class="line">        pathRewrite: &#123; <span class="comment">//</span></span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例如请求接口：<code>/api/posts/1 ==&gt;http://jsonplaceholder.typicode.com/posts/1</code></li><li>这个时候就可以在本地环境请求后台接口了</li></ul><h2 id="三、axios的封装和API接口的统一管理"><a href="#三、axios的封装和API接口的统一管理" class="headerlink" title="三、axios的封装和API接口的统一管理"></a>三、axios的封装和API接口的统一管理</h2><ul><li><code>axios</code>的封装，主要是用来帮我们进行请求的拦截和响应的拦截。</li><li>在请求的拦截中我们可以携带<code>userToken</code>，<code>post</code>请求头、<code>qs</code>对<code>post</code>提交数据的序列化等- 在响应的拦截中，我们可以进行根据状态码来进行错误的统一处理等等。</li><li><code>axios</code>接口的统一管理，是做项目时必须的流程。这样可以方便我们管理我们的接口，在接口更新时我们不必再返回到我们的业务代码中去修改接口</li></ul><h2 id="四、UI库的按需加载"><a href="#四、UI库的按需加载" class="headerlink" title="四、UI库的按需加载"></a>四、UI库的按需加载</h2><blockquote><p>这里以vant的按需加载为例，演示vue中ui库怎样进行按需加载</p></blockquote><ul><li>安装： <code>cnpm i vant -S</code></li><li>安装<code>babel-plugin-import</code>插件使其按需加载：  <code>cnpm i babel-plugin-import -D</code></li><li>在 <code>.babelrc</code>文件中中添加插件配置 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">libraryDirectory &#123; </span><br><span class="line"></span><br><span class="line">    <span class="string">"plugins"</span>: [ </span><br><span class="line">        <span class="comment">// 这里是原来的代码部分</span></span><br><span class="line">        <span class="comment">// …………</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里是要我们配置的代码</span></span><br><span class="line">        [<span class="string">"import"</span>, </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="string">"libraryName"</span>: <span class="string">"vant"</span>, </span><br><span class="line">                <span class="string">"libraryDirectory"</span>: <span class="string">"es"</span>, </span><br><span class="line">                <span class="string">"style"</span>: <span class="literal">true</span> </span><br><span class="line">            &#125;</span><br><span class="line">        ] </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>main.js</code>中按需加载你需要的插件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需引入vant组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;   </span><br><span class="line">    DatetimePicker,   </span><br><span class="line">    Button,   </span><br><span class="line">    List </span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>使用组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用vant组件</span></span><br><span class="line">Vue.use(DatetimePicker)  </span><br><span class="line">    .use(Button)  </span><br><span class="line">    .use(List);</span><br></pre></td></tr></table></figure><blockquote><p>最后在在页面中使用：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、定时器问题"><a href="#五、定时器问题" class="headerlink" title="五、定时器问题"></a>五、定时器问题</h2><blockquote><p>在a页面写一个定时，让他每秒钟打印一个1，然后跳转到b页面，此时可以看到，定时器依然在执行。这样是非常消耗性能的</p></blockquote><p><strong>解决方案一</strong></p><blockquote><p>在data函数里面进行定义定时器名称</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;            </span><br><span class="line">    return &#123;                              </span><br><span class="line">        timer: null  // 定时器名称          </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>然后这样使用定时器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.timer = (() =&gt; &#123;</span><br><span class="line">    // 某些操作</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure><blockquote><p>最后在<code>beforeDestroy()</code>生命周期内清除定时器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timer);        </span><br><span class="line">    <span class="keyword">this</span>.timer = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方案1有两点不好的地方</p></blockquote><ul><li>它需要在这个组件实例中保存这个 timer，如果可以的话最好只有生命周期钩子可以访问到它。这并不算严重的问题，但是它可以被视为杂物。</li><li>我们的建立代码独立于我们的清理代码，这使得我们比较难于程序化的清理我们建立的所有东西</li></ul><p><strong>解决方案2</strong></p><blockquote><p>该方法是通过<code>$once</code>这个事件侦听器器在定义完定时器之后的位置来清除定时器。以下是完整代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span>&#123;                    </span><br><span class="line">    <span class="comment">// 某些定时器操作                </span></span><br><span class="line">&#125;, <span class="number">500</span>);            </span><br><span class="line"><span class="comment">// 通过$once来监听定时器，在beforeDestroy钩子可以被清除。</span></span><br><span class="line"><span class="keyword">this</span>.$once(<span class="string">'hook:beforeDestroy'</span>, () =&gt; &#123;            </span><br><span class="line">    clearInterval(timer);                                    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="六、rem文件的导入问题"><a href="#六、rem文件的导入问题" class="headerlink" title="六、rem文件的导入问题"></a>六、rem文件的导入问题</h2><blockquote><p>在做手机端时，适配是必须要处理的一个问题。例如，我们处理适配的方案就是通过写一个<code>rem.js</code>，原理很简单，就是根据网页尺寸计算<code>html</code>的<code>font-size</code>大小</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">; (<span class="function"><span class="keyword">function</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="built_in">document</span>.documentElement || <span class="built_in">document</span>.body,</span><br><span class="line">    a = <span class="string">"orientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span>: <span class="string">"resize"</span>,</span><br><span class="line">    b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> f = e.clientWidth;</span><br><span class="line">        e.style.fontSize = (f &gt;= <span class="number">750</span>) ? <span class="string">"100px"</span>: <span class="number">100</span> * (f / <span class="number">750</span>) + <span class="string">"px"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    b();</span><br><span class="line">    c.addEventListener(a, b, <span class="literal">false</span>)</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><blockquote><p>在<code>main.js</code>中，直接<code>import &#39;./config/rem&#39;</code>导入即可。<code>import</code>的路径根据你的文件路径去填写</p></blockquote><h2 id="七、打包后生成很大的-map文件"><a href="#七、打包后生成很大的-map文件" class="headerlink" title="七、打包后生成很大的.map文件"></a>七、打包后生成很大的.map文件</h2><blockquote><p>项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。 而生成的<code>.map</code>后缀的文件，就可以像未加密的代码一样，准确的输出是哪一行哪一列有错可以通过设置来不生成该类文件。但是我们在生成环境是不需要<code>.map</code>文件的，所以可以在打包时不生成这些文件</p></blockquote><ul><li>在<code>config/index.js</code>文件中，设置<code>productionSourceMap: false</code>,就可以不生成<code>.map</code>文件</li></ul><h2 id="八、fastClick的300ms延迟"><a href="#八、fastClick的300ms延迟" class="headerlink" title="八、fastClick的300ms延迟"></a>八、fastClick的300ms延迟</h2><blockquote><p>在<code>main.js</code>中引入<code>fastClick</code>和初始化</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> FastClick <span class="keyword">from</span> <span class="string">'fastclick'</span>; <span class="comment">// 引入插件</span></span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body); <span class="comment">// 使用 fastclick</span></span><br></pre></td></tr></table></figure><h2 id="九、路由懒加载（延迟加载）"><a href="#九、路由懒加载（延迟加载）" class="headerlink" title="九、路由懒加载（延迟加载）"></a>九、路由懒加载（延迟加载）</h2><blockquote><p>路由懒加载可以帮我们在进入首屏时不用加载过度的资源，从而减少首屏加载速度</p></blockquote><p><strong>非懒加载写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">'@/page/index/index'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;  </span><br><span class="line">    routes: [    </span><br><span class="line">        &#123; </span><br><span class="line">            path: <span class="string">'/'</span>, </span><br><span class="line">            name: <span class="string">'Index'</span>,     </span><br><span class="line">            component: Index </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>路由懒加载写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [    </span><br><span class="line">        &#123; </span><br><span class="line">            path: <span class="string">'/'</span>, </span><br><span class="line">            name: <span class="string">'Index'</span>, </span><br><span class="line">            component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/view/index/index'</span>], resolve) </span><br><span class="line">        &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="十、开启gzip压缩代码"><a href="#十、开启gzip压缩代码" class="headerlink" title="十、开启gzip压缩代码"></a>十、开启gzip压缩代码</h2><blockquote><p><code>spa</code>这种单页应用，首屏由于一次性加载所有资源，所有首屏加载速度很慢。解决这个问题非常有效的手段之一就是前后端开启<code>gizp</code>（其他还有缓存、路由懒加载等等）。<code>gizp</code>其实就是帮我们减少文件体积，能压缩到<code>30%</code>左右，即<code>100k</code>的文件<code>gizp</code>后大约只有<code>30</code>k`</p></blockquote><ul><li><code>vue-cli</code>初始化的项目中，是默认有此配置的，只需要开启即可。但是需要先安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i compression-webpack-plugin</span><br></pre></td></tr></table></figure><ul><li>在<code>config/index.js</code>中开启即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">    ………………</span><br><span class="line">    productionGzip: true, // false不开启gizp，true开启</span><br><span class="line">    ………………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里前端进行的打包时的<code>gzip</code>，但是还需要后台服务器的配置。配置是比较简单的，配置几行代码就可以了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、列表进入详情页传参&quot;&gt;&lt;a href=&quot;#一、列表进入详情页传参&quot; class=&quot;headerlink&quot; title=&quot;一、列表进入详情页传参&quot;&gt;&lt;/a&gt;一、列表进入详情页传参&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;例如商品列表页面前往商品详情页面，需要传一
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue实例方法（十三)</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-$vm-method-props/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-$vm-method-props/</id>
    <published>2018-08-28T08:04:43.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Vue之实例属性"><a href="#一、Vue之实例属性" class="headerlink" title="一、Vue之实例属性"></a>一、Vue之实例属性</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-464e2c77b92ade46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>Vue</code> 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 <code>$</code>，以便与代理的数据属性区分</p></blockquote><p><strong>组件树</strong></p><ul><li><code>$parent</code>：用来访问组件实例的父实例</li><li><code>$root</code>: 用来访问当前组件树的根实例</li><li><code>$children</code>:用来访问当前组件实例的直接子组件实例</li><li><code>$refs</code>:用来访问<code>v-ref</code>指令的子组件</li></ul><p><strong>DOM访问</strong></p><ul><li><code>$el</code>：用来挂载当前组件实例的<code>dom</code>元素</li><li><code>$els</code>：用来访问<code>$el</code>元素中使用了<code>v-el</code>指令的<code>DOM</code>元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app2"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            message : <span class="string">"I am message."</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(vm2.$el);          <span class="comment">//vm2.$el === 原生js中document.getElementById("app2") </span></span></span><br><span class="line"><span class="javascript">    vm2.$el.style.color = <span class="string">"red"</span>;   <span class="comment">//变成红色</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>数据访问</strong></p><ul><li><code>$data</code>：用来访问组件实例观察的数据对象</li><li><code>$options</code>：用来访问组件实例化时的初始化选项对象</li></ul><p><strong>DOM方法的使用</strong></p><ul><li><code>$appendTo(elementOrSelector, callback)</code>：将<code>el</code>所指的<code>DOM</code>元素插入目标元素</li><li><code>$before(elementOrSelector, callback)</code>：将<code>el</code>所指的<code>DOM</code>元素或片段插入目标元素之前</li><li><code>$after(elementOrSelector, callback)</code>：将<code>el</code>所指的<code>DOM</code>元素或片段插入目标元素之后</li><li><code>$remove(callback)</code>：将<code>el</code>所指的<code>DOM</code>元素或片段从<code>DOM</code>中删除</li><li><code>$nextTick(callback)</code>：用来在下一次<code>DOM</code>更新循环后执行指定的回调函数</li></ul><p><strong>event方法的使用</strong></p><ul><li><p><strong>监听</strong></p><ul><li><code>$on(event, callback)</code>：监听实例的自定义事件</li><li><code>$once(event, callback)</code>：同上，但只能触发一次</li></ul></li><li><p><strong>触发</strong></p><ul><li><code>$dispatch(event, args)</code>：派发事件，先在当前实例触发，再沿父链一层层向上，对应的监听函数返回<code>false</code>停止</li><li><code>$broadcast(event, args)</code>：广播事件，遍历当前实例的<code>$children</code>，如果对应的监听函数返回false，就停止</li><li><code>$emit(event, args)</code>：触发事件</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ap2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increase1"</span>&gt;</span> add <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"reduce2()"</span>&gt;</span> reduce2 <span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"offReduce()"</span>&gt;</span> off reduce <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ap2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#ap2"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="undefined">            num:5</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            increase1:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num ++;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// .$on定义事件 .$once定义只触发一次的事件</span></span></span><br><span class="line"><span class="javascript">    ap2.$on(<span class="string">"reduce"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">diff</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        ap2.num -= diff ;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="comment">// .$emit触发事件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">reduce2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        ap2.$emit(<span class="string">"reduce"</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="comment">// .$off解除事件 解除后，定义的reduce事件将不再执行</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">offReduce</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        ap2.$off(<span class="string">"reduce"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、实例方法"><a href="#二、实例方法" class="headerlink" title="二、实例方法"></a>二、实例方法</h2><h3 id="2-1-watch"><a href="#2-1-watch" class="headerlink" title="2.1 $.watch()"></a>2.1 $.watch()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">vm.$data === data <span class="comment">// -&gt; true</span></span><br><span class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>) <span class="comment">// -&gt; true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// $watch 是一个实例方法</span></span><br><span class="line">vm.$watch(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">  <span class="comment">// 这个回调将在 `vm.a`  改变后调用</span></span><br></pre></td></tr></table></figure><h3 id="2-2-vm-nextTick"><a href="#2-2-vm-nextTick" class="headerlink" title="2.2 vm.$nextTick"></a>2.2 vm.$nextTick</h3><blockquote><p>将回调延迟到下次 <code>DOM</code> 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 <code>Vue.nextTick</code> 一样，不同的是回调的 <code>this</code> 自动绑定到调用它的实例上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"vm.$destroy()"</span>&gt;</span>销毁实例 $destroy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"vm.$forceUpdate()"</span>&gt;</span>刷新构造器 $forceUpdate<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"edit()"</span>&gt;</span>更新 $.nextTick(fn)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Header = Vue.extend(&#123;</span></span><br><span class="line"><span class="xml">        template:`<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">        data:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                message:<span class="string">"I am message"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        updated:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"updated 更新之后"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        destroyed:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"destroy 销毁之后"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Header().$mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        vm.message = <span class="string">"new message"</span>;     <span class="comment">//更新数据</span></span></span><br><span class="line"><span class="javascript">        vm.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;      <span class="comment">//更新完成后调用</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"更新完后，我被调用"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>放在<code>Vue.nextTick()</code>回调函数中的执行的应该是会对<code>DOM</code>进行操作的 <code>js</code>代码</p></blockquote><p><strong>什么时候需要用的Vue.nextTick()</strong></p><ul><li>你在<code>Vue</code>生命周期的<code>created()</code>钩子函数进行的<code>DOM</code>操作一定要放在<code>Vue.nextTick()</code>的回调函数中。原因是什么呢，原因是在<code>created()</code>钩子函数执行的时候<code>DOM</code> 其实并未进行任何渲染，而此时进行<code>DOM</code>操作无异于徒劳，所以此处一定要将<code>DOM</code>操作的js代码放进<code>Vue.nextTick()</code>的回调函数中。与之对应的就是<code>mounted</code>钩子函数，因为该钩子函数执行时所有的<code>DOM</code>挂载和渲染都已完成，此时在该钩子函数中进行任何<code>DOM</code>操作都不会有问题 。</li><li>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的<code>DOM</code>结构的时候，这个操作都应该放进<code>Vue.nextTick()</code>的回调函数中</li><li>为了在数据变化之后等待 <code>Vue</code> 完成更新 <code>DOM</code> ，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code> 。这样回调函数在 <code>DOM</code> 更新完成后就会调用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Vue之实例属性&quot;&gt;&lt;a href=&quot;#一、Vue之实例属性&quot; class=&quot;headerlink&quot; title=&quot;一、Vue之实例属性&quot;&gt;&lt;/a&gt;一、Vue之实例属性&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-axios封装请求（十二）</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-axios/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-axios/</id>
    <published>2018-08-28T07:35:32.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、axios-简介"><a href="#一、axios-简介" class="headerlink" title="一、axios 简介"></a>一、axios 简介</h2><blockquote><p><code>axios</code> 是一个基于<code>Promise</code>用于浏览器和 <code>nodejs</code> 的 <code>HTTP</code> 客户端，它本身具有以下特征：</p></blockquote><ul><li>从浏览器中创建 <code>XMLHttpRequest</code></li><li>从 <code>node.js</code> 发出 <code>http</code> 请求</li><li>支持<code>Promise API</code></li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换<code>JSON</code>数据</li><li>客户端支持防止<code>CSRF/XSRF</code></li></ul><h2 id="二、axios基础"><a href="#二、axios基础" class="headerlink" title="二、axios基础"></a>二、axios基础</h2><ul><li><code>axios.request（config）</code></li><li><code>axios.get（url [，config]）</code></li><li><code>axios.delete（url [，config]）</code></li><li><code>axios.head（url [，config]）</code></li><li><code>axios.options（url [，config]）</code></li><li><code>axios.post（url [，data [，config]]</code>）</li><li><code>axios.put（url [，data [，config]]）</code></li><li><code>axios.patch（url [，data [，config]]）</code></li></ul><h2 id="三、执行-GET-请求"><a href="#三、执行-GET-请求" class="headerlink" title="三、执行 GET 请求"></a>三、执行 GET 请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向具有指定ID的用户发出请求</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 也可以通过 params 对象传递参数</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">        ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四、执行-POST-请求"><a href="#四、执行-POST-请求" class="headerlink" title="四、执行 POST 请求"></a>四、执行 POST 请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    userId:<span class="string">"123"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    headers:&#123;</span><br><span class="line">        token:<span class="string">"abc"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="五、通过配置方式发送请求"><a href="#五、通过配置方式发送请求" class="headerlink" title="五、通过配置方式发送请求"></a>五、通过配置方式发送请求</h2><blockquote><p><code>get</code>请求是发送参数，在<code>params</code>中定义。而<code>POST</code>请求是发送<code>request body</code>,需要在<code>data</code>中定义</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 在params中定义</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">"pakage.json"</span>,</span><br><span class="line">    method:<span class="string">"get"</span>,</span><br><span class="line">    params:&#123;</span><br><span class="line">        userId:<span class="string">"123"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    headers:&#123;</span><br><span class="line">        token:<span class="string">"http-test"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// post 在data中定义</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">"pakage.json"</span>,</span><br><span class="line">    method:<span class="string">"post"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        userId:<span class="string">"123"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    headers:&#123;</span><br><span class="line">        token:<span class="string">"http-test"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="六、执行多个并发请求"><a href="#六、执行多个并发请求" class="headerlink" title="六、执行多个并发请求"></a>六、执行多个并发请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAcount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个promise对象</span></span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">"/user/1234"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个promise对象</span></span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">"/user/1234/getUserPermissions"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一次性返回两个接口</span></span><br><span class="line">axios.all([getUserAccount(),getUserPerssions()]).then(axios.spread(<span class="function">(<span class="params">acct, perms</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// spread展开两个返回的结果</span></span><br><span class="line">    <span class="comment">//两个请求现已完成</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="七、全局拦截"><a href="#七、全局拦截" class="headerlink" title="七、全局拦截"></a>七、全局拦截</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:<span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 初始化生命周期的一个函数</span></span><br><span class="line">    mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//拦截请求之前</span></span><br><span class="line">       axios.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="comment">//这里做一些拦截操作,拦截用户的请求 请求之前做一些loading处理</span></span><br><span class="line">           <span class="keyword">return</span> config;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="comment">//拦截响应之后处理</span></span><br><span class="line">       axios.interceptors.response.use(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="comment">//这里做一些拦截操作,响应以后做什么，在返回数据</span></span><br><span class="line">           <span class="keyword">return</span> response;</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">        &#125;,</span><br><span class="line">        post:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="八、请求封装、异常统一处理"><a href="#八、请求封装、异常统一处理" class="headerlink" title="八、请求封装、异常统一处理"></a>八、请求封装、异常统一处理</h2><blockquote><p>vue中采用axios处理网络请求，避免请求接口重复代码，以及各种网络情况造成的异常情况的判断，采用axios请求封装和异常拦截操作</p></blockquote><h3 id="8-1-axios-请求封装"><a href="#8-1-axios-请求封装" class="headerlink" title="8.1 axios 请求封装"></a>8.1 axios 请求封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  引入axios文件包</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 方法封装  (参数处理)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> postRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    data: params,</span><br><span class="line">    transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> ret = <span class="string">''</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">        ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">'&amp;'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret</span><br><span class="line">    &#125;],</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 方法封装  (文件上传)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> uploadFileRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    data: params,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  GET 方法封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getRequest = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    url: url</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  PUT 方法封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> putRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">'put'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    data: params,</span><br><span class="line">    transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> ret = <span class="string">''</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">        ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">'&amp;'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret</span><br><span class="line">    &#125;],</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  DELETE 方法封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteRequest = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">'delete'</span>,</span><br><span class="line">    url: url</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-axios请求异常统一处理"><a href="#8-2-axios请求异常统一处理" class="headerlink" title="8.2 axios请求异常统一处理"></a>8.2 axios请求异常统一处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入依赖包</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Message&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  REQUEST 请求异常拦截</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span> &#123;</span><br><span class="line"> <span class="comment">//==========  所有请求之前都要执行的操作  ==============</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, err=&gt; &#123;</span><br><span class="line"> <span class="comment">//==================  错误处理  ====================</span></span><br><span class="line">  Message.error(&#123;<span class="attr">message</span>: <span class="string">'请求超时!'</span>&#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  RESPONSE 响应异常拦截</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">data</span>=&gt;</span> &#123;</span><br><span class="line"><span class="comment">//==============  所有请求完成后都要执行的操作  ==================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据返回的code值来做不同的处理（和后端约定）</span></span><br><span class="line">    <span class="keyword">switch</span> (data.code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">            <span class="comment">// exp: 修复iPhone 6+ 微信点击返回出现页面空白的问题</span></span><br><span class="line">            <span class="keyword">if</span> (isIOS()) &#123;</span><br><span class="line">                <span class="comment">// 异步以保证数据已渲染到页面上</span></span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 通过滚动强制浏览器进行页面重绘</span></span><br><span class="line">                    <span class="built_in">document</span>.body.scrollTop += <span class="number">1</span></span><br><span class="line">                &#125;, <span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这一步保证数据返回，如果没有return则会走接下来的代码，不是未登录就是报错</span></span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要重新登录</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'SHIRO_E5001'</span>:</span><br><span class="line">            <span class="comment">// 微信生产环境下授权登录</span></span><br><span class="line">            <span class="keyword">if</span> (isWeChat() &amp;&amp; IS_PRODUCTION) &#123;</span><br><span class="line">                axios.get(apis.common.wechat.authorizeUrl).then(<span class="function">(<span class="params">&#123; result &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">                    location.replace(global.decodeURIComponent(result))</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则跳转到h5登录并带上跳转路由</span></span><br><span class="line">                <span class="keyword">const</span> search = encodeSearchParams(&#123;</span><br><span class="line">                    next: location.href,</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                location.replace(<span class="string">`/user/login`</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不显示提示消息</span></span><br><span class="line">            data.description = <span class="string">''</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若不是正确的返回code，且已经登录，就抛出错误</span></span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(data.description)</span><br><span class="line"></span><br><span class="line">    err.data = data</span><br><span class="line">    err.response = response</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二种方式，仅对200和error状态处理</span></span><br><span class="line">  <span class="keyword">if</span> (data.status &amp;&amp; data.status == <span class="number">200</span> &amp;&amp; data.data.status == <span class="string">'error'</span>) &#123;</span><br><span class="line">    Message.error(&#123;<span class="attr">message</span>: data.data.msg&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;, err=&gt; &#123;</span><br><span class="line"><span class="comment">//==============  错误处理  ====================</span></span><br><span class="line">   <span class="keyword">if</span> (err &amp;&amp; err.response) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (err.response.status) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">400</span>: err.message = <span class="string">'请求错误(400)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">401</span>: err.message = <span class="string">'未授权，请重新登录(401)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">403</span>: err.message = <span class="string">'拒绝访问(403)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">404</span>: err.message = <span class="string">'请求出错(404)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">408</span>: err.message = <span class="string">'请求超时(408)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">500</span>: err.message = <span class="string">'服务器错误(500)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">501</span>: err.message = <span class="string">'服务未实现(501)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">502</span>: err.message = <span class="string">'网络错误(502)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">503</span>: err.message = <span class="string">'服务不可用(503)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">504</span>: err.message = <span class="string">'网络超时(504)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">505</span>: err.message = <span class="string">'HTTP版本不受支持(505)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: err.message = <span class="string">`连接出错(<span class="subst">$&#123;err.response.status&#125;</span>)!`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        err.message = <span class="string">'连接服务器失败!'</span></span><br><span class="line">    &#125;</span><br><span class="line">  Message.err( &#123;<span class="attr">message</span>: err.message &#125; )</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>请求出错的时候执行的是：<code>Promise.resolve(err)</code>;，而不是<code>Promise.reject(err)</code>;，这样无论请求成功还是失败，在成功的回调中都能收到通知</p></blockquote><h3 id="8-3-vue-项目中使用该方法"><a href="#8-3-vue-项目中使用该方法" class="headerlink" title="8.3 vue 项目中使用该方法"></a>8.3 vue 项目中使用该方法</h3><blockquote><p>在main.js中导入所有请求方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  导入所有请求方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;getRequest,postRequest,deleteRequest,putRequest&#125; <span class="keyword">from</span> <span class="string">'./utils/api'</span></span><br></pre></td></tr></table></figure><blockquote><p>将请求方法添加至 <code>Vue.prototype</code> 上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  向VUE的原型上添加请求方法</span></span><br><span class="line">Vue.prototype.getRequest = getRequest;</span><br><span class="line">Vue.prototype.postRequest = postRequest;</span><br><span class="line">Vue.prototype.deleteRequest = deleteRequest;</span><br><span class="line">Vue.prototype.putRequest = putRequest;</span><br></pre></td></tr></table></figure><blockquote><p>发送请求（请求方法的调用）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  发送网络请求</span></span><br><span class="line"><span class="keyword">this</span>.postRequest(<span class="string">'/login'</span>, &#123;userName，password&#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="九、接口封装处理"><a href="#九、接口封装处理" class="headerlink" title="九、接口封装处理"></a>九、接口封装处理</h2><blockquote><p><code>vue</code>中<code>Axios</code>的封装与<code>API</code>接口的管理详解</p></blockquote><h3 id="9-1-axios的封装"><a href="#9-1-axios的封装" class="headerlink" title="9.1 axios的封装"></a>9.1 axios的封装</h3><blockquote><p>在<code>vue</code>项目中，和后台交互获取数据这块，我们通常使用的是<code>axios</code>库，它是基于<code>promise</code>的<code>http</code>库，可运行在浏览器端和<code>node.js</code>中。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换<code>json</code>、客户端防御<code>XSRF</code>等</p></blockquote><ul><li>一般我会在项目的<code>src</code>目录中，新建一个<code>request</code>文件夹，然后在里面新建一个<code>http.js</code>和一个<code>api.js</code>文件。<code>http.js</code>文件用来封装我们的<code>axios</code>，<code>api.js</code>用来统一管理我们的接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在http.js中引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; <span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> QS <span class="keyword">from</span> <span class="string">'qs'</span>; <span class="comment">// 引入qs模块，用来序列化post类型的数据，后面会提到</span></span><br><span class="line"><span class="comment">// vant的toast提示框组件，大家可根据自己的ui组件更改。</span></span><br><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br></pre></td></tr></table></figure><h3 id="9-2-环境的切换"><a href="#9-2-环境的切换" class="headerlink" title="9.2 环境的切换"></a>9.2 环境的切换</h3><blockquote><p>我们的项目环境可能有开发环境、测试环境和生产环境。我们通过<code>node</code>的环境变量来匹配我们的默认的接口<code>url</code>前缀。<code>axios.defaults.baseURL</code>可以设置<code>axios</code>的默认请求地址就不多说了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 环境的切换</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'development'</span>) &#123; </span><br><span class="line"> axios.defaults.baseURL = <span class="string">'https://www.baidu.com'</span>;&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'debug'</span>) &#123; </span><br><span class="line"> axios.defaults.baseURL = <span class="string">'https://www.ceshi.com'</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'production'</span>) &#123; </span><br><span class="line"> axios.defaults.baseURL = <span class="string">'https://www.production.com'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-设置请求超时"><a href="#9-3-设置请求超时" class="headerlink" title="9.3 设置请求超时"></a>9.3 设置请求超时</h3><blockquote><p>通过<code>axios.defaults.timeout</code>设置默认的请求超时时间。例如超过了10s，就会告知用户当前请求超时，请刷新等</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.timeout = 10000;</span><br></pre></td></tr></table></figure><blockquote><p><code>post</code>请求头的设置<code>post</code>请求的时候，我们需要加上一个请求头，所以可以在这里进行一个默认的设置，即设置<code>post</code>的请求头为<code>application/x-www-form-urlencoded;charset=UTF-8</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencode</span><br></pre></td></tr></table></figure><h3 id="9-4-请求拦截"><a href="#9-4-请求拦截" class="headerlink" title="9.4 请求拦截"></a>9.4 请求拦截</h3><blockquote><p>我们在发送请求前可以进行一个请求的拦截，为什么要拦截呢，我们拦截请求是用来做什么的呢？比如，有些请求是需要用户登录之后才能访问的，或者post请求的时候，我们需要序列化我们提交的数据。这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先导入vuex,因为我们要使用到里面的状态对象</span></span><br><span class="line"><span class="comment">// vuex的路径根据自己的路径去写</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器axios.interceptors.request.use( </span></span><br><span class="line"> config =&gt; &#123; </span><br><span class="line"> <span class="comment">// 每次发送请求之前判断vuex中是否存在token </span></span><br><span class="line"> <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span></span><br><span class="line"> <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断 </span></span><br><span class="line"> <span class="keyword">const</span> token = store.state.token; </span><br><span class="line"> token &amp;&amp; (config.headers.Authorization = token); </span><br><span class="line"> <span class="keyword">return</span> config; </span><br><span class="line"> &#125;, </span><br><span class="line"> error =&gt; &#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Promise</span>.error(error); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>一般是在登录完成之后，将用户的<code>token</code>通过<code>localStorage</code>或者<code>cookie</code>存在本地，然后用户每次在进入页面的时候（即在<code>main.js</code>中），会首先从本地存储中读取<code>token</code>，如果<code>token</code>存在说明用户已经登陆过，则更新vuex中的token状态。然后，在每次请求接口的时候，都会在请求的<code>header</code>中携带<code>token</code>，后台人员就可以根据你携带的<code>token</code>来判断你的登录是否过期，如果没有携带，则说明没有登录过。这时候或许有些小伙伴会有疑问了，就是每个请求都携带<code>token</code>，那么要是一个页面不需要用户登录就可以访问的怎么办呢？其实，你前端的请求可以携带<code>token</code>，但是后台可以选择不接收啊！</p></blockquote><h3 id="9-5-响应的拦截"><a href="#9-5-响应的拦截" class="headerlink" title="9.5 响应的拦截"></a>9.5 响应的拦截</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.interceptors.response.use( </span><br><span class="line"> response =&gt; &#123; </span><br><span class="line"> <span class="comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据 </span></span><br><span class="line"> <span class="comment">// 否则的话抛出错误</span></span><br><span class="line"> <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response); </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;, </span><br><span class="line"> <span class="comment">// 服务器状态码不是2开头的的情况</span></span><br><span class="line"> <span class="comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码 </span></span><br><span class="line"> <span class="comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span></span><br><span class="line"> <span class="comment">// 下面列举几个常见的操作，其他需求可自行扩展</span></span><br><span class="line"> error =&gt; &#123;  </span><br><span class="line"> <span class="keyword">if</span> (error.response.status) &#123;  </span><br><span class="line">  <span class="keyword">switch</span> (error.response.status) &#123;  </span><br><span class="line">  <span class="comment">// 401: 未登录</span></span><br><span class="line">  <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span><br><span class="line">  <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。  </span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">401</span>:   </span><br><span class="line">   router.replace(&#123;   </span><br><span class="line">   path: <span class="string">'/login'</span>,   </span><br><span class="line">   query: &#123; </span><br><span class="line">    redirect: router.currentRoute.fullPath </span><br><span class="line">   &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 403 token过期</span></span><br><span class="line">  <span class="comment">// 登录过期对用户进行提示</span></span><br><span class="line">  <span class="comment">// 清除本地token和清空vuex中token对象</span></span><br><span class="line">  <span class="comment">// 跳转登录页面  </span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">   Toast(&#123;</span><br><span class="line">   message: <span class="string">'登录过期，请重新登录'</span>,</span><br><span class="line">   duration: <span class="number">1000</span>,</span><br><span class="line">   forbidClick: <span class="literal">true</span></span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">// 清除token</span></span><br><span class="line">   localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">   store.commit(<span class="string">'loginSuccess'</span>, <span class="literal">null</span>);</span><br><span class="line">   <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 </span></span><br><span class="line">   setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;   </span><br><span class="line">   router.replace(&#123;    </span><br><span class="line">    path: <span class="string">'/login'</span>,    </span><br><span class="line">    query: &#123; </span><br><span class="line">    redirect: router.currentRoute.fullPath </span><br><span class="line">    &#125;   </span><br><span class="line">   &#125;);   </span><br><span class="line">   &#125;, <span class="number">1000</span>);   </span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 404请求不存在</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">   Toast(&#123;</span><br><span class="line">   message: <span class="string">'网络请求不存在'</span>,</span><br><span class="line">   duration: <span class="number">1500</span>,</span><br><span class="line">   forbidClick: <span class="literal">true</span></span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">// 其他错误，直接抛出错误提示</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">   Toast(&#123;</span><br><span class="line">   message: error.response.data.message,</span><br><span class="line">   duration: <span class="number">1500</span>,</span><br><span class="line">   forbidClick: <span class="literal">true</span></span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。例如上面的思想：如果后台返回的状态码是200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作</p></blockquote><ul><li>要注意的是，上面的<code>Toast()</code>方法，是我引入的<code>vant</code>库中的<code>toast</code>轻提示组件，你根据你的<code>ui</code>库，对应使用你的一个提示组件</li></ul><h3 id="9-6-封装get方法和post方法"><a href="#9-6-封装get方法和post方法" class="headerlink" title="9.6 封装get方法和post方法"></a>9.6 封装get方法和post方法</h3><blockquote><p>我们常用的<code>ajax</code>请求方法有<code>get</code>、<code>post</code>、<code>put</code>等方法。<code>axios</code>对应的也有很多类似的方法，不清楚的可以看下文档。但是为了简化我们的代码，我们还是要对其进行一个简单的封装。下面我们主要封装两个方法：<code>get</code>和<code>post</code></p></blockquote><ul><li><code>get</code>方法：我们通过定义一个<code>get</code>函数，<code>get</code>函数有两个参数，第一个参数表示我们要请求的<code>url</code>地址，第二个参数是我们要携带的请求参数。<code>get</code>函数返回一个<code>promise</code>对象，当<code>axios</code>其请求成功时<code>resolve</code>服务器返回值，请求失败时<code>reject</code>错误值。最后通过<code>export</code>抛出<code>get</code>函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params</span>)</span>&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123; </span><br><span class="line"> axios.get(url, &#123;  </span><br><span class="line">  params: params </span><br><span class="line"> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  resolve(res.data);</span><br><span class="line"> &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">  reject(err.data) </span><br><span class="line"> &#125;) </span><br><span class="line">&#125;);&#125;</span><br></pre></td></tr></table></figure><ul><li><code>post</code>方法：原理同<code>get</code>基本一样，但是要注意的是，<code>post</code>方法必须要使用对提交从参数对象进行序列化的操作，所以这里我们通过<code>node</code>的<code>qs</code>模块来序列化我们的参数。这个很重要，如果没有序列化操作，后台是拿不到你提交的数据的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * post方法，对应post请求 </span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url [请求的url地址] </span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; params [请求时携带的参数] </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  axios.post(url, QS.stringify(params))</span><br><span class="line"> .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  resolve(res.data);</span><br><span class="line"> &#125;)</span><br><span class="line"> .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">  reject(err.data)</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>axios.get()</code>方法和<code>axios.post()</code>在提交数据时参数的书写方式还是有区别的。区别就是，<code>get</code>的第二个参数是一个<code>{}</code>，然后这个对象的<code>params</code>属性值是一个参数对象的。而<code>post</code>的第二个参数就是一个参数对象</p></blockquote><h3 id="9-7-api的统一管理"><a href="#9-7-api的统一管理" class="headerlink" title="9.7 api的统一管理"></a>9.7 api的统一管理</h3><blockquote><p>首先我们在<code>api.js</code>中引入我们封装的<code>get</code>和<code>post</code>方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * api接口统一管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; get, post &#125; <span class="keyword">from</span> <span class="string">'./http'</span></span><br></pre></td></tr></table></figure><p>在<code>api.js</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const apiAddress = param =&gt; post(&apos;api/v1/users&apos;,param)</span><br></pre></td></tr></table></figure><p>在我们的页面中可以这样调用我们的<code>api</code>接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; apiAddress &#125; <span class="keyword">from</span> <span class="string">'@/request/api'</span>;<span class="comment">// 导入我们的api接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  </span><br><span class="line"> name: <span class="string">'Address'</span>, </span><br><span class="line"> created () &#123;</span><br><span class="line">  <span class="keyword">this</span>.onLoad();</span><br><span class="line"> &#125;,</span><br><span class="line"> methods: &#123;   </span><br><span class="line">  <span class="comment">// 获取数据   </span></span><br><span class="line">  onLoad() &#123;</span><br><span class="line">   <span class="comment">// 调用api接口，并且提供了两个参数    </span></span><br><span class="line">   apiAddress(&#123;     </span><br><span class="line">    type: <span class="number">0</span>,     </span><br><span class="line">    sort: <span class="number">1</span>    </span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取数据成功后的其他操作</span></span><br><span class="line">    ………………    </span><br><span class="line">   &#125;)   </span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-8-完整封装代码"><a href="#9-8-完整封装代码" class="headerlink" title="9.8 完整封装代码"></a>9.8 完整封装代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**axios封装</span></span><br><span class="line"><span class="comment"> * 请求拦截、相应拦截、错误统一处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> QS <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">Toast</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store/index'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境的切换</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'development'</span>) &#123;</span><br><span class="line">axios.defaults.baseURL = <span class="string">'/api'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'debug'</span>) &#123;</span><br><span class="line">axios.defaults.baseURL = <span class="string">''</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'production'</span>) &#123;</span><br><span class="line">axios.defaults.baseURL = <span class="string">'http://api.123dailu.com/'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求超时时间</span></span><br><span class="line">axios.defaults.timeout = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求头</span></span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">config = &gt; &#123;</span><br><span class="line"><span class="comment">// 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span><br><span class="line"><span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line"><span class="keyword">const</span> token = store.state.token;</span><br><span class="line">token &amp;&amp; (config.headers.Authorization = token);</span><br><span class="line"><span class="keyword">return</span> config;</span><br><span class="line">&#125;, error = &gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.error(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">response = &gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 服务器状态码不是200的情况 </span></span><br><span class="line">error = &gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (error.response.status) &#123;</span><br><span class="line"><span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line"><span class="comment">// 401: 未登录    </span></span><br><span class="line"><span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径    </span></span><br><span class="line"><span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">router.replace(&#123;</span><br><span class="line">path: <span class="string">'/login'</span>,</span><br><span class="line">query: &#123;</span><br><span class="line">redirect: router.currentRoute.fullPath</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 403 token过期    </span></span><br><span class="line"><span class="comment">// 登录过期对用户进行提示    </span></span><br><span class="line"><span class="comment">// 清除本地token和清空vuex中token对象    </span></span><br><span class="line"><span class="comment">// 跳转登录页面    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">Toast(&#123;</span><br><span class="line">message: <span class="string">'登录过期，请重新登录'</span>,</span><br><span class="line">duration: <span class="number">1000</span>,</span><br><span class="line">forbidClick: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 清除token     </span></span><br><span class="line">localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">store.commit(<span class="string">'loginSuccess'</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span></span><br><span class="line">setTimeout(() = &gt; &#123;</span><br><span class="line">router.replace(&#123;</span><br><span class="line">path: <span class="string">'/login'</span>,</span><br><span class="line">query: &#123;</span><br><span class="line">redirect: router.currentRoute.fullPath</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 404请求不存在    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">Toast(&#123;</span><br><span class="line">message: <span class="string">'网络请求不存在'</span>,</span><br><span class="line">duration: <span class="number">1500</span>,</span><br><span class="line">forbidClick: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 其他错误，直接抛出错误提示    </span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">Toast(&#123;</span><br><span class="line">message: error.response.data.message,</span><br><span class="line">duration: <span class="number">1500</span>,</span><br><span class="line">forbidClick: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) = &gt; &#123;</span><br><span class="line">axios.get(url, &#123;</span><br><span class="line">params: params</span><br><span class="line">&#125;).then(res = &gt; &#123;</span><br><span class="line">resolve(res.data);</span><br><span class="line">&#125;).</span><br><span class="line"><span class="keyword">catch</span> (err = &gt; &#123;</span><br><span class="line">reject(err.data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * post方法，对应post请求</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) = &gt; &#123;</span><br><span class="line">axios.post(url, QS.stringify(params)).then(res = &gt; &#123;</span><br><span class="line">resolve(res.data);</span><br><span class="line">&#125;).</span><br><span class="line"><span class="keyword">catch</span> (err = &gt; &#123;</span><br><span class="line">reject(err.data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、axios-简介&quot;&gt;&lt;a href=&quot;#一、axios-简介&quot; class=&quot;headerlink&quot; title=&quot;一、axios 简介&quot;&gt;&lt;/a&gt;一、axios 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;axios&lt;/code&gt; 是一个基于&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue路由（十一）</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-router/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-router/</id>
    <published>2018-08-28T07:30:32.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、路由基础介绍"><a href="#一、路由基础介绍" class="headerlink" title="一、路由基础介绍"></a>一、路由基础介绍</h2><h3 id="1-1-什么是前端路由"><a href="#1-1-什么是前端路由" class="headerlink" title="1.1 什么是前端路由"></a>1.1 什么是前端路由</h3><ul><li>路由是根据不同的<code>url</code>地址展示不同的内容或页面</li><li>前端路由就是把不同的路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据<code>url</code>的不同返回不同的页面实现的</li></ul><h3 id="1-2-什么时候使用前端路由"><a href="#1-2-什么时候使用前端路由" class="headerlink" title="1.2 什么时候使用前端路由"></a>1.2 什么时候使用前端路由</h3><ul><li>在单页面应用，大部分结构不变，只改变内容的使用</li></ul><h3 id="1-3-前端路由优点、缺点"><a href="#1-3-前端路由优点、缺点" class="headerlink" title="1.3 前端路由优点、缺点"></a>1.3 前端路由优点、缺点</h3><ul><li><strong>优点</strong>：<ul><li>用户体验好，不需要每次都从服务器全部获取，快速展现给用户</li></ul></li><li><strong>缺点</strong>：<ul><li>不利于<code>SEO</code></li><li>使用浏览器的前进，后退键的时候会重新发送请求，没有合理的利用缓存</li><li>单页面无法记住之前滚动的位置，无法再前进，后退的时候记住滚动的位置</li></ul></li></ul><h2 id="二、vue-router用来构建SPA"><a href="#二、vue-router用来构建SPA" class="headerlink" title="二、vue-router用来构建SPA"></a>二、vue-router用来构建SPA</h2><h3 id="2-1-开始"><a href="#2-1-开始" class="headerlink" title="2.1 开始"></a>2.1 开始</h3><blockquote><p>在你的文件夹下的 <code>src</code> 文件夹下的 <code>main.js</code> 文件内写入以下代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>vue-router</code>其实就是对<code>history</code>的封装</li><li>地址后面跟<code>#</code>其实就是用了<code>hash</code></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义模版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        第一个router</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        第二个router</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">"/one"</span>,</span><br><span class="line"></span><br><span class="line">        component:&#123;<span class="attr">template</span>:<span class="string">"#a"</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">"/two"</span>,</span><br><span class="line">        component:&#123;<span class="attr">template</span>:<span class="string">"#b"</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 定义路由组件</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义路由</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#box"</span>,</span><br><span class="line">    router</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建和挂载实例</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/one"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt; router-link &gt;</code> 默认会被渲染成一个 <code>&lt;a&gt;</code> 标签 <code>to=&quot;&quot;</code>为我们定义的路由</li><li><code>&lt; router-view &gt;</code> 路由匹配到的组件将渲染在这里</li></ul><ul><li>在<code>new Router</code>中指定<code>mode</code>为<code>history</code>即可去掉<code>#</code>，这样加载更加逼真符合预期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">"history"</span>,</span><br><span class="line">    routes: []</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//router-link跳转标签 当a标签使用，to必须是一个绝对地址</span></span><br><span class="line">&lt;router-link to=<span class="string">"/goods/title"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//或者</span></span><br><span class="line"><span class="xml">this.$router.push(&#123;path:""&#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 组件的渲染 配合router—link使用</span></span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-动态路由匹配"><a href="#2-2-动态路由匹配" class="headerlink" title="2.2 动态路由匹配"></a>2.2 动态路由匹配</h3><blockquote><p>通过变化的地址去加载信息</p></blockquote><table><thead><tr><th>模式</th><th>匹配路径</th><th><code>$route.params</code></th></tr></thead><tbody><tr><td><code>/user/:username</code></td><td><code>/user/poetries</code></td><td><code>{username:&quot;poetries&quot;}</code></td></tr><tr><td><code>/user/:username/post/:post_id</code></td><td><code>/user/poetries/post/123</code></td><td><code>{username:&quot;evan&quot;,post_id:123}</code></td></tr></tbody></table><ul><li>应用场景<ul><li>商城的详情页，要变换商品的<code>id</code>，根据商品的<code>id</code>去查对应商品的信息</li></ul></li></ul><h3 id="2-3-嵌套路由"><a href="#2-3-嵌套路由" class="headerlink" title="2.3 嵌套路由"></a>2.3 嵌套路由</h3><ul><li>什么是嵌套路由<ul><li>路由嵌套路由</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">"history"</span>,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">"/goods"</span>, </span><br><span class="line">            name: <span class="string">"GoodsList"</span>,</span><br><span class="line">            component:GoodsList,</span><br><span class="line">            children: [ <span class="comment">// 定义子组件</span></span><br><span class="line">               &#123;</span><br><span class="line">                   path:<span class="string">"title"</span>,<span class="comment">//最后形式/goods/title</span></span><br><span class="line">                   name:<span class="string">"title"</span>,</span><br><span class="line">                   component:Title</span><br><span class="line">               &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-4-编程式路由"><a href="#2-4-编程式路由" class="headerlink" title="2.4 编程式路由"></a>2.4 编程式路由</h3><blockquote><p>通过js来实现页面的跳转</p></blockquote><ul><li>通过<code>push</code>名字就可以实现页面的跳转</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">"name"</span>) <span class="comment">//name /cart</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二 </span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">"name"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三 传递参数</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">"name?a=123"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">"name"</span>,<span class="attr">query</span>:&#123;<span class="attr">a</span>:<span class="number">123</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式四 </span></span><br><span class="line"><span class="keyword">this</span>.$router.go(<span class="number">1</span>) <span class="comment">//$router其实就是对history的封装</span></span><br></pre></td></tr></table></figure><ul><li>如何拿到传递过来的参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">"/cart?goodsId=123"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如何在页面上拿到goodsId--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;$.route.query.goodsId&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>$route.params</code>是组件跟组件之间路由切换的时候，参数传递</li></ul><h3 id="2-5-命名路由"><a href="#2-5-命名路由" class="headerlink" title="2.5 命名路由"></a>2.5 命名路由</h3><blockquote><p>有时我们通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 <code>Router</code> 实例的时候，在 <code>routes</code> 配置中给某个路由设置名称</p></blockquote><blockquote><ul><li>给路由定义不同的名字，根据名字进行匹配</li><li>给不同的<code>router-view</code>定义名字，通过名字进行对应组件渲染</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">"history"</span>,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">"/cart/:cartId"</span>, </span><br><span class="line">            name: <span class="string">"cart"</span>,</span><br><span class="line">            component:GoodsList,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>之前的跳转方式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/cart"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>根据路由名字跳转。以下是一个命名的路由，而且还带了参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"&#123;&#123;name:'cart',params:&#123;cartId:123&#125;&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--params是路由的参数，并不是页面之间跳转的参数--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-命名视图"><a href="#2-6-命名视图" class="headerlink" title="2.6 命名视图"></a>2.6 命名视图</h3><blockquote><p>有时候想同时（同级）展示多个视图，而不是嵌套展示，例如创建一个布局，有 <code>·sidebar·</code>（侧导航） 和<code>main</code>（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 <code>router-view</code> 没有设置名字，那么默认为 <code>default</code></p></blockquote><ul><li>实现一个命名的视图（很少用到）<ul><li>给<code>router-view</code>加<code>name</code>值</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"image"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>页面一进来就加载三个<code>router-view</code>。实现方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">"history"</span>,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">"/"</span>, </span><br><span class="line">            name: <span class="string">"cart"</span>,</span><br><span class="line">            <span class="comment">// 根据不同的name值去加载对应的router-view,映射到对应的组件</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                <span class="keyword">default</span>:GoodsList,</span><br><span class="line">                title:Title,</span><br><span class="line">                img:Image</span><br><span class="line">            &#125;,</span><br><span class="line">            path:<span class="string">"/cart/:cartId"</span>, </span><br><span class="line">            name: <span class="string">"cart"</span>,</span><br><span class="line">            component:Cart</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当我们的视图如上时,我们会发现每一个路由被渲染了两次,所以我们需要为视图命名</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var Foo = &#123; template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span>' &#125;</span><br><span class="line">var Bar = &#123; template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span>' &#125;</span><br><span class="line">var routes = [</span><br><span class="line">        &#123;</span><br><span class="line">            path:"/one",</span><br><span class="line">            name:"one",</span><br><span class="line">            components:&#123;</span><br><span class="line">                a:Foo,</span><br><span class="line">                b:Bar</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="2-7-重定向和别名"><a href="#2-7-重定向和别名" class="headerlink" title="2.7 重定向和别名"></a>2.7 重定向和别名</h3><p><strong>重定向</strong></p><blockquote><p>重定向(<code>Redirect</code>)就是通过各种方法将各种网络请求重新定个方向转到其它位置,用于网站调整或网页被移到一个新地址,它也是通过 <code>routes</code> 配置来完成，下面例子是从 <code>/a</code> 重定向到 <code>/b</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/a'</span>, <span class="attr">redirect</span>: <span class="string">'/b'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>别名</strong></p><blockquote><p><code>/a</code> 的别名是 <code>/b</code>，意味着，当用户访问<code>/b</code> 时，<code>URL</code> 会保持为 <code>/b</code>，但是路由匹配则为 <code>/a</code>，就像用户访问<code>/a</code> 一样。简单的说就是给 /a 起了一个外号叫做 <code>/b</code> ,但是本质上还是 <code>/a</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/a'</span>, <span class="attr">component</span>: A, <span class="attr">alias</span>: <span class="string">'/b'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-8-列表进入详情页传参"><a href="#2-8-列表进入详情页传参" class="headerlink" title="2.8 列表进入详情页传参"></a>2.8 列表进入详情页传参</h3><blockquote><p>例如商品列表页面前往商品详情页面，需要传一个商品id</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'detail', query: &#123;id: 1&#125;&#125;"</span>&gt;</span>前往detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>c</code>页面的路径为<code>http://localhost:8080/#/detail?id=1</code>，可以看到传了一个参数<code>id=1</code>，并且就算刷新页面id也还会存在。此时在c页面可以通过id来获取对应的详情数据，获取<code>id</code>的方式是<code>this.$route.query.id</code></p></blockquote><p><strong>vue传参方式有：query、params+动态路由传参</strong></p><blockquote><p><code>query</code>通过<code>path</code>切换路由，<code>params</code>通过<code>name</code>切换路由</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// query通过path切换路由</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'Detail', query: &#123; id: 1 &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">// params通过name切换路由</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'Detail', params: &#123; id: 1 &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>query</code>通过<code>this.$route.query</code>来接收参数，<code>params</code>通过<code>this.$route.params</code>来接收参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query通过this.$route.query接收参数</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">this</span>.$route.query.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// params通过this.$route.params来接收参数</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">this</span>.$route.params.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>query</code>传参的<code>url</code>展现方式：<code>/detail?id=1&amp;user=123&amp;identity=1&amp;</code>更多参数</li><li><code>params</code>＋动态路由的<code>url</code>方式：<code>/detail/123</code></li><li><code>params</code>动态路由传参，一定要在路由中定义参数，然后在路由跳转的时候必须要加上参数，否则就是空白页面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;      </span><br><span class="line">    path: &apos;/detail/:id&apos;,      </span><br><span class="line">    name: &apos;Detail&apos;,      </span><br><span class="line">    component: Detail    </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>，<code>params</code>传参时，如果没有在路由中定义参数，也是可以传过去的，同时也能接收到，但是一旦刷新页面，这个参数就不存在了。这对于需要依赖参数进行某些操作的行为是行不通的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 定义的路由中，只定义一个id参数</span><br><span class="line">&#123;</span><br><span class="line">    path: 'detail/:id',</span><br><span class="line">    name: 'Detail',</span><br><span class="line">    components: Detail</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// template中的路由传参，</span><br><span class="line">// 传了一个id参数和一个token参数</span><br><span class="line">// id是在路由中已经定义的参数，而token没有定义</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'Detail', params: &#123; id: 1, token: '123456' &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 在详情页接收</span><br><span class="line">created () &#123;</span><br><span class="line">    // 以下都可以正常获取到</span><br><span class="line">    // 但是页面刷新后，id依然可以获取，而token此时就不存在了</span><br><span class="line">    const id = this.$route.params.id;</span><br><span class="line">    const token = this.$route.params.token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、路由基础介绍&quot;&gt;&lt;a href=&quot;#一、路由基础介绍&quot; class=&quot;headerlink&quot; title=&quot;一、路由基础介绍&quot;&gt;&lt;/a&gt;一、路由基础介绍&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是前端路由&quot;&gt;&lt;a href=&quot;#1-1-什么是前端路由&quot; class
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue计算属性与数据监听（十）</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-computed-watch/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-computed-watch/</id>
    <published>2018-08-28T06:10:42.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、监听属性"><a href="#一、监听属性" class="headerlink" title="一、监听属性"></a>一、监听属性</h2><blockquote><p>我们在工作中常常需要监听某一个属性值的变化，这个时候我们就需要用到了监听属性<code>watch</code></p></blockquote><h3 id="1-1-基础版监听"><a href="#1-1-基础版监听" class="headerlink" title="1.1 基础版监听"></a>1.1 基础版监听</h3><blockquote><p>场景如下：输入框输入你的年龄，如果年龄在0-15岁提示信息：你还是个小孩，如果年龄在 15-25岁，提示信息：你已经是个少年，如果年龄在25岁以上，提示信息：你已经长大了</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  年齡：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  提示信息：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;infoMsg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"> data() &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">   age: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">   infoMsg:<span class="string">""</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> &#125;,</span></span><br><span class="line"><span class="undefined"> watch:&#123;</span></span><br><span class="line"><span class="javascript">  age:<span class="function"><span class="keyword">function</span>(<span class="params">val,oldval</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">if</span>(val&gt;<span class="number">0</span> &amp;&amp; val&lt;<span class="number">15</span>)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.infoMsg=<span class="string">"你还是个小孩"</span></span></span><br><span class="line"><span class="javascript">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val&gt;<span class="number">15</span> &amp;&amp; val&lt;<span class="number">25</span>)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.infoMsg=<span class="string">"你已经是个少年"</span></span></span><br><span class="line"><span class="javascript">   &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.infoMsg=<span class="string">"你已经长大了"</span></span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-进阶版监听"><a href="#1-2-进阶版监听" class="headerlink" title="1.2 进阶版监听"></a>1.2 进阶版监听</h3><blockquote><p>下面我们改变一下需求：基础规则不变，但是因为后台数据库的更改,我们需要提交一个这样的数据结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">   info: &#123;</span><br><span class="line">    age: <span class="string">""</span></span><br><span class="line">   &#125;,</span><br><span class="line">   infoMsg: <span class="string">""</span></span><br><span class="line">  &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>由于我们监听的是对象<code>info</code>中的属性<code>age</code>值的变化，所以我们需要使用到的是深度监听，具体代码如下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  年齡：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"info.age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  提示信息：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;infoMsg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"> data() &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">   info: &#123;</span></span><br><span class="line"><span class="javascript">    age: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="javascript">   infoMsg: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"> &#125;,</span></span><br><span class="line"><span class="undefined"> watch: &#123;</span></span><br><span class="line"><span class="undefined">  info: &#123;</span></span><br><span class="line"><span class="javascript">   handler: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldval</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (val.age &gt; <span class="number">0</span> &amp;&amp; val.age &lt; <span class="number">15</span>) &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你还是个小孩"</span>;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val.age &gt; <span class="number">15</span> &amp;&amp; val.age &lt; <span class="number">25</span>) &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你已经是个少年"</span>;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你已经长大了"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="javascript">   deep: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里的<code>function</code>不能使用箭头函数替代，如果使用箭头函数的话，<code>this</code>的指向会是全局</li><li>你会注意到这里多加入一个属性是<code>deep</code>，它的含义表示是否开启深度监听，如果开启值为<code>true</code>，反之为<code>false</code></li></ul><h3 id="1-3-高级版监听"><a href="#1-3-高级版监听" class="headerlink" title="1.3 高级版监听"></a>1.3 高级版监听</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  年齡：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"info.age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  提示信息：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;infoMsg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"> data() &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">   info: &#123;</span></span><br><span class="line"><span class="javascript">    age: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">    name: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">    hobit: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="javascript">   infoMsg: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"> &#125;,</span></span><br><span class="line"><span class="undefined"> computed: &#123;</span></span><br><span class="line"><span class="javascript">  ageval: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">return</span> <span class="keyword">this</span>.info.age;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> &#125;,</span></span><br><span class="line"><span class="undefined"> watch: &#123;</span></span><br><span class="line"><span class="undefined">  ageval: &#123;</span></span><br><span class="line"><span class="javascript">   handler: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldval</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (val &gt; <span class="number">0</span> &amp;&amp; val &lt; <span class="number">15</span>) &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你还是个小孩"</span>;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; <span class="number">15</span> &amp;&amp; val &lt; <span class="number">25</span>) &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你已经是个少年"</span>;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你已经长大了"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="javascript">   deep: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这次我们监听的是计算属性<code>ageval</code>，而计算属性返回的则是<code>info</code>对象中<code>age</code>的值，与第二次的代码进行比较我们可以发现两次代码中监听的一个是对象<code>info</code>，一个是<code>info</code>对象中<code>age</code>的值</p></blockquote><h2 id="二、计算属性"><a href="#二、计算属性" class="headerlink" title="二、计算属性"></a>二、计算属性</h2><h3 id="2-1-什么是计算属性"><a href="#2-1-什么是计算属性" class="headerlink" title="2.1 什么是计算属性"></a>2.1 什么是计算属性</h3><blockquote><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>遇到复杂逻辑时应该使用Vue特带的计算属性<code>computed</code>来进行处理</p></blockquote><h3 id="2-2-计算属性的用法"><a href="#2-2-计算属性的用法" class="headerlink" title="2.2 计算属性的用法"></a>2.2 计算属性的用法</h3><blockquote><p>在一个计算属性里可以完成各种复杂的逻辑，包括运算、函数调用等，只要最终返回一个结果就可以</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span>　<span class="comment">&lt;!--我们把复杂处理放在了计算属性里面了--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'Hello'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>计算属性还可以依赖多个Vue 实例的数据，只要其中任一数据变化，计算属性就会重新执行，视图也会更新</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>补充货物1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>总价为：&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;        </span><br><span class="line">       el: <span class="string">'#app'</span>, </span><br><span class="line">   data: &#123;</span><br><span class="line">       package1: &#123;</span><br><span class="line">           count: <span class="number">5</span>,</span><br><span class="line">           price: <span class="number">5</span></span><br><span class="line">       &#125;,</span><br><span class="line">       package2: &#123;</span><br><span class="line">           count: <span class="number">10</span>,</span><br><span class="line">           price: <span class="number">10</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">     price: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.package1.count*<span class="keyword">this</span>.package1.price+<span class="keyword">this</span>.package2.count*<span class="keyword">this</span>.package2.price　　<span class="comment">//总价随着货物或价格的改变会重新计算</span></span><br><span class="line">     &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;   <span class="comment">//对象的方法</span></span><br><span class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.package1.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>每一个计算属性都包含一个<code>getter</code> 和一个<code>setter</code> ，我们上面的两个示例都是计算属性的默认用法， 只是利用了<code>getter</code> 来读取</li><li>在你需要时，也可以提供一个<code>setter</code> 函数， 当手动修改计算属性的值就像修改一个普通数据那样时，就会触发<code>setter</code> 函数，执行一些自定义的操作，例如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#demo'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">'Foo'</span>,</span><br><span class="line">        lastName: <span class="string">'Bar'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">            <span class="comment">// getter</span></span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// setter</span></span><br><span class="line">            set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>);</span><br><span class="line">                <span class="keyword">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//现在再运行 vm.fullName = 'John Doe' 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。</span></span><br></pre></td></tr></table></figure><blockquote><p>绝大多数情况下，我们只会用默认的<code>getter</code> 方法来读取一个计算属性，在业务中很少用到<code>setter</code>,所以在声明一个计算属性时，可以直接使用默认的写法，不必将<code>getter</code> 和<code>setter</code>都声明</p></blockquote><h3 id="2-3-计算属性缓存"><a href="#2-3-计算属性缓存" class="headerlink" title="2.3 计算属性缓存"></a>2.3 计算属性缓存</h3><blockquote><p>除了使用计算属性外，我们也可以通过在表达式中调用方法来达到同样的效果</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseTitle()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  reverseTitle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.title.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们可以将同一函数定义为一个方法而不是一个计算属性，两种方式的最终结果确实是完全相同的。只是一个使用<code>reverseTitle()</code>取值，一个使用<code>reverseTitle</code>取值。</li><li>然而，不同的是计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。</li><li>这就意味着只要 <code>title</code>还没有发生改变，多次访问<code>reverseTitle</code>计算属性会立即返回之前的计算结果，而不必再次执行函数。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseTitle&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseTitle1()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>补充货物1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>总价为：&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="javascript">      reverseTitle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.title.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)　　<span class="comment">//而使用计算属性，只要title没变，页面渲染是不会重新进这里来计算的，而是使用了缓存。</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      price: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> <span class="keyword">this</span>.package1.count*<span class="keyword">this</span>.package1.price+<span class="keyword">this</span>.package2.count*<span class="keyword">this</span>.package2.price</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">     &#125;,</span></span><br><span class="line"><span class="javascript">    methods: &#123;   <span class="comment">//对象的方法</span></span></span><br><span class="line"><span class="javascript">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.package1.count++</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    reverseTitle1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.title.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)　　<span class="comment">//点击补充货物，也会进这个方法，再次计算。不是刷新，而是只要页面渲染，就会进方法里重新计算。</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。 </li><li>我们为什么需要缓存？假设我们有一个性能开销比较大的的计算属性 A，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 A </li><li>如果没有缓存，我们将不可避免的多次执行 A 的<code>getter</code>！如果你不希望有缓存，请用方法来替代</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、监听属性&quot;&gt;&lt;a href=&quot;#一、监听属性&quot; class=&quot;headerlink&quot; title=&quot;一、监听属性&quot;&gt;&lt;/a&gt;一、监听属性&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们在工作中常常需要监听某一个属性值的变化，这个时候我们就需要用到了监听属性&lt;co
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件（九)</title>
    <link href="http://blog.poetries.top/2018/08/27/vue-component/"/>
    <id>http://blog.poetries.top/2018/08/27/vue-component/</id>
    <published>2018-08-27T03:20:32.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、组件的基本使用"><a href="#一、组件的基本使用" class="headerlink" title="一、组件的基本使用"></a>一、组件的基本使用</h2><h3 id="1-1-注册组件"><a href="#1-1-注册组件" class="headerlink" title="1.1 注册组件"></a>1.1 注册组件</h3><blockquote><p>注册组件就是利用<code>Vue.component()</code>方法，先传入一个自定义组件的名字，然后传入这个组件的配置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'mycomponent'</span>,&#123;</span><br><span class="line">    template: <span class="string">`&lt;div&gt;这是一个自定义组件&lt;/div&gt;`</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">'hello world'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>如上方式，就已经创建了一个自定义组件，然后就可以在Vue实例挂在的DOM元素中使用它</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycomponent</span>&gt;</span><span class="tag">&lt;/<span class="name">mycomponent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">'my-component'</span>: &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个局部的自定义组件，只能在当前Vue实例中使用<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>直接使用<code>Vue.component()</code>创建的组件，所有的Vue实例都可以使用。还可以在某个Vue实例中注册只有自己能使用的组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      <span class="string">'my-component'</span>: &#123;</span><br><span class="line">        template: <span class="string">`&lt;div&gt;这是一个局部的自定义组件，只能在当前Vue实例中使用&lt;/div&gt;`</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="1-2-模板的要求"><a href="#1-2-模板的要求" class="headerlink" title="1.2 模板的要求"></a>1.2 模板的要求</h3><blockquote><p>注意：组件的模板只能有一个根元素。下面的情况是不允许的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template: `&lt;div&gt;这是一个局部的自定义组件，只能在当前Vue实例中使用&lt;/div&gt;</span><br><span class="line">            &lt;button&gt;hello&lt;/button&gt;`,</span><br></pre></td></tr></table></figure><h3 id="1-3-组件中的data必须是函数"><a href="#1-3-组件中的data必须是函数" class="headerlink" title="1.3 组件中的data必须是函数"></a>1.3 组件中的data必须是函数</h3><ul><li>可以看出，注册组件时传入的配置和创建Vue实例差不多，但也有不同，其中一个就是<code>data</code>属性必须是一个函数</li><li>这是因为如果像<code>Vue</code>实例那样，传入一个对象，由于JS中对象类型的变量实际上保存的是对象的引用，所以当存在多个这样的组件时，会共享数据，导致一个组件中数据的改变会引起其他组件数据的改变。</li><li>而使用一个返回对象的函数，每次使用组件都会创建一个新的对象，这样就不会出现共享数据的问题来了</li></ul><h3 id="1-4-关于DOM模板的解析"><a href="#1-4-关于DOM模板的解析" class="headerlink" title="1.4 关于DOM模板的解析"></a>1.4 关于DOM模板的解析</h3><blockquote><p>当使用 DOM 作为模版时 (例如，将 el 选项挂载到一个已存在的元素上), 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模板内容。尤其像这些元素 <code>&lt;ul&gt;</code>，<code>&lt;ol&gt;</code>，<code>&lt;table&gt;</code>，<code>&lt;select&gt;</code> 限制了能被它包裹的元素，而一些像 <code>&lt;option&gt;</code> 这样的元素只能出现在某些其它元素内部</p></blockquote><ul><li>在自定义组件中使用这些受限制的元素时会导致一些问题，例如</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-row</span>&gt;</span>...<span class="tag">&lt;/<span class="name">my-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自定义组件 <code>&lt;my-row&gt;</code> 被认为是无效的内容，因此在渲染的时候会导致错误。这时应使用特殊的 <code>is</code> 属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"my-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>也就是说，标准HTML中，一些元素中只能放置特定的子元素，另一些元素只能存在于特定的父元素中。比如<code>table</code>中不能放置<code>div</code>，<code>tr</code>的父元素不能<code>div</code>等。所以，当使用自定义标签时，标签名还是那些标签的名字，但是可以在标签的<code>is</code>属性中填写自定义组件的名字</p></blockquote><p><strong>应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用</strong>：</p><ul><li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li><li><code>JavaScript</code> 内联模版字符串</li><li><code>.vue</code> 组件</li></ul><blockquote><p>一般情况下，只有单文件组件<code>.vue</code>可以忽略这种情况</p></blockquote><h2 id="二、组件的属性和事件"><a href="#二、组件的属性和事件" class="headerlink" title="二、组件的属性和事件"></a>二、组件的属性和事件</h2><blockquote><p>在<code>html</code>中使用元素，会有一些属性，如<code>class</code>,<code>id</code>，还可以绑定事件，自定义组件也是可以的。当在一个组件中，使用了其他自定义组件时，就会利用子组件的属性和事件来和父组件进行数据交流</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a057513f8294a129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>父子组件之间的通信就是 <code>props down</code>,<code>events up</code>，父组件通过属性<code>props</code>向下传递数据给子组件，子组件通过 事件<code>events</code> 给父组件发送消息。</li><li>比如，子组件需要某个数据，就在内部定义一个prop属性，然后父组件就像给<code>html</code>元素指定特性值一样，把自己的<code>data</code>属性传递给子组件的这个属性。</li><li>而当子组件内部发生了什么事情的时候，就通过自定义事件来把这个事情涉及到的数据暴露出来，供父组件处理</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-bind:foo</span>=<span class="string">"baz"</span> <span class="attr">v-on:event-a</span>=<span class="string">"doThis(arg1,...arg2)"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>foo</code>是<code>&lt;my-component&gt;</code>组件内部定义的一个<code>prop</code>属性，<code>baz</code>是父组件的一个<code>data</code>属性，</li><li><code>event-a</code>是子组件定义的一个事件，<code>doThis</code>是父组件的一个方法</li></ul><p><strong>过程就是这样</strong></p><ul><li>父组件把<code>baz</code>数据通过<code>prop</code>传递给子组件的<code>foo</code>；</li><li>子组件内部得到<code>foo</code>的值，就可以进行相应的操作；</li><li>当子组件内部发生了一些变化，希望父组件能知道时，就利用代码触发<code>event-a</code>事件，把一些数据发送出去</li><li>父组件把这个事件处理器绑定为<code>doThis</code>方法，子组件发送的数据，就作为<code>doThis</code>方法的参数被传进来</li><li>然后父组件就可以根据这些数据，进行相应的操作</li></ul><h2 id="三、属性Props"><a href="#三、属性Props" class="headerlink" title="三、属性Props"></a>三、属性Props</h2><blockquote><p>Vue组件通过<code>props</code>属性来声明一个自己的属性，然后父组件就可以往里面传递数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'mycomponent'</span>,&#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt;这是一个自定义组件,父组件传给我的内容是：&#123;&#123;myMessage&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class="line">    props: [<span class="string">'myMessage'</span>],</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">'hello world'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>调用该组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycomponent</span> <span class="attr">my-message</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">mycomponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>，由于<code>HTML</code>特性是不区分大小写的，所以传递属性值时，<code>myMessage</code>应该转换成 <code>kebab-case</code> (短横线隔开式)<code>my-message=&quot;hello&quot;</code></li></ul><h3 id="3-1-v-bind绑定属性值"><a href="#3-1-v-bind绑定属性值" class="headerlink" title="3.1 v-bind绑定属性值"></a>3.1 v-bind绑定属性值</h3><ul><li>一般情况下，使用<code>v-bind</code>给元素特性(attribute)传递值时，<code>Vue</code>会将<code>&quot;&quot;</code>中的内容当做一个表达式</li><li>用<code>v-bind:class</code>和<code>class</code>传入正常的类名，效果是一样的，因为对于这两个特性，<code>Vue</code>采用了合并而不是替换的原则</li></ul><h3 id="3-2-动态绑定特性值"><a href="#3-2-动态绑定特性值" class="headerlink" title="3.2 动态绑定特性值"></a>3.2 动态绑定特性值</h3><blockquote><p>想要把父组件的属性绑定到子组件，应该使用<code>v-bind</code>，这样，父组件中数据改变时能反映到子组件。<br>注意，根据父组件传递给子组件的属性类型的不同，当在子组件中更改这个属性时，会有以下两种情况</p></blockquote><ul><li>当父组件传递的属性是引用类型时，在子组件中更改相应的属性会导致父组件相应属性的更改</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是父组件的parentArray：&#123;&#123;parentArray&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:child-array</span>=<span class="string">"parentArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">     Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="undefined">       template: `</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是接收了父组件传递值的子组件的childArray: &#123;&#123;childArray&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"changeArray"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           点击我改变父元素的parentArray<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">       props: [<span class="string">'childArray'</span>],</span></span><br><span class="line"><span class="undefined">       data () &#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">           counter: 1</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">       &#125;,</span></span><br><span class="line"><span class="undefined">       methods: &#123;</span></span><br><span class="line"><span class="undefined">         changeArray () &#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">this</span>.childArray.push(<span class="keyword">this</span>.counter++)</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">     &#125;)</span></span><br><span class="line"><span class="javascript">     <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       el: <span class="string">'#app2'</span>,</span></span><br><span class="line"><span class="undefined">       data: &#123;</span></span><br><span class="line"><span class="undefined">         parentArray: []</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">     &#125;)</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当父组件传递值为基本类型时，在子组件中更改这个属性会报错。正确的做法是，在父组件中绑定属性值时，加上<code>.sync</code>修饰符</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:child-array.sync</span>=<span class="string">"parentArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>然后在子组件中改变相应的属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    changeArray () &#123;</span><br><span class="line">      <span class="keyword">this</span>.counter++</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'update:childArray'</span>, <span class="keyword">this</span>.counter)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-子组件希望对传入的prop进行操作"><a href="#3-3-子组件希望对传入的prop进行操作" class="headerlink" title="3.3 子组件希望对传入的prop进行操作"></a>3.3 子组件希望对传入的prop进行操作</h3><blockquote><p>一般来说，是不建议在子组件中对父组件中传递来的属性进行操作的。如果真的有这种需求,可以这样:</p></blockquote><ul><li>父组件传递了一个基本类型值，那么可以在子组件中创建一个新的属性，并以传递进来的值进行初始化，之后就可以操作这个新的属性了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="keyword">this</span>.initialCounter &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父组件传递了一个引用类型值，为了避免更改父组件中相应的数据，最好是对引用类型进行复制。复杂的情况，肯定应该是深复制。</li></ul><h3 id="3-4-给子组件传递正确类型的值"><a href="#3-4-给子组件传递正确类型的值" class="headerlink" title="3.4 给子组件传递正确类型的值"></a>3.4 给子组件传递正确类型的值</h3><blockquote><p>静态的给子组件的特性传递值，它都会把他当做一个字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传递了一个字符串 &quot;1&quot; --&gt;</span><br><span class="line">&lt;comp some-prop=&quot;1&quot;&gt;&lt;/comp&gt;</span><br></pre></td></tr></table></figure><blockquote><p>子组件中，特性的值是字符串 “1” 而不是 <code>number</code> 1。如果想传递正确的数值，应该使用<code>v-bind</code>传递，这样就能把传递的值当做一个表达式来处理，而不是字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传递实际的 number 1 --&gt;</span><br><span class="line">&lt;comp v-bind:some-prop=&quot;1&quot;&gt;&lt;/comp&gt;</span><br></pre></td></tr></table></figure><h2 id="四、Prop验证"><a href="#四、Prop验证" class="headerlink" title="四、Prop验证"></a>四、Prop验证</h2><blockquote><p>我们可以给组件的<code>props</code>属性添加验证，当传入的数据不符合要求时，<code>Vue</code>会发出警告</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础类型检测 (`null` 意思是任何类型都可以)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多种类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必传且是字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数字，有默认值</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数组/对象的默认值应当由一个工厂函数返回</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>type 可以是下面原生构造器</strong>：</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Function</code></li><li><code>Object</code></li><li><code>Array</code></li><li><code>Symbol</code></li><li><code>type</code>也可以是一个自定义构造器函数，使用 <code>instanceof</code> 检测</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义Person构造器</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">    template: <span class="string">`&lt;div&gt;名字: &#123;&#123; person-prop.name &#125;&#125;， 年龄： &#123;&#123; person-prop.age &#125;&#125; &lt;/div&gt;`</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">      person-prop: &#123;</span><br><span class="line">        type: Person     <span class="comment">// 指定类型</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app2'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      person: <span class="number">2</span>        <span class="comment">// 传入Number类型会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>非Prop类型的属性</strong></p><blockquote><p>也可以像在html标签中添加<code>data-</code>开头的自定义属性一样，给自定义组件添加任意的属性。而不仅限于<code>data-*</code>形式，这样做的话，Vue会把这个属性放在自定义组件的根元素上。一个自定义组件的模板只能有一个根元素</p></blockquote><p><strong>覆盖非Prop属性</strong></p><blockquote><p>如果父组件向子组件的非<code>prop</code>属性传递了值，那么这个值会覆盖子组件模板中的特性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">att</span>=<span class="string">"helloParent"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component2'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">att</span>=<span class="string">"helloChild"</span>&gt;</span>子组件原有的特性被覆盖了<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app3'</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上面渲染的结果是，<code>div</code>的<code>att</code>属性是<code>helloParent</code>。</li><li>注意：前面已经提到过，覆盖原则对于<code>class</code>和<code>style</code>不适用,而是采用了合并(<code>merge</code>)的原则</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">att</span>=<span class="string">"helloParent"</span> <span class="attr">class</span>=<span class="string">"class2"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component2'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">att</span>=<span class="string">"helloChild"</span> <span class="attr">class</span>=<span class="string">"class1"</span> <span class="attr">style</span>=<span class="string">"background: yellow;"</span>&gt;</span>子组件原有的特性被覆盖了<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app3'</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的渲染结果是，<code>div</code>的类名是<code>class1 class2</code>，行内样式是<code>color:red; background:yellow;</code></p></blockquote><h2 id="五、自定义事件"><a href="#五、自定义事件" class="headerlink" title="五、自定义事件"></a>五、自定义事件</h2><blockquote><p>通过<code>prop</code>属性，父组件可以向子组件传递数据，而子组件的自定义事件就是用来将内部的数据报告给父组件的</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">v-on:myclick</span>=<span class="string">"onClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component2'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"childClick"</span>&gt;</span>点击我触发自定义事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      childClick () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'myclick'</span>, <span class="string">'这是我暴露出去的数据'</span>, <span class="string">'这是我暴露出去的数据2'</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app3'</span>,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      onClick () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子组件在自己的方法中将自定义事件以及需要发出的数据通过以下代码发送出去</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&apos;myclick&apos;, &apos;这是我暴露出去的数据&apos;, &apos;这是我暴露出去的数据2&apos;)</span><br></pre></td></tr></table></figure><ul><li>第一个参数是自定义事件的名字</li><li>后面的参数是依次想要发送出去的数据</li></ul><blockquote><p>父组件利用<code>v-on</code>为事件绑定处理器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component2 v-on:myclick=&quot;onClick&quot;&gt;&lt;/my-component2&gt;</span><br></pre></td></tr></table></figure><h3 id="5-1-绑定原生事件"><a href="#5-1-绑定原生事件" class="headerlink" title="5.1 绑定原生事件"></a>5.1 绑定原生事件</h3><blockquote><p>如果想在某个组件的根元素上监听一个原生事件。可以使用 <code>.native</code>修饰 <code>v-on</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-on:click.native</span>=<span class="string">"doTheThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-探究v-model"><a href="#5-2-探究v-model" class="headerlink" title="5.2 探究v-model"></a>5.2 探究v-model</h3><blockquote><p><code>v-model</code>可以对表单控件实现数据的双向绑定，它的原理就是利用了绑定属性和事件来实现的。比如<code>input</code>控件。不使用<code>v-model</code>，可以这样实现数据的双向绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"text"</span> <span class="attr">v-on:input</span>=<span class="string">"changeValue($event.target.value)"</span>&gt;</span></span><br><span class="line">    &#123;&#123;text&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app4'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">          text: <span class="string">'444'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">          changeValue (value) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.text = value</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的代码同样实现了数据的双向绑定。其本质就是:</p></blockquote><ul><li>把<code>input</code>的<code>value</code>特性绑定到<code>Vue</code>实例的属性<code>text</code>上，<code>text</code>改变，<code>input</code>中的内容也会改变</li><li>然后把表单的<code>input</code>事件处理函数设置为<code>Vue</code>实例的一个方法，这个方法会根据输入参数改变<code>Vue</code>中<code>text</code>的值<br>相应的，在input中输入内容时，触发了<code>input</code>事件，把<code>event.target.value</code>传给这个方法，最后就实现了改变绑定的数据的效果。</li><li>而<code>v-model</code>就是上面这种方式的语法糖，也就是把上面的写法封装了一下，方便我们使用</li></ul><h3 id="5-3-使用自定义事件创建自定义的表单输入组件"><a href="#5-3-使用自定义事件创建自定义的表单输入组件" class="headerlink" title="5.3 使用自定义事件创建自定义的表单输入组件"></a>5.3 使用自定义事件创建自定义的表单输入组件</h3><blockquote><p>理解了<code>v-model</code>的内幕，也就可以把这个效果用在自定义表单组件上了。来实现一个简单的只能输入hello的表单输入组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component3</span> <span class="attr">v-model</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;hello&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component3'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"value"</span> @<span class="attr">input</span>=<span class="string">"checkInput($event.target.value)"</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">'value'</span>],</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      checkInput (value) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hello = <span class="string">'hello'</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!hello.includes(value)) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, hello)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.input.value = hello</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, value)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app5'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      hello: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、动态组件"><a href="#六、动态组件" class="headerlink" title="六、动态组件"></a>六、动态组件</h2><blockquote><p>通过使用保留的 <code>&lt;component&gt;</code> 元素，动态地绑定到它的 <code>is</code> 特性，可以让多个组件使用同一个挂载点，并动态切换</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"currentComponent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"home"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"post"</span>&gt;</span>post<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"about"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app6'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">          currentComponent: <span class="string">'home'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        components: &#123;</span></span><br><span class="line"><span class="undefined">          home: &#123;</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">header</span>&gt;</span>这是home组件<span class="tag">&lt;/<span class="name">header</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          post: &#123;</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">header</span>&gt;</span>这是post组件<span class="tag">&lt;/<span class="name">header</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          about: &#123;</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">header</span>&gt;</span>这是about组件<span class="tag">&lt;/<span class="name">header</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>保留切换出去的组件，避免重新渲染</strong></p><blockquote><p>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 <code>keep-alive</code> 指令参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentComponent"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非活动组件将被缓存！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、使用slot分发内容"><a href="#七、使用slot分发内容" class="headerlink" title="七、使用slot分发内容"></a>七、使用slot分发内容</h2><h3 id="7-1-单个slot"><a href="#7-1-单个slot" class="headerlink" title="7.1 单个slot"></a>7.1 单个slot</h3><blockquote><p>很多组件的使用方式是这样的：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure><ul><li>也就是说组件中是空的，没有放置任何文本或元素。但是原生的html元素都是可以进行嵌套的，<code>div</code>里面放<code>table</code>什么的。自定义组件开闭标签之间也可以放置内容，不过需要在定义组件时使用<code>slot</code>。</li><li><code>slot</code>相当于子组件设置了一个地方，如果在调用它的时候，往它的开闭标签之间放了东西，那么它就把这些东西放到<code>slot</code>中。</li><li>当子组件中没有<code>slot</code>时，父组件放在子组件标签内的东西将被丢弃；</li><li>子组件的<code>slot</code>标签内可以放置内容，当父组件没有放置内容在子组件标签内时，slot中的内容会渲染出来</li></ul><p>子组件的模板:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    只有在没有要分发的内容时才会显示。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-带名称的slot"><a href="#7-2-带名称的slot" class="headerlink" title="7.2 带名称的slot"></a>7.2 带名称的slot</h3><ul><li><code>slot</code>可以有很多个。那么子组件对于父组件放置的多余的内容如何放到各个<code>slot</code>中呢？方法就是子组件给每个<code>slot</code>起一个名字<code>name</code>，父组件放置多余的元素时，给每个元素的<code>slot</code>属性分配一个代表<code>slot</code>的名字。到时候，多余的内容就会根据自己的<code>slot</code>属性去找具有对应名字的<code>slot</code>元素。</li></ul><p><strong>注意</strong>：</p><ul><li>子组件可以有一个匿名的<code>slot</code>，当分发的多余内容找不到对应的<code>slot</code>时，就会进入这里面<br>如果子组件没有匿名的<code>slot</code>，当分发的多余内容找不到对应的<code>slot</code>时，就会被丢弃</li></ul><p>例如，假定我们有一个 <code>app-layout</code>组件，它的模板为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件模版：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、组件通信"><a href="#八、组件通信" class="headerlink" title="八、组件通信"></a>八、组件通信</h2><blockquote><p>在 Vue.js 中，父子组件的关系可以总结为 <code>props down</code>, <code>events up</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a057513f8294a129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>父组件通过 <code>props</code> 向下传递数据给子组件，子组件通过 <code>events</code> 给父组件发送消息</p></blockquote><h2 id="8-1-父与子"><a href="#8-1-父与子" class="headerlink" title="8.1 父与子"></a>8.1 父与子</h2><blockquote><p>父组件是通过<code>props</code>属性给子组件通信的来看下代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;child :child-com=&quot;content&quot;&gt;&lt;/child&gt; //注意这里用驼峰写法哦</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        content:&apos;sichaoyun&apos;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子组件通过props来接受数据</strong></p><blockquote><p>第一种方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'childCom'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>第二种方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    childCom: <span class="built_in">String</span> <span class="comment">// 这里指定了字符串类型，如果类型不一致会警告哦</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第三种方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    childCom: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'sichaoyun'</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-子与父"><a href="#8-2-子与父" class="headerlink" title="8.2 子与父"></a>8.2 子与父</h3><blockquote><p><code>vue2.0</code>只允许单向数据传递，我们通过出发事件来改变组件的数据</p></blockquote><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"open"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">       open() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$emit(<span class="string">'showbox'</span>,<span class="string">'the msg'</span>); <span class="comment">//触发showbox方法，'the msg'为向父组件传递的数据</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">showbox</span>=<span class="string">"toshow"</span> <span class="attr">:msg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span> //监听子组件触发的showbox事件,然后调用toshow方法</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        toshow(msg) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.msg = msg;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-兄弟组件之间的通信"><a href="#8-3-兄弟组件之间的通信" class="headerlink" title="8.3 兄弟组件之间的通信"></a>8.3 兄弟组件之间的通信</h3><blockquote><p>我们可以实例化一个vue实例，相当于一个第三方</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let vm = new Vue(); //创建一个新实例</span><br></pre></td></tr></table></figure><p>组件他哥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @click=&quot;ge&quot;&gt;&lt;/div&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    ge() &#123;</span><br><span class="line">        vm.$emit(&apos;blur&apos;,&apos;sichaoyun&apos;); //触发事件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件小弟接受大哥命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">created() &#123;</span><br><span class="line">  vm.$on(&apos;blur&apos;, (arg) =&gt; &#123; </span><br><span class="line">        this.test= arg; // 接收</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、组件的基本使用&quot;&gt;&lt;a href=&quot;#一、组件的基本使用&quot; class=&quot;headerlink&quot; title=&quot;一、组件的基本使用&quot;&gt;&lt;/a&gt;一、组件的基本使用&lt;/h2&gt;&lt;h3 id=&quot;1-1-注册组件&quot;&gt;&lt;a href=&quot;#1-1-注册组件&quot; class=&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue过滤器（八）</title>
    <link href="http://blog.poetries.top/2018/08/27/vue-filters/"/>
    <id>http://blog.poetries.top/2018/08/27/vue-filters/</id>
    <published>2018-08-27T02:20:32.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、全局过滤器"><a href="#一、全局过滤器" class="headerlink" title="一、全局过滤器"></a>一、全局过滤器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数表示：过滤器的名称</span></span><br><span class="line"><span class="comment">// 第二个参数表示：函数，使用过滤器的时候，这个函数中的代码会被执行</span></span><br><span class="line">Vue.filter(<span class="string">'filterName'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// value 表示要过滤的内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'date'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">input, format = <span class="string">'yyyy-MM-dd hh:mm:ss'</span>）&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      var o = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="string">"M+"</span>: input.getMonth(</span>) + 1, //月份 </span></span><br><span class="line"><span class="function">        "<span class="title">d</span>+": <span class="title">input</span>.<span class="title">getDate</span>(<span class="params"></span>), //日 </span></span><br><span class="line"><span class="function">        "<span class="title">h</span>+": <span class="title">input</span>.<span class="title">getHours</span>(<span class="params"></span>), //小时 </span></span><br><span class="line"><span class="function">        "<span class="title">m</span>+": <span class="title">input</span>.<span class="title">getMinutes</span>(<span class="params"></span>), //分 </span></span><br><span class="line"><span class="function">        "<span class="title">s</span>+": <span class="title">input</span>.<span class="title">getSeconds</span>(<span class="params"></span>), //秒 </span></span><br><span class="line"><span class="function">        "<span class="title">q</span>+": <span class="title">Math</span>.<span class="title">floor</span>(<span class="params">(input.getMonth(</span>) + 3) / 3), //季度 </span></span><br><span class="line"><span class="function">        "<span class="title">S</span>": <span class="title">input</span>.<span class="title">getMilliseconds</span>(<span class="params"></span>) //毫秒 </span></span><br><span class="line"><span class="function">      &#125;;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">      <span class="title">if</span> (<span class="params"><span class="regexp">/(y+)/</span>.test(format</span>)) <span class="title">format</span> = <span class="title">format</span>.<span class="title">replace</span>(<span class="params">RegExp.$<span class="number">1</span>, (input.getFullYear(</span>) + "").<span class="title">substr</span>(<span class="params"><span class="number">4</span> - RegExp.$<span class="number">1.</span>length</span>));</span></span><br><span class="line"><span class="function">      // 不够2位的前面补0</span></span><br><span class="line"><span class="function">      <span class="title">for</span> (<span class="params">var k in o</span>)</span></span><br><span class="line"><span class="function">        <span class="title">if</span> (<span class="params">new RegExp(<span class="string">"("</span> + k + <span class="string">")"</span></span>).<span class="title">test</span>(<span class="params">format</span>)) </span></span><br><span class="line"><span class="function">        <span class="title">format</span> = <span class="title">format</span>.<span class="title">replace</span>(<span class="params">RegExp.$<span class="number">1</span>, (RegExp.$<span class="number">1.</span>length == <span class="number">1</span></span>) ? (<span class="params">o[k]</span>) : (<span class="params">(<span class="string">"00"</span> + o[k]</span>).<span class="title">substr</span>(<span class="params">(<span class="string">""</span> + o[k]</span>).<span class="title">length</span>)));</span></span><br><span class="line"><span class="function">      <span class="title">return</span> <span class="title">format</span>;</span></span><br><span class="line"><span class="function">    &#125;)</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;item.time | date('yyyy-MM-dd hh:mm:ss')&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一个项目中，可能要用到很多过滤器来处理数据，多个组件公用的，可以注册全局过滤器。单个组件使用的，就挂载到实例<code>filters</code>中。项目做的多了以后，可以整理一套常用的<code>filters</code>，不用反复的写。比如：时间等各种操作，数据格式转化，单位换算，部分数据的<code>md5</code>加密等…</p></blockquote><p><strong>创建一个filters专门放各种过滤器</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0bab828b656d1753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>filter.js</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2fd4231409acdea4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p> main.js</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-631dabdbf85a1bd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>页面上直接用 ’｜过滤器名‘ 即可</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0941a212212fa3aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>或者直接在<code>main.js</code>中直接自定义全局过滤器</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0efefc41d3b8e530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、局部过滤器"><a href="#二、局部过滤器" class="headerlink" title="二、局部过滤器"></a>二、局部过滤器</h2><blockquote><p>在某一个vue实例的内创建的，只在当前实例中起作用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">      </span><br><span class="line">  &#125;,</span><br><span class="line">   <span class="comment">// 通过 filters 属性创建局部过滤器</span></span><br><span class="line">   <span class="comment">// 注意：此处为 filters</span></span><br><span class="line">  filters: &#123;</span><br><span class="line">    filterName: <span class="function"><span class="keyword">function</span>(<span class="params">value, format</span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、全局过滤器&quot;&gt;&lt;a href=&quot;#一、全局过滤器&quot; class=&quot;headerlink&quot; title=&quot;一、全局过滤器&quot;&gt;&lt;/a&gt;一、全局过滤器&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 表单控件与绑定（七）</title>
    <link href="http://blog.poetries.top/2018/08/27/vue-form/"/>
    <id>http://blog.poetries.top/2018/08/27/vue-form/</id>
    <published>2018-08-27T02:10:32.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、文本框"><a href="#一、文本框" class="headerlink" title="一、文本框"></a>一、文本框</h2><h3 id="1-1-普通文本框"><a href="#1-1-普通文本框" class="headerlink" title="1.1 普通文本框"></a>1.1 普通文本框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"textBox"</span> <span class="attr">placeholder</span>=<span class="string">"输入内容..."</span>&gt;</span>输入的内容：&#123;&#123; textBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            textBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-数字文本框"><a href="#1-2-数字文本框" class="headerlink" title="1.2 数字文本框"></a>1.2 数字文本框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"numberTextBox"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">placeholder</span>=<span class="string">"输入内容..."</span>&gt;</span> 输入的内容：&#123;&#123; numberTextBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            numberTextBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>.number</code>参数会强制把返回值转成<code>Number</code>类型，因为就算是<code>type=&quot;number&quot;</code>，返回的也是字符串型</p></blockquote><h3 id="1-3-多行输入框"><a href="#1-3-多行输入框" class="headerlink" title="1.3 多行输入框"></a>1.3 多行输入框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"multiTextBox"</span> <span class="attr">placeholder</span>=<span class="string">"输入内容..."</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的内容：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"white-space:pre"</span>&gt;</span>&#123;&#123; multiTextBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            multiTextBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>style=&quot;white-space:pre&quot;</code>表示空白会被浏览器保留。其行为方式类似 <code>HTML</code> 中的 <code>&lt;pre&gt;</code> 标签</p></blockquote><h2 id="二、复选框"><a href="#二、复选框" class="headerlink" title="二、复选框"></a>二、复选框</h2><h3 id="2-1-单个复选框"><a href="#2-1-单个复选框" class="headerlink" title="2.1 单个复选框"></a>2.1 单个复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"singleCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; singleCheckBox &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            singleCheckBox: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-定义属性单个复选框"><a href="#2-2-定义属性单个复选框" class="headerlink" title="2.2 定义属性单个复选框"></a>2.2 定义属性单个复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"customSingleCheckBox"</span> <span class="attr">v-bind:true-value</span>=<span class="string">"customTrue"</span> <span class="attr">v-bind:false-value</span>=<span class="string">"customFalse"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; customSingleCheckBox &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            customTrue: <span class="string">'真'</span>,</span></span><br><span class="line"><span class="javascript">            customFalse: <span class="string">'假'</span>,</span></span><br><span class="line"><span class="javascript">            customSingleCheckBox: <span class="string">'假'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-bind:true-value</code>设置为真时的属性，<code>v-bind:false-value</code>设置为假时的属性</p></blockquote><h3 id="2-3-多个复选框"><a href="#2-3-多个复选框" class="headerlink" title="2.3 多个复选框"></a>2.3 多个复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"tansea"</span> <span class="attr">value</span>=<span class="string">"TanSea"</span> <span class="attr">v-model</span>=<span class="string">"multiCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"tansea"</span>&gt;</span>TanSea<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"multiCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"baidu"</span> <span class="attr">value</span>=<span class="string">"Baidu"</span> <span class="attr">v-model</span>=<span class="string">"multiCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"baidu"</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; multiCheckBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            multiCheckBox: []</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、单选框"><a href="#三、单选框" class="headerlink" title="三、单选框"></a>三、单选框</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">复制代码</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"radioBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"radioBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; radioBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            radioBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、下拉框"><a href="#四、下拉框" class="headerlink" title="四、下拉框"></a>四、下拉框</h2><h3 id="4-1-普通下拉框"><a href="#4-1-普通下拉框" class="headerlink" title="4.1 普通下拉框"></a>4.1 普通下拉框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"comboBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择一项<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; comboBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            comboBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-动态绑定下拉框"><a href="#4-2-动态绑定下拉框" class="headerlink" title="4.2 动态绑定下拉框"></a>4.2 动态绑定下拉框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"dynamicComboBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"optionItem in optionItems"</span> <span class="attr">v-bind:value</span>=<span class="string">"optionItem.value"</span>&gt;</span></span><br><span class="line">            &#123;&#123; optionItem.text &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; dynamicComboBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            dynamicComboBox: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">                optionItems: [</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">value</span>: <span class="string">'TanSea'</span>, <span class="attr">text</span>: <span class="string">'双子宫殿'</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">value</span>: <span class="string">'Google'</span>, <span class="attr">text</span>: <span class="string">'谷歌搜索'</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">value</span>: <span class="string">'Baidu'</span>, <span class="attr">text</span>: <span class="string">'百度搜索'</span> &#125;</span></span><br><span class="line"><span class="undefined">                ]</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-多选列表"><a href="#4-3-多选列表" class="headerlink" title="4.3 多选列表"></a>4.3 多选列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"multiComboBox"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>双子宫殿<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>谷歌搜索<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>百度搜索<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; multiComboBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            multiComboBox: []</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、文本框&quot;&gt;&lt;a href=&quot;#一、文本框&quot; class=&quot;headerlink&quot; title=&quot;一、文本框&quot;&gt;&lt;/a&gt;一、文本框&lt;/h2&gt;&lt;h3 id=&quot;1-1-普通文本框&quot;&gt;&lt;a href=&quot;#1-1-普通文本框&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue事件（六）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-event/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-event/</id>
    <published>2018-08-26T16:10:32.000Z</published>
    <updated>2018-09-17T03:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、方法传参"><a href="#一、方法传参" class="headerlink" title="一、方法传参"></a>一、方法传参</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sayHi('你好')"</span>&gt;</span>说你好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!--这里使用@--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sayHi('我被点击了')"</span>&gt;</span>说我被点击了<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!--这里使用@--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myVue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="javascript">        methods: &#123;      <span class="comment">//这里使用methods</span></span></span><br><span class="line"><span class="javascript">            sayHi: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                alert(message)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、vue访问原生-DOM-事件"><a href="#二、vue访问原生-DOM-事件" class="headerlink" title="二、vue访问原生 DOM 事件"></a>二、vue访问原生 DOM 事件</h2><blockquote><p>用<code>$event</code>获取</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeColor('你好',$event)"</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!--这里使用@--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 100px;background-color: red;"</span> @<span class="attr">mouseover</span>=<span class="string">"over('鼠标从我上面滑过',$event)"</span>&gt;</span></span><br><span class="line">    鼠标从我上面滑过试试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">            </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myVue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="javascript">        methods: &#123;      <span class="comment">//这里使用methods</span></span></span><br><span class="line"><span class="javascript">            changeColor: <span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(message+event);    <span class="comment">//弹出我被点击了,事件是[object MouseEvent]</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            over :<span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(message+event);   <span class="comment">//弹出鼠标从我上面滑过,事件是[object MouseEvent]</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、事件修饰符"><a href="#三、事件修饰符" class="headerlink" title="三、事件修饰符"></a>三、事件修饰符</h2><blockquote><p>事件修饰符有基本的6种</p></blockquote><p><strong>.stop阻止事件冒泡</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.prevent阻止默认事件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.capture时间捕获（从上到下）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.self只在元素自身回调</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.once只触发一次</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <a href="mailto:`@click.prevent.self" target="_blank" rel="noopener">`@click.prevent.self</a><code>会阻止所有的点击，而</code>@click.self.prevent` 只会阻止元素上的点击</p></blockquote><h2 id="四、键值修饰符"><a href="#四、键值修饰符" class="headerlink" title="四、键值修饰符"></a>四、键值修饰符</h2><blockquote><p>在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 v-on 在监听键盘事件时添加关键修饰符</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-on:keydown</span>=<span class="string">"ke"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"事件处理"</span>,</span></span><br><span class="line"><span class="undefined">            counter:0</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            ke:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(e.keyCode == <span class="number">13</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.msg = e.target.value;</span></span><br><span class="line"><span class="javascript">                    e.target.value = <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>enter</code>(回车)</li><li><code>tab</code>（tab切换）</li><li><code>delete</code> (捕获 “删除” 和 “退格” 键)</li><li><code>esc</code>（esc键）</li><li><code>space</code>（退档键）</li><li><code>up</code>（上键）</li><li><code>down</code>（下键）</li><li><code>left</code>（左键）</li><li><code>right</code>（右键）</li></ul><blockquote><p>我们也可以通过全局<code>config.keyCodes</code> 对象自定义键值修饰符别名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f1 = 112</span><br></pre></td></tr></table></figure><p>、</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、方法传参&quot;&gt;&lt;a href=&quot;#一、方法传参&quot; class=&quot;headerlink&quot; title=&quot;一、方法传参&quot;&gt;&lt;/a&gt;一、方法传参&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
</feed>
